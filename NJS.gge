function executeBlock(block) {
    var request = new XMLHttpRequest();
    request.open("GET", "https://impragma.github.io/NeptunJS/blocks/"+block+".txt", false);  // `false` makes the request synchronous
    request.send(null);
    eval(request.responseText);
}
// BLOCK 1
var e; + function() {
  executeBlock(1);
  return 9057
}();
// BLOCK 2
var guids, guidss, guidsss, llms, llmss, llmsss, linklock, remlink, scripts, netp, linkLCC, lls, assdqssa54ds8s, assdq5564ds8s, script, guid, NCSS, NCSS2, NCSS3, NCSS8; + function() {
  executeBlock(2);
  return 5007
}();
// BLOCK 3
var locServer, xboxMode, BrowserInfo, testd, testa, mmnva, checkOldsave, savestate, saqw, sdwq, nlyr25, MEMFSE, ENODEVE, streamMs, tempRets, readBinarys, dumpx, ENVIRONMENT_IS_SHELLS, ENVIRONMENT_IS_NODES, STACK_ALIGNS, elemIcon, load_wasm, load_asm, load_proteus, NJSerror, NJSPlatform_lang, NJSerrorEvent, ltm, GetsaveName, RAF_FPS, RAF_FPS_set, NJSC, swapinfo, SSMB, vastER, _$Tm328569, _$Tm4455687, _$Tm489541, _$me923642, _$af328822, _$af329115, _$af345894, _$af3258963, _$me521387, _$af323616, _$af326917, _$af325618, _$af322519, _$af327820, _$af328821, _$af329322, _$af322814, _$af329123, _$af329524, _$af320325, _$af795748, _$af396540, _$af340820, _$af324613, _$af324o14, _$af320826, _$af325812, _$me325858, _$me873848, _$me325853, _$me535159, _$me325864, _$me355967, _$me345994, _$xb385365, _$xb386375, _$xb385812, _$xb325852, _$me385741, _$me385724, _$me385993, _$me923648, _$me451278, _$me962138, _$me123054, _$me325dw2, _$me325412, _$mesdw584, _$me325sd8, _$me854124, _$me478122, _$me781254, _$meddwq17, _$mew2qq17, _$mesdw217, iUpa, _$af320800, rbtl, NepDefCon, boxartimg, NepZoom, NepZoom, NselectGameLang, NepLang, NepEmu, SaveTitle, SaveTitleRUS, SaveTitleJP, gameUrlRus, gameUrlJP, gameUrl, NepEmuAR, psxSkipBios, cd2, cd3, cd4, cd5, cd6, cd7, cd8, Ndebag, EmuN64air, fba_unibios, neogeoCPU, xboxOne, NepAutoStart, neogeoBios, NepColor, NepMaxWidth, NepMaxHeight, EmuGbaBios, NepEmuOP, NepPlayer, antiAdBlock, gbabios, gbabios, cd2html, cd3html, cd4html, cd5html, cd6html, cd7html, cd8html, MultiCD, popupdata, MCDload, cd2GetUrl, cd3GetUrl, cd4GetUrl, cd5GetUrl, cd6GetUrl, cd7GetUrl, cd8GetUrl, getDataCdUrl, zipname, separatorss, separators, rometipe, ZName, fixZipname, getZipName, widthToHeight, aspect_ratio, NeptunP, baseUrl, getTitle, resultid, fileType, getTitlesClear, romTitle, getCached, clearFileType, game, gameRUS, gameJP, gameRUS, getfullname, bootRome, bootRome, fba_cpu, neptunPlatform, neptunPlatform, neptunPlatform, neptunPlatform, cssImg, cssImg, cssImg, imageLconlCont, imageLconlCont, imageLconlCont, progressText, langsavegame, langSM, Lstatus, Dstatus, remountLangBar, SWAPLang, TextSWAPLang, Text2SWAPLang, Text3SWAPLang, Text4SWAPLang, Text5SWAPLang, DiscMenuLang, ButtonSWAPSaveStateLang, InfoSWAPMountLang, InfoSWAPMountFinishLang, QsaveInfoBar, NJSOFF, NJSOn, VideoMenuLable1, VideoMenuLable1S, VideoMenuLable1AR, shadersOP1, shadersOP2, shadersOP3, shadersOP4, shadersOP5, shadersOP6, shadersOP7, shadersOP7, gpadNameId, arOP1, arOP2, arOP3, arOP4, RestartEmuleOP, ShadersLangBar, ButSetTolang, SNJSCLang, CloseLang, saveALLgame, saveOnlygame, ControlSetupLang, AdveSetLang, AccuracyN64, n64WH, CloseLang, resetLan, saveSlang, nesNolimit, gg_Extra, makeScreenShot, imgSettings, LoadEmuleNote, StartEmuleNote, EndEmuleNote, LangControl, restartLangBar, saveLangBar, loadLangBar, SaveStatePC, LoadStatePC, muteLangBar, pauseEmu, controll, settingsLang, controlLang, controlsSetting, optionLang, smoothingLang, videoLang, fpsLang, playLang, startplayLang, gamepadLang, restartLangBar, muteLangBar, fullscreenLangBar, zoomLangBar, saveInfoBar, loadInfoBar, muteInfoBar, restartInfoBar, downloadInfo, redydInfo, shedersBW, speedNes, defaultText, off, redyNeptun, endNeptun, LangGameSelect, NumLock, gamepadCon, ColorBW, DSOneScreen, FrameSkip, N64VC, RenderSize, N64Hack, N64Low, N64Sred, N64Hight, N64VEryHight, N64Core, PSXBios, AspectR, Region, AutoSave, LangControl, psx_typeGpad, showFPSLang, BrowserWar, ControlWar, Qst1, Qst2, progressText, langsavegame, langSM, Lstatus, Dstatus, remountLangBar, SWAPLang, TextSWAPLang, Text2SWAPLang, Text3SWAPLang, Text4SWAPLang, Text5SWAPLang, DiscMenuLang, ButtonSWAPSaveStateLang, InfoSWAPMountLang, InfoSWAPMountFinishLang, QsaveInfoBar, NJSOFF, NJSOn, ControlWar, Qst1, Qst2, VideoMenuLable1, VideoMenuLable1S, VideoMenuLable1AR, shadersOP1, shadersOP2, shadersOP3, shadersOP4, shadersOP5, shadersOP6, shadersOP7, shadersOP7, gpadNameId, arOP1, arOP2, arOP3, arOP4, ShadersLangBar, ButSetTolang, SNJSCLang, CloseLang, saveALLgame, saveOnlygame, ControlSetupLang, AdveSetLang, makeScreenShot, AccuracyN64, n64WH, nesNolimit, gg_Extra, resetLan, saveSlang, imgSettings, showFPSLang, psx_typeGpad, controlsSetting, ANADB, SaveStatePC, LoadStatePC, LoadEmuleNote, StartEmuleNote, EndEmuleNote, LangControl, restartLangBar, saveLangBar, loadLangBar, muteLangBar, pauseEmu, controll, saveInfoBar, loadInfoBar, muteInfoBar, restartInfoBar, settingsLang, controlLang, optionLang, smoothingLang, videoLang, fpsLang, playLang, startplayLang, gamepadLang, resetLan, saveLangBar, loadLangBar, muteLangBar, fullscreenLangBar, zoomLangBar, downloadInfo, readyInfo, sheders, shedersBW, speedNes, defaultText, off, LangGameSelect, NumLock, gamepadCon, ColorBW, DSOneScreen, FrameSkip, N64VC, RenderSize, N64Hack, N64Low, N64Sred, N64Hight, N64VEryHight, N64Core, PSXBios, AspectR, Region, AutoSave, BrowserWar, progressText, langsavegame, langSM, Lstatus, Dstatus, remountLangBar, SWAPLang, TextSWAPLang, Text2SWAPLang, Text3SWAPLang, Text4SWAPLang, Text5SWAPLang, DiscMenuLang, ButtonSWAPSaveStateLang, InfoSWAPMountLang, InfoSWAPMountFinishLang, QsaveInfoBar, NJSOFF, NJSOn, ControlWar, Qst1, Qst2, VideoMenuLable1, VideoMenuLable1S, VideoMenuLable1AR, shadersOP1, shadersOP2, shadersOP3, shadersOP4, shadersOP5, shadersOP6, shadersOP7, shadersOP7, gpadNameId, arOP1, arOP2, arOP3, arOP4, ShadersLangBar, ButSetTolang, SNJSCLang, CloseLang, saveALLgame, saveOnlygame, ControlSetupLang, AdveSetLang, makeScreenShot, AccuracyN64, n64WH, nesNolimit, gg_Extra, resetLan, saveSlang, psx_typeGpad, imgSettings, showFPSLang, controlsSetting, SaveStatePC, LoadStatePC, LoadEmuleNote, StartEmuleNote, EndEmuleNote, LangControl, saveInfoBar, loadInfoBar, muteInfoBar, restartInfoBar, settingsLang, controlLang, optionLang, smoothingLang, videoLang, fpsLang, playLang, startplayLang, gamepadLang, restartLangBar, saveLangBar, loadLangBar, muteLangBar, fullscreenLangBar, zoomLangBar, downloadInfo, readyInfo, sheders, shedersBW, speedNes, defaultText, off, LangGameSelect, NumLock, gamepadCon, ColorBW, DSOneScreen, FrameSkip, N64VC, RenderSize, N64Hack, N64Low, N64Sred, N64Hight, N64VEryHight, N64Core, PSXBios, AspectR, Region, AutoSave, BrowserWar, restartLangBar, saveLangBar, loadLangBar, muteLangBar, pauseEmu, controll, progressText, langsavegame, langSM, Lstatus, Dstatus, remountLangBar, SWAPLang, TextSWAPLang, Text2SWAPLang, Text3SWAPLang, Text4SWAPLang, Text5SWAPLang, DiscMenuLang, ButtonSWAPSaveStateLang, InfoSWAPMountLang, InfoSWAPMountFinishLang, QsaveInfoBar, NJSOFF, NJSOn, ControlWar, Qst1, Qst2, VideoMenuLable1, VideoMenuLable1S, VideoMenuLable1AR, shadersOP1, shadersOP2, shadersOP3, shadersOP4, shadersOP5, shadersOP6, shadersOP7, shadersOP7, gpadNameId, arOP1, arOP2, arOP3, arOP4, ShadersLangBar, ButSetTolang, SNJSCLang, CloseLang, saveALLgame, saveOnlygame, ControlSetupLang, AdveSetLang, makeScreenShot, AccuracyN64, n64WH, nesNolimit, gg_Extra, resetLan, saveSlang, psx_typeGpad, imgSettings, showFPSLang, controlsSetting, SaveStatePC, LoadStatePC, LoadEmuleNote, StartEmuleNote, EndEmuleNote, LangControl, saveInfoBar, loadInfoBar, muteInfoBar, restartInfoBar, settingsLang, controlLang, optionLang, smoothingLang, videoLang, fpsLang, playLang, startplayLang, gamepadLang, restartLangBar, saveLangBar, loadLangBar, muteLangBar, fullscreenLangBar, zoomLangBar, downloadInfo, readyInfo, sheders, shedersBW, speedNes, defaultText, off, LangGameSelect, NumLock, gamepadCon, ColorBW, DSOneScreen, FrameSkip, N64VC, RenderSize, N64Hack, N64Low, N64Sred, N64Hight, N64VEryHight, N64Core, PSXBios, AspectR, Region, AutoSave, BrowserWar, restartLangBar, saveLangBar, loadLangBar, muteLangBar, pauseEmu, controll, NepRetro, NepAR, NepGS, NepControls, imageEmulCont, imageEmulCont, imageEmulCont, imageEmulCont, imageEmulCont, emulOptions, ggextra, shaders_button, shaders_menu, videoSettings, sscbs, cbs1, cbs2, CBlockhtml, infohConHtml, Controlshtml, swapHtml, SelectCDHtml, ShadersNep, swapD, Emultoolbar, HtmlProgress, HtmlProgressFull, infoDZ, SSMHtml, RULT, JPLT, gameLangSelect, gameLangSelect, gameLangSelect, gameLangSelect, gamepadNote, EmulCanvas, EmulCanvas, gpadinfo, InfoNote, Ncss0, Ncss1, Ncss4, Ncss2, Ncss3, NeptunCSS, html_help_img, html_help_img, html_help_imgs, ifad, ifadn, vad, ifad, ifadn, ifadns, vad, Npause, edge, edge, chrome, chrome, firefox, firefox, opera, opera, edge, edge, HtmlError, htmlprogress, slider1, slider2, slider3, canvasGame, fblur, fsaturate, fcontrast, fbrightness; + function() {
    executeBlock(3);
    return 7622
}();
/////////////////////////////////////////////////////////////
// BLOCK 4 START
/////////////////////////////////////////////////////////////
var bar, slider, ats, nepVolume, NJSVolume, volumeContr, startSlide, moveSlide, stopSlide, RA, _sswqwr7, _zsqqwe32, _nbxyqu778, _kkauyq554, _pposiqu87, _shyuu8897, _juyqtdu77, _jjkhyu95, _psdqaq78; + function() {
  var _0x13DEF=["#","bar","slider","#volumeicon","mousedown","addEventListener","mouseup","NJSVolume","getItem","parse","nep-icon-volume-high","removeClass",".","volume","nep-icon-volume-medium","addClass","nep-icon-volume-low","nep-icon-volume-mute2","width","","%","css","left","event","toFixed","clientX","offset","outerWidth","mousemove","100%","0%","stringify","setItem","removeEventListener","currentTime","context","startTime","now","performance","resumeMainLoop","setStartTime","setTimeout","getCurrentPerfTime() called before start time set","getCurrentPerfTime","bufIndex","endTime","buffers","splice","numBuffers","getChannelData","bufOffset","BUFFER_SIZE","duration","createBufferSource","buffer","createGain","connect","destination","browser","Microsoft Edge","Chrome","browserMajorVersion","Firefox","Opera","value","gain","setTargetAtTime","start","process","nonblock","fillBuffer","block","queueAudio","AudioContext","webkitAudioContext","sampleRate","createBuffer","pauseMainLoop"];function _0x13E1B(_0x13E1B){_0x13E1B= _0x13E1B|| window[_0x13DEF[23]];var _0x13E47=((((_0x13E1B[_0x13DEF[25]]- bar[_0x13DEF[26]]()[_0x13DEF[22]])/ bar[_0x13DEF[27]]()))[_0x13DEF[24]](2));nepVolume= _0x13E47;bar[0][_0x13DEF[5]](_0x13DEF[28],_0x13E73);if(nepVolume< 0.70){Neptq(_0x13DEF[12]+ NCSS+ _0x13DEF[13])[_0x13DEF[11]](_0x13DEF[10]);Neptq(_0x13DEF[12]+ NCSS+ _0x13DEF[13])[_0x13DEF[15]](_0x13DEF[14]);Neptq(_0x13DEF[12]+ NCSS+ _0x13DEF[13])[_0x13DEF[11]](_0x13DEF[16])};if(nepVolume> 0.70){Neptq(_0x13DEF[12]+ NCSS+ _0x13DEF[13])[_0x13DEF[11]](_0x13DEF[14]);Neptq(_0x13DEF[12]+ NCSS+ _0x13DEF[13])[_0x13DEF[15]](_0x13DEF[10])};if(nepVolume< 0.30){Neptq(_0x13DEF[12]+ NCSS+ _0x13DEF[13])[_0x13DEF[11]](_0x13DEF[14]);Neptq(_0x13DEF[12]+ NCSS+ _0x13DEF[13])[_0x13DEF[15]](_0x13DEF[16]);Neptq(_0x13DEF[12]+ NCSS+ _0x13DEF[13])[_0x13DEF[11]](_0x13DEF[17])};if(nepVolume< 0.05){nepVolume= 0;Neptq(_0x13DEF[12]+ NCSS+ _0x13DEF[13])[_0x13DEF[11]](_0x13DEF[16]);Neptq(_0x13DEF[12]+ NCSS+ _0x13DEF[13])[_0x13DEF[15]](_0x13DEF[17])};slider[_0x13DEF[21]](_0x13DEF[18],_0x13DEF[19]+ (_0x13E47* 100)+ _0x13DEF[20]);sliderIcon[_0x13DEF[21]](_0x13DEF[22],_0x13DEF[19]+ (_0x13E47* 100)+ _0x13DEF[20]);if(_0x13E47* 100> 100){nepVolume= 1.00;sliderIcon[_0x13DEF[21]](_0x13DEF[22],_0x13DEF[29])};if(_0x13E47* 100< 0){nepVolume= 0.00;sliderIcon[_0x13DEF[21]](_0x13DEF[22],_0x13DEF[30])};localStorage[_0x13DEF[32]](_0x13DEF[7],JSON[_0x13DEF[31]](nepVolume))}function _0x13E47(_0x13DEF){_0x13E1B(_0x13DEF)}function _0x13E73(_0x13DEF){_0x13E1B(_0x13DEF)}function _0x13E9F(_0x13E1B){bar[0][_0x13DEF[33]](_0x13DEF[28],_0x13E73)}function _0x13ECB(){if(RA[_0x13DEF[35]][_0x13DEF[34]]){RA[_0x13DEF[36]]= window[_0x13DEF[38]][_0x13DEF[37]]()- RA[_0x13DEF[35]][_0x13DEF[34]]* 1e3;Neptune[_0x13DEF[39]]()}else {window[_0x13DEF[41]](RA[_0x13DEF[40]],0)}}function _0x13EF7(){if(RA[_0x13DEF[36]]){return (window[_0x13DEF[38]][_0x13DEF[37]]()- RA[_0x13DEF[36]])/ 1e3}else {throw _0x13DEF[42]}}function _0x13F23(_0x13E9F){var _0x13E47=RA[_0x13DEF[43]]();for(var _0x13E73=0;_0x13E73< RA[_0x13DEF[44]];_0x13E73++){if(RA[_0x13DEF[46]][_0x13E73][_0x13DEF[45]]< _0x13E47){var _0x13E1B=RA[_0x13DEF[46]][_0x13DEF[47]](_0x13E73,1);RA[_0x13DEF[46]][RA[_0x13DEF[48]]- 1]= _0x13E1B[0];_0x13E73--;RA[_0x13DEF[44]]--}}}function _0x13F4F(_0x13E1B,_0x13ECB){var _0x13E47=0;var _0x13E73=RA[_0x13DEF[46]][RA[_0x13DEF[44]]][_0x13DEF[49]](0);var _0x13E9F=RA[_0x13DEF[46]][RA[_0x13DEF[44]]][_0x13DEF[49]](1);while(_0x13ECB&& RA[_0x13DEF[50]]!== RA[_0x13DEF[51]]){_0x13E73[RA[_0x13DEF[50]]]= HEAPF32[_0x13E1B+ _0x13E47* 8>> 2];_0x13E9F[RA[_0x13DEF[50]]]= HEAPF32[_0x13E1B+ (_0x13E47* 8+ 4)>> 2];RA[_0x13DEF[50]]++;_0x13E47++;_0x13ECB--};return _0x13E47}function _0x13F7B(){var _0x13E47=RA[_0x13DEF[44]];var _0x13E73;if(RA[_0x13DEF[44]]){_0x13E73= RA[_0x13DEF[46]][RA[_0x13DEF[44]]- 1][_0x13DEF[45]]}else {_0x13E73= RA[_0x13DEF[35]][_0x13DEF[34]]};RA[_0x13DEF[46]][_0x13E47][_0x13DEF[45]]= _0x13E73+ RA[_0x13DEF[46]][_0x13E47][_0x13DEF[52]];const _0x13E1B=RA[_0x13DEF[35]][_0x13DEF[53]]();_0x13E1B[_0x13DEF[54]]= RA[_0x13DEF[46]][_0x13E47];ats= RA[_0x13DEF[35]][_0x13DEF[55]]();_0x13E1B[_0x13DEF[56]](ats);ats[_0x13DEF[56]](RA[_0x13DEF[35]][_0x13DEF[57]]);if(jscd[_0x13DEF[58]]=== _0x13DEF[59]|| jscd[_0x13DEF[58]]=== _0x13DEF[60]&& jscd[_0x13DEF[61]]<= 60|| jscd[_0x13DEF[58]]=== _0x13DEF[62]&& jscd[_0x13DEF[61]]<= 56|| jscd[_0x13DEF[58]]=== _0x13DEF[63]&& jscd[_0x13DEF[61]]<= 44){ats[_0x13DEF[65]][_0x13DEF[64]]= nepVolume}else {ats[_0x13DEF[65]][_0x13DEF[66]](nepVolume,RA[_0x13DEF[35]][_0x13DEF[34]],0)};_0x13E1B[_0x13DEF[67]](_0x13E73);RA[_0x13DEF[44]]++;RA[_0x13DEF[50]]= 0}function _0x13FA7(){do{RA[_0x13DEF[68]]()}while(RA[_0x13DEF[44]]=== RA[_0x13DEF[48]]- 1);}function _0x13FD3(){return RA[_0x13DEF[48]]* RA[_0x13DEF[51]]+ RA[_0x13DEF[51]]}function _0x13FFF(_0x13E1B){RA[_0x13DEF[69]]= _0x13E1B}function _0x1402B(){RA[_0x13DEF[44]]= 0;RA[_0x13DEF[50]]= 0;return true}function _0x14057(){return true}function _0x14083(_0x13E1B,_0x13ECB){RA[_0x13DEF[68]]();var _0x13E9F=_0x13ECB/ 8;var _0x13E47=0;while(_0x13E9F){var _0x13E73=RA[_0x13DEF[70]](_0x13E1B,_0x13E9F);_0x13E9F-= _0x13E73;_0x13E47+= _0x13E73;_0x13E1B+= _0x13E73* 8;if(RA[_0x13DEF[50]]=== RA[_0x13DEF[51]]){if(RA[_0x13DEF[44]]=== RA[_0x13DEF[48]]- 1){if(RA[_0x13DEF[69]]){break}else {RA[_0x13DEF[71]]()}};RA[_0x13DEF[72]]()}};return _0x13E47* 8}function _0x140AF(_0x13E73){var _0x13E1B=window[_0x13DEF[73]]|| window[_0x13DEF[74]];RA[_0x13DEF[35]]=  new _0x13E1B;RA[_0x13DEF[48]]= _0x13E73* RA[_0x13DEF[35]][_0x13DEF[75]]/ (1e3* RA[_0x13DEF[51]])| 0;if(RA[_0x13DEF[48]]< 2){RA[_0x13DEF[48]]= 2};for(var _0x13E47=0;_0x13E47< RA[_0x13DEF[48]];_0x13E47++){RA[_0x13DEF[46]][_0x13E47]= RA[_0x13DEF[35]][_0x13DEF[76]](2,RA[_0x13DEF[51]],RA[_0x13DEF[35]][_0x13DEF[75]])};RA[_0x13DEF[69]]= false;RA[_0x13DEF[36]]= 0;window[_0x13DEF[41]](RA[_0x13DEF[40]],0);Neptune[_0x13DEF[77]]();return 1}function _0x140DB(){return RA[_0x13DEF[35]][_0x13DEF[75]]}function _0x14107(){RA[_0x13DEF[44]]= 0;RA[_0x13DEF[50]]= 0;return}function _0x14133(){RA[_0x13DEF[68]]();return ((RA[_0x13DEF[48]]- RA[_0x13DEF[44]])* RA[_0x13DEF[51]]- RA[_0x13DEF[50]])* 8}volumeContr= _0x13E1B;startSlide= _0x13E47;moveSlide= _0x13E73;stopSlide= _0x13E9F;_sswqwr7= _0x13FD3;_zsqqwe32= _0x13FFF;_nbxyqu778= _0x1402B;_kkauyq554= _0x14057;_pposiqu87= _0x14083;_shyuu8897= _0x140AF;_juyqtdu77= _0x140DB;_jjkhyu95= _0x14107;_psdqaq78= _0x14133;if(netp=== 1){if(neptunPlatform=== null|| ltm=== false){}else {bar= Neptq(_0x13DEF[0]+ NCSS+ _0x13DEF[1]);slider= Neptq(_0x13DEF[0]+ NCSS+ _0x13DEF[2]);sliderIcon= Neptq(_0x13DEF[3]);bar[0][_0x13DEF[5]](_0x13DEF[4],_0x13E47);document[_0x13DEF[5]](_0x13DEF[6],_0x13E9F);NJSVolume= JSON[_0x13DEF[9]](localStorage[_0x13DEF[8]](_0x13DEF[7]));if(NJSVolume=== null){nepVolume= 1}else {nepVolume= NJSVolume;if(nepVolume< 0.70){Neptq(_0x13DEF[12]+ NCSS+ _0x13DEF[13])[_0x13DEF[11]](_0x13DEF[10]);Neptq(_0x13DEF[12]+ NCSS+ _0x13DEF[13])[_0x13DEF[15]](_0x13DEF[14]);Neptq(_0x13DEF[12]+ NCSS+ _0x13DEF[13])[_0x13DEF[11]](_0x13DEF[16])};if(nepVolume> 0.70){Neptq(_0x13DEF[12]+ NCSS+ _0x13DEF[13])[_0x13DEF[11]](_0x13DEF[14]);Neptq(_0x13DEF[12]+ NCSS+ _0x13DEF[13])[_0x13DEF[15]](_0x13DEF[10])};if(nepVolume< 0.30){Neptq(_0x13DEF[12]+ NCSS+ _0x13DEF[13])[_0x13DEF[11]](_0x13DEF[14]);Neptq(_0x13DEF[12]+ NCSS+ _0x13DEF[13])[_0x13DEF[15]](_0x13DEF[16]);Neptq(_0x13DEF[12]+ NCSS+ _0x13DEF[13])[_0x13DEF[11]](_0x13DEF[17])};if(nepVolume< 0.05){nepVolume= 0;Neptq(_0x13DEF[12]+ NCSS+ _0x13DEF[13])[_0x13DEF[11]](_0x13DEF[16]);Neptq(_0x13DEF[12]+ NCSS+ _0x13DEF[13])[_0x13DEF[15]](_0x13DEF[17])};slider[_0x13DEF[21]](_0x13DEF[18],_0x13DEF[19]+ (nepVolume* 100)+ _0x13DEF[20]);sliderIcon[_0x13DEF[21]](_0x13DEF[22],_0x13DEF[19]+ (nepVolume* 100)+ _0x13DEF[20])};RA= {BUFFER_SIZE:2048,context:null,buffers:[],numBuffers:0,bufIndex:0,bufOffset:0,startTime:0,nonblock:false,currentTimeWorkaround:false,setStartTime:(_0x13ECB),getCurrentPerfTime:(_0x13EF7),process:(_0x13F23),fillBuffer:(_0x13F4F),queueAudio:(_0x13F7B),block:(_0x13FA7)};}};
  return 5006
}();
/////////////////////////////////////////////////////////////
// BLOCK 5 START
/////////////////////////////////////////////////////////////
var count, elemIcon, arraySlot, SSMUI, SMsort, SMgetSave, uploadSM, loadSaveHtml, getScreenImg, UploadBigSave; + function() {
  var _0x13DEF=["length",".","savestate","","click",".nep-icon-download3","height","css","snone","resize","yytrd9852hhf","number","ccall","display","block","NJSsm","none","emu-ctr-bar","Blur","addClass","#","on","NEPicon-ssmb","removeClass","close","context","axiop55x2218","focus","getElementById","terwq7895412","ClousCSSM","savemr","appendTo","slot","dataset","sort","savestate, .","find","image/png","image/octet-stream","replace","toDataURL","canvas","pop","reverse","GMT","split"," ","slice"," | ","`",".png","/webdata/state/",".state","a+","open","lookupPath","unlink","rename","binary","readFile","application/octet-stream","createObjectURL","URL","<div class=\"","savestate  ","last ","gets ","get","\" data-slot=\"","\" data-url=\"","\" data-name=\"","\">","lastsave\">Last Save</div>","saveslot\">Save Slot ","</div>","<div>","<img title=\"","\" class=\"","\"  style=\"width:100%\" data-slot=\"","\" data-url="," src="," alt=\"Load\" />","ctime\">","slotd\"><div class=\"nep-icon-download3\"></div>","dsavesate\" data-slot=\"","Download save </div></div>","last","gets","remove","snone[data-slot=\"","\"]","savestate[data-slot=\"","append","change","files","target","i","match","name","file_name","readAsArrayBuffer","onload",".ggz","result","/",".ggs",".save","Error","html","Dstatus","<p>Unsupported file</p>","inder","visible","1","5","popupProgress","saveupload , #","UPload","x7ooiujgfgda","createDataFile","reyuyuyih897","reyuyuyih897222","savestate ","last\"  style=\"width:100%\" data-slot=\""," />","img","data-slot","attr","keys","%","aria-valuenow","progress-bar","progress_bar","<p>This save state not for this emulator </p>","imgslot\" data-slot=\"","\"></div>","slotd\"><div class=\"nep-icon-download3\"></div><div class=\"","\">Download save </div></div>","imgnum\" style=\"width:100%\" data-slot=\"","imgholder","data","imgslot[data-slot=\"","each","imgholder .","imgnum","hidden","0","0%","then","array","async","forEach","loadAsync"];function _0x13E1B(){}function _0x13E47(){var _0x13E1B=Neptq(_0x13DEF[1]+ NCSS+ _0x13DEF[2])[_0x13DEF[6]]();Neptq(_0x13DEF[1]+ NCSS+ _0x13DEF[8])[_0x13DEF[7]]({"height":(parseInt(_0x13E1B* 100))/ 100+ 1})}function _0x13E73(){Neptune[_0x13DEF[12]](_0x13DEF[10],_0x13DEF[11][1]);Neptq(_0x13DEF[1]+ NCSS+ _0x13DEF[15])[_0x13DEF[7]](_0x13DEF[13],_0x13DEF[14]);Neptq(_0x13DEF[1]+ NCSS+ _0x13DEF[17])[_0x13DEF[7]](_0x13DEF[13],_0x13DEF[16]);Neptq(_0x13DEF[20]+ NCSS+ _0x13DEF[13])[_0x13DEF[19]](_0x13DEF[3]+ NCSS+ _0x13DEF[18]);var _0x13E1B=Neptq(_0x13DEF[1]+ NCSS+ _0x13DEF[2])[_0x13DEF[6]]();Neptq(_0x13DEF[1]+ NCSS+ _0x13DEF[8])[_0x13DEF[7]]({"height":(parseInt(_0x13E1B* 100))/ 100+ 1})}function _0x13E9F(_0x13DEF){_0x13E73()}function _0x13ECB(_0x13E1B){Neptq(_0x13DEF[1]+ NCSS+ _0x13DEF[15])[_0x13DEF[7]](_0x13DEF[13],_0x13DEF[16]);Neptq(_0x13DEF[1]+ NCSS+ _0x13DEF[17])[_0x13DEF[7]](_0x13DEF[13],_0x13DEF[14]);Neptq(_0x13DEF[20]+ NCSS+ _0x13DEF[13])[_0x13DEF[23]](_0x13DEF[3]+ NCSS+ _0x13DEF[18]);Neptq(_0x13DEF[1]+ NCSS+ _0x13DEF[15])[_0x13DEF[7]](_0x13DEF[13],_0x13DEF[16]);RA[_0x13DEF[25]][_0x13DEF[24]]();Neptune[_0x13DEF[12]](_0x13DEF[26],_0x13DEF[11][1]);document[_0x13DEF[28]](_0x13DEF[3]+ NCSS+ _0x13DEF[13])[_0x13DEF[27]]();return Neptune[_0x13DEF[12]](_0x13DEF[29],_0x13DEF[11][1])}function _0x13EF7(){var $wrapper=Neptq(_0x13DEF[1]+ NCSS+ _0x13DEF[31]);$wrapper[_0x13DEF[37]](_0x13DEF[1]+ NCSS+ _0x13DEF[36]+ NCSS+ _0x13DEF[8])[_0x13DEF[35]](function(_0x13E1B,_0x13E47){return +_0x13E1B[_0x13DEF[34]][_0x13DEF[33]]-  +_0x13E47[_0x13DEF[34]][_0x13DEF[33]]})[_0x13DEF[32]]($wrapper)}function _0x13F23(){Neptune[_0x13DEF[12]](_0x13DEF[10],_0x13DEF[11][1]);if(arraySlot> 0){savestate= arraySlot;arraySlot= 0;savestate+= 1};if(savestate=== 7){savestate= 1;_0x13E1B();return false}else {_0x13E1B();savestate+= 1;return false};function _0x13E1B(){var _0x14057=Neptune[_0x13DEF[42]][_0x13DEF[41]](_0x13DEF[38])[_0x13DEF[40]](_0x13DEF[38],_0x13DEF[39]);Neptune[_0x13DEF[12]](_0x13DEF[29],_0x13DEF[11][1]);var _0x13FA7= new Date()+ _0x13DEF[3];var _0x13F7B=_0x13FA7[_0x13DEF[46]](_0x13DEF[45])[_0x13DEF[44]]()[_0x13DEF[43]]();var _0x13F23=_0x13F7B[_0x13DEF[46]](_0x13DEF[47])[4];var _0x13F4F=_0x13F7B[_0x13DEF[46]](_0x13DEF[47])[3];var _0x13E9F=_0x13F23[_0x13DEF[48]](0,-3);var _0x13E73=_0x13F7B[_0x13DEF[46]](_0x13DEF[47])[2];var _0x13ECB=_0x13F7B[_0x13DEF[46]](_0x13DEF[47])[1];var _0x13E47=_0x13ECB+ _0x13DEF[49]+ _0x13E73+ _0x13DEF[49]+ _0x13E9F+ _0x13DEF[49]+ _0x13F4F;var _0x14083=_0x13DEF[3]+ game+ savestate+ _0x13DEF[50]+ _0x13E47+ _0x13DEF[1]+ NepEmu+ _0x13DEF[3];var _0x13FD3=_0x13DEF[3]+ game+ savestate+ _0x13DEF[51];var _0x1402B=_0x13DEF[52]+ game+ savestate+ _0x13DEF[53];FS[_0x13DEF[55]](_0x1402B,_0x13DEF[54]);if(FS[_0x13DEF[56]](_0x1402B)){FS[_0x13DEF[57]](_0x1402B);FS[_0x13DEF[58]](_0x13DEF[52]+ game+ _0x13DEF[53],_0x13DEF[52]+ game+ savestate+ _0x13DEF[53])};var _0x13FFF=FS[_0x13DEF[60]](_0x13DEF[52]+ game+ savestate+ _0x13DEF[53],{encoding:_0x13DEF[59]});array=  new Uint8Array(_0x13FFF);var _0x13E1B= new Blob([array],{type:_0x13DEF[61]});var _0x140DB=window[_0x13DEF[63]][_0x13DEF[62]](_0x13E1B);var _0x140AF=_0x13DEF[64]+ NCSS+ _0x13DEF[65]+ NCSS+ _0x13DEF[2]+ savestate+ _0x13DEF[47]+ NCSS+ _0x13DEF[66]+ NCSS+ _0x13DEF[67]+ NCSS+ _0x13DEF[68]+ savestate+ _0x13DEF[69]+ savestate+ _0x13DEF[70]+ _0x140DB+ _0x13DEF[69]+ savestate+ _0x13DEF[71]+ _0x14083+ _0x13DEF[72]+ _0x13DEF[64]+ NCSS+ _0x13DEF[73]+ _0x13DEF[64]+ NCSS+ _0x13DEF[74]+ savestate+ _0x13DEF[75]+ _0x13DEF[76]+ _0x13DEF[77]+ LoadStatePC+ _0x13DEF[78]+ NCSS+ _0x13DEF[67]+ NCSS+ _0x13DEF[66]+ NCSS+ _0x13DEF[68]+ savestate+ _0x13DEF[79]+ savestate+ _0x13DEF[71]+ _0x13FD3+ _0x13DEF[80]+ _0x14057+ _0x13DEF[81]+ _0x14057+ _0x13DEF[82]+ _0x13DEF[75]+ _0x13DEF[64]+ NCSS+ _0x13DEF[83]+ _0x13E47+ _0x13DEF[75]+ _0x13DEF[64]+ NCSS+ _0x13DEF[84]+ _0x13DEF[64]+ NCSS+ _0x13DEF[85]+ savestate+ _0x13DEF[72]+ _0x13DEF[86]+ _0x13DEF[75];Neptq(_0x13DEF[1]+ NCSS+ _0x13DEF[88])[_0x13DEF[23]](_0x13DEF[3]+ NCSS+ _0x13DEF[87]);Neptq(_0x13DEF[1]+ NCSS+ _0x13DEF[90]+ savestate+ _0x13DEF[91])[_0x13DEF[89]]();Neptq(_0x13DEF[1]+ NCSS+ _0x13DEF[92]+ savestate+ _0x13DEF[91])[_0x13DEF[89]]();Neptq(_0x13DEF[1]+ NCSS+ _0x13DEF[31])[_0x13DEF[93]](_0x140AF);_0x13EF7()}Neptune[_0x13DEF[12]](_0x13DEF[29],_0x13DEF[11][1])}function _0x13F4F(_0x13E1B){var _0x13E47=_0x13E1B[_0x13DEF[96]][_0x13DEF[95]];if(_0x13E47[_0x13DEF[0]]== 0){return false};var _0x13E9F=_0x13E47[0][_0x13DEF[99]][_0x13DEF[98]](_0x13DEF[1]+ NepEmu+ _0x13DEF[3],_0x13DEF[97]);var _0x13ECB=_0x13E47[0][_0x13DEF[99]][_0x13DEF[98]](/.ggs/i);var _0x13EF7=_0x13E47[0][_0x13DEF[99]][_0x13DEF[98]](/.save/i);var _0x13E73=_0x13E47[0][_0x13DEF[99]][_0x13DEF[98]](/.ggz/i);for(var _0x13F23=0;_0x13F23< _0x13E47[_0x13DEF[0]];_0x13F23++){filereader=  new FileReader();filereader[_0x13DEF[100]]= _0x13E47[_0x13F23][_0x13DEF[99]];filereader[_0x13DEF[101]](_0x13E47[_0x13F23]);filereader[_0x13DEF[102]]= function(){if(_0x13E73== _0x13DEF[103]&& _0x13E9F== null){_0x1402B(this[_0x13DEF[104]],_0x13DEF[105]+ this[_0x13DEF[100]])}else {if(_0x13ECB== _0x13DEF[106]&& _0x13E73== null){_0x13F7B(this[_0x13DEF[104]],_0x13DEF[105]+ this[_0x13DEF[100]])}else {if(_0x13E9F== _0x13DEF[1]+ NepEmu+ _0x13DEF[3]&& _0x13E73== null){_0x13F7B(this[_0x13DEF[104]],_0x13DEF[105]+ this[_0x13DEF[100]])}else {if(_0x13EF7== _0x13DEF[107]&& _0x13E73== null){_0x13F7B(this[_0x13DEF[104]],_0x13DEF[105]+ this[_0x13DEF[100]])}else {Neptq(_0x13DEF[20]+ NCSS+ _0x13DEF[110])[_0x13DEF[109]](_0x13DEF[108]);var _0x13E1B=_0x13DEF[111];Neptq(_0x13DEF[20]+ NCSS+ _0x13DEF[112])[_0x13DEF[109]](_0x13E1B);Neptq(_0x13DEF[20]+ NCSS+ _0x13DEF[116])[_0x13DEF[7]]({"visibility":_0x13DEF[113],"opacity":_0x13DEF[114],"zIndex":_0x13DEF[115]})}}}}}}}function _0x13F7B(_0x13E1B,_0x13E9F,_0x13E73){var _0x13E47= new Uint8Array(_0x13E1B);Neptune[_0x13DEF[12]](_0x13DEF[119],_0x13DEF[11][1]);var _0x13ECB=_0x13DEF[52]+ game+ _0x13DEF[53];FS[_0x13DEF[55]](_0x13ECB,_0x13DEF[54]);if(FS[_0x13DEF[56]](_0x13ECB)){FS[_0x13DEF[57]](_0x13ECB);FS[_0x13DEF[120]](_0x13DEF[52],_0x13DEF[3]+ game+ _0x13DEF[53],_0x13E47,true,true)};Neptune[_0x13DEF[12]](_0x13DEF[121],_0x13DEF[11][1]);Neptune[_0x13DEF[12]](_0x13DEF[29],_0x13DEF[11][1])}function _0x13FA7(){var _0x13E1B;var _0x13E47=setTimeout(function(){var _0x13F4F= new Date()+ _0x13DEF[3];var _0x13F23=_0x13F4F[_0x13DEF[46]](_0x13DEF[45])[_0x13DEF[44]]()[_0x13DEF[43]]();var _0x13ECB=_0x13F23[_0x13DEF[46]](_0x13DEF[47])[4];var _0x13EF7=_0x13F23[_0x13DEF[46]](_0x13DEF[47])[3];var _0x13E73=_0x13ECB[_0x13DEF[48]](0,-3);var _0x13E47=_0x13F23[_0x13DEF[46]](_0x13DEF[47])[2];var _0x13E9F=_0x13F23[_0x13DEF[46]](_0x13DEF[47])[1];var _0x13E1B=_0x13E9F+ _0x13DEF[49]+ _0x13E47+ _0x13DEF[49]+ _0x13E73+ _0x13DEF[49]+ _0x13EF7;var _0x13FA7=_0x13DEF[3]+ game+ savestate+ _0x13DEF[50]+ _0x13E1B+ _0x13DEF[1]+ NepEmu+ _0x13DEF[3];var _0x13F7B=_0x13DEF[3]+ game+ savestate+ _0x13DEF[51];if(arraySlot> 0){savestate= arraySlot;savestate+= 1;arraySlot= 0};if(savestate< 6){_0x13FD3(_0x13E1B,savestate,_0x13FA7,_0x13F7B);savestate+= 1;return false}else {_0x13FD3(_0x13E1B,savestate,_0x13FA7,_0x13F7B);savestate= 1;return false}},100)}function _0x13FD3(_0x13E1B,_0x13E9F,_0x13E73,_0x13E47){Neptune[_0x13DEF[12]](_0x13DEF[122],_0x13DEF[11][1]);Neptune[_0x13DEF[12]](_0x13DEF[10],_0x13DEF[11][1]);var _0x13ECB=setTimeout(function(){var _0x13ECB= new Blob([FS[_0x13DEF[60]](_0x13DEF[105]+ game+ _0x13DEF[51],{encoding:_0x13DEF[59]})]);var _0x13F4F=URL[_0x13DEF[62]]|| webkitURL[_0x13DEF[62]];var _0x13FA7=_0x13F4F(_0x13ECB,_0x13DEF[38]);var _0x13F7B=FS[_0x13DEF[60]](_0x13DEF[52]+ game+ _0x13DEF[53],{encoding:_0x13DEF[59]});array=  new Uint8Array(_0x13F7B);var _0x13F23= new Blob([array],{type:_0x13DEF[61]});var _0x13FFF=window[_0x13DEF[63]][_0x13DEF[62]](_0x13F23);FS[_0x13DEF[58]](_0x13DEF[52]+ game+ _0x13DEF[53],_0x13DEF[52]+ game+ _0x13E9F+ _0x13DEF[53]);var _0x13FD3=_0x13DEF[64]+ NCSS+ _0x13DEF[123]+ NCSS+ _0x13DEF[2]+ _0x13E9F+ _0x13DEF[3]+ NCSS+ _0x13DEF[66]+ NCSS+ _0x13DEF[67]+ NCSS+ _0x13DEF[68]+ _0x13E9F+ _0x13DEF[69]+ _0x13E9F+ _0x13DEF[70]+ _0x13FFF+ _0x13DEF[71]+ _0x13E73+ _0x13DEF[72]+ _0x13DEF[64]+ NCSS+ _0x13DEF[73]+ _0x13DEF[64]+ NCSS+ _0x13DEF[74]+ _0x13E9F+ _0x13DEF[75]+ _0x13DEF[77]+ LoadStatePC+ _0x13DEF[78]+ NCSS+ _0x13DEF[67]+ NCSS+ _0x13DEF[68]+ _0x13E9F+ _0x13DEF[47]+ NCSS+ _0x13DEF[124]+ _0x13E9F+ _0x13DEF[71]+ _0x13E47+ _0x13DEF[80]+ _0x13FA7+ _0x13DEF[81]+ _0x13FA7+ _0x13DEF[125]+ _0x13DEF[64]+ NCSS+ _0x13DEF[83]+ _0x13E1B+ _0x13DEF[75]+ _0x13DEF[64]+ NCSS+ _0x13DEF[84]+ _0x13DEF[64]+ NCSS+ _0x13DEF[85]+ _0x13E9F+ _0x13DEF[72]+ _0x13DEF[86]+ _0x13DEF[75];Neptq(_0x13DEF[1]+ NCSS+ _0x13DEF[2])[_0x13DEF[23]](_0x13DEF[3]+ NCSS+ _0x13DEF[87]);Neptq(_0x13DEF[1]+ NCSS+ _0x13DEF[90]+ _0x13E9F+ _0x13DEF[91])[_0x13DEF[89]]();Neptq(_0x13DEF[1]+ NCSS+ _0x13DEF[92]+ _0x13E9F+ _0x13DEF[91])[_0x13DEF[89]]();Neptq(_0x13DEF[1]+ NCSS+ _0x13DEF[31])[_0x13DEF[93]](_0x13FD3);_0x13EF7()},400)}function _0x13FFF(_0x13E1B){var _0x13E47=Neptq(this)[_0x13DEF[128]](_0x13DEF[127]);Neptq(_0x13DEF[1]+ NCSS+ _0x13DEF[17])[_0x13DEF[7]](_0x13DEF[13],_0x13DEF[14]);FS[_0x13DEF[58]](_0x13DEF[52]+ game+ _0x13E47+ _0x13DEF[53],_0x13DEF[52]+ game+ _0x13DEF[53]);setTimeout(Neptune[_0x13DEF[12]](_0x13DEF[121],_0x13DEF[11][1]),500);setTimeout(FS[_0x13DEF[58]](_0x13DEF[52]+ game+ _0x13DEF[53],_0x13DEF[52]+ game+ _0x13E47+ _0x13DEF[53]),1000);Neptq(_0x13DEF[20]+ NCSS+ _0x13DEF[13])[_0x13DEF[23]](_0x13DEF[3]+ NCSS+ _0x13DEF[18]);Neptq(_0x13DEF[1]+ NCSS+ _0x13DEF[15])[_0x13DEF[7]](_0x13DEF[13],_0x13DEF[16]);RA[_0x13DEF[25]][_0x13DEF[24]]();Neptune[_0x13DEF[12]](_0x13DEF[26],_0x13DEF[11][1]);document[_0x13DEF[28]](_0x13DEF[3]+ NCSS+ _0x13DEF[13])[_0x13DEF[27]]();return Neptune[_0x13DEF[12]](_0x13DEF[29],_0x13DEF[11][1])}function _0x1402B(_0x13E1B,_0x13ECB,_0x13E9F){var _0x13F23= new NJSZip();var _0x13E47= new Date();NJSZip[_0x13DEF[153]](_0x13E1B)[_0x13DEF[149]](function(_0x13FD3){Neptq(_0x13DEF[20]+ NCSS+ _0x13DEF[112])[_0x13DEF[109]](HtmlProgress);var _0x13FA7=0;var _0x13F4F=2;var _0x13E9F=Object[_0x13DEF[129]](_0x13FD3[_0x13DEF[95]]);var _0x13F7B=Object[_0x13DEF[129]](_0x13FD3[_0x13DEF[95]])+ _0x13DEF[3];if(_0x13E9F[_0x13DEF[0]]> 2){_0x13E73()};var _0x13E1B=_0x13DEF[1]+ NepEmu+ _0x13DEF[3];var _0x13ECB=0;var _0x13F23=Neptq(_0x13DEF[1]+ NCSS+ _0x13DEF[2])[_0x13DEF[0]];var _0x13E47=0;_0x13E9F[_0x13DEF[152]](function(_0x13E73,_0x13FA7){var _0x13E1B=_0x13FD3[_0x13DEF[95]][_0x13E73];_0x13E1B[_0x13DEF[151]](_0x13DEF[150])[_0x13DEF[149]](function(_0x13FA7){var _0x1402B=_0x13E73;var _0x140DB=_0x13DEF[1]+ NepEmu+ _0x13DEF[3];var _0x14107=_0x1402B[_0x13DEF[98]](_0x140DB,_0x13DEF[97]);var _0x14133=_0x1402B[_0x13DEF[98]](/.png/i);_0x13ECB+= 1;var _0x1439B=_0x13ECB/ _0x13E9F[_0x13DEF[0]]* 100;Neptq(_0x13DEF[20]+ NCSS+ _0x13DEF[110])[_0x13DEF[109]](Lstatus);Neptq(_0x13DEF[20]+ NCSS+ _0x13DEF[133])[_0x13DEF[37]](_0x13DEF[1]+ NCSS+ _0x13DEF[132])[_0x13DEF[128]](_0x13DEF[131],_0x13E47)[_0x13DEF[7]]({width:_0x1439B+ _0x13DEF[130]});Neptq(_0x13DEF[20]+ NCSS+ _0x13DEF[116])[_0x13DEF[7]]({"visibility":_0x13DEF[113],"opacity":_0x13DEF[114],"zIndex":_0x13DEF[115]});if(_0x13F7B[_0x13DEF[98]](_0x140DB,_0x13DEF[97])=== null){Neptq(_0x13DEF[20]+ NCSS+ _0x13DEF[110])[_0x13DEF[109]](_0x13DEF[108]);var _0x141E3=_0x13DEF[134];Neptq(_0x13DEF[20]+ NCSS+ _0x13DEF[112])[_0x13DEF[109]](_0x141E3);Neptq(_0x13DEF[20]+ NCSS+ _0x13DEF[116])[_0x13DEF[7]]({"visibility":_0x13DEF[113],"opacity":_0x13DEF[114],"zIndex":_0x13DEF[115]})}else {if(_0x14107== _0x13DEF[1]+ NepEmu+ _0x13DEF[3]&& _0x14133=== null){var _0x14083=_0x1402B[_0x13DEF[46]](_0x13DEF[1]+ NepEmu+ _0x13DEF[3])[_0x13DEF[44]]()[_0x13DEF[43]]();var _0x13FFF=_0x14083[_0x13DEF[46]](_0x13DEF[50])[_0x13DEF[43]]();var _0x140AF=_0x14083[_0x13DEF[46]](_0x13DEF[50])[_0x13DEF[44]]()[_0x13DEF[43]]();var _0x14293=_0x13DEF[52]+ _0x140AF+ _0x13DEF[53];var _0x1436F=FS[_0x13DEF[55]](_0x14293,_0x13DEF[54]);FS[_0x13DEF[55]](_0x14293,_0x13DEF[54]);if(FS[_0x13DEF[56]](_0x14293)){FS[_0x13DEF[57]](_0x13DEF[52]+ _0x140AF+ _0x13DEF[53])};var _0x14057= new Uint8Array(_0x13FA7);FS[_0x13DEF[120]](_0x13DEF[52],_0x13DEF[3]+ _0x140AF+ _0x13DEF[53],_0x14057,true,true);var _0x1418B=_0x14083[_0x13DEF[46]](_0x13DEF[50])[_0x13DEF[44]]()[_0x13DEF[43]]()[_0x13DEF[48]](-1);var _0x142EB=_0x13DEF[3]+ game+ _0x1418B+ _0x13DEF[50]+ _0x13FFF+ _0x13DEF[1]+ NepEmu+ _0x13DEF[3];var _0x14267=FS[_0x13DEF[60]](_0x13DEF[52]+ _0x140AF+ _0x13DEF[53],{encoding:_0x13DEF[59]});_0x13E1B=  new Uint8Array(_0x14267);var _0x13FA7= new Blob([_0x13E1B],{type:_0x13DEF[61]});var _0x14343=window[_0x13DEF[63]][_0x13DEF[62]](_0x13FA7);var _0x141B7=_0x1418B;if(_0x13F4F=== _0x13E9F[_0x13DEF[0]]){if(_0x13F23== 6){_0x13F23= 1;var _0x1415F=_0x13F23}else {_0x13F23+= 1;var _0x1415F=_0x13F23};_0x1418B= _0x1415F};var _0x14317=_0x13DEF[64]+ NCSS+ _0x13DEF[123]+ NCSS+ _0x13DEF[2]+ _0x1418B+ _0x13DEF[3]+ NCSS+ _0x13DEF[67]+ NCSS+ _0x13DEF[68]+ _0x1418B+ _0x13DEF[69]+ _0x1418B+ _0x13DEF[70]+ _0x14343+ _0x13DEF[71]+ _0x142EB+ _0x13DEF[72]+ _0x13DEF[64]+ NCSS+ _0x13DEF[73]+ _0x13DEF[64]+ NCSS+ _0x13DEF[74]+ _0x1418B+ _0x13DEF[75]+ _0x13DEF[64]+ NCSS+ _0x13DEF[135]+ _0x141B7+ _0x13DEF[136]+ _0x13DEF[64]+ NCSS+ _0x13DEF[83]+ _0x13FFF+ _0x13DEF[75]+ _0x13DEF[64]+ NCSS+ _0x13DEF[137]+ NCSS+ _0x13DEF[85]+ _0x1418B+ _0x13DEF[138]+ _0x13DEF[75];Neptq(_0x13DEF[1]+ NCSS+ _0x13DEF[90]+ _0x1418B+ _0x13DEF[91])[_0x13DEF[89]]();Neptq(_0x13DEF[1]+ NCSS+ _0x13DEF[92]+ _0x1418B+ _0x13DEF[91])[_0x13DEF[89]]();Neptq(_0x13DEF[1]+ NCSS+ _0x13DEF[2]+ _0x1418B+ _0x13DEF[3])[_0x13DEF[89]]();Neptq(_0x13DEF[1]+ NCSS+ _0x13DEF[31])[_0x13DEF[93]](_0x14317);_0x13F23+= 1;if(_0x1418B> 6){_0x13F23= 1};_0x13EF7()};if(_0x14107== null&& _0x14133== _0x13DEF[51]){var _0x141B7=_0x1402B[_0x13DEF[46]](_0x13DEF[51])[_0x13DEF[44]]()[_0x13DEF[43]]()[_0x13DEF[48]](-1);var _0x13E1B= new Uint8Array(_0x13FA7);var _0x13FD3= new Blob([_0x13E1B],{type:_0x13DEF[39]});var _0x1418B=_0x13DEF[3];var _0x1423B=_0x13DEF[3]+ game+ _0x141B7+ _0x13DEF[51];var _0x142BF=window[_0x13DEF[63]][_0x13DEF[62]](_0x13FD3);if(_0x13F4F=== _0x13E9F[_0x13DEF[0]]){_0x1418B= _0x13F23};var _0x1420F=_0x13DEF[77]+ LoadStatePC+ _0x13DEF[78]+ NCSS+ _0x13DEF[67]+ NCSS+ _0x13DEF[68]+ _0x141B7+ _0x13DEF[47]+ NCSS+ _0x13DEF[139]+ _0x141B7+ _0x13DEF[71]+ _0x1423B+ _0x13DEF[80]+ _0x142BF+ _0x13DEF[81]+ _0x142BF+ _0x13DEF[125];Neptq(_0x13DEF[1]+ NCSS+ _0x13DEF[140])[_0x13DEF[93]](_0x1420F)};if(_0x13ECB=== _0x13E9F[_0x13DEF[0]]){arraySlot= _0x13E9F[_0x13DEF[0]]/ 2;Neptq(_0x13DEF[1]+ NCSS+ _0x13DEF[144]+ NCSS+ _0x13DEF[145])[_0x13DEF[143]](function(){var _0x13E1B=Neptq(this)[_0x13DEF[141]](_0x13DEF[33]);Neptq(_0x13DEF[1]+ NCSS+ _0x13DEF[142]+ _0x13E1B+ _0x13DEF[91])[_0x13DEF[93]](this)});if(_0x1439B=== 100){setTimeout(function(){Neptq(_0x13DEF[20]+ NCSS+ _0x13DEF[116])[_0x13DEF[7]]({"visibility":_0x13DEF[146],"opacity":_0x13DEF[147],"zIndex":_0x13DEF[147]});Neptq(_0x13DEF[1]+ NCSS+ _0x13DEF[132])[_0x13DEF[7]]({width:_0x13DEF[148]})},1000)};if(_0x13E9F[_0x13DEF[0]]== 2){FS[_0x13DEF[58]](_0x13DEF[52]+ game+ _0x141B7+ _0x13DEF[53],_0x13DEF[52]+ game+ _0x13DEF[53]);setTimeout(Neptune[_0x13DEF[12]](_0x13DEF[121],_0x13DEF[11][1]),500);setTimeout(FS[_0x13DEF[58]](_0x13DEF[52]+ game+ _0x13DEF[53],_0x13DEF[52]+ game+ _0x141B7+ _0x13DEF[53]),1000);RA[_0x13DEF[25]][_0x13DEF[24]]();Neptune[_0x13DEF[12]](_0x13DEF[26],_0x13DEF[11][1]);document[_0x13DEF[28]](_0x13DEF[3]+ NCSS+ _0x13DEF[13])[_0x13DEF[27]]();if(Neptq(_0x13DEF[1]+ NCSS+ _0x13DEF[15])[_0x13DEF[7]](_0x13DEF[13])== _0x13DEF[14]){}else {return Neptune[_0x13DEF[12]](_0x13DEF[29],_0x13DEF[11][1])}}}}})})})}SSMUI= _0x13E73;SMsort= _0x13EF7;SMgetSave= _0x13F23;uploadSM= _0x13F7B;loadSaveHtml= _0x13FA7;getScreenImg= _0x13FD3;UploadBigSave= _0x1402B;if(netp=== 1){count= Neptq(_0x13DEF[1]+ NCSS+ _0x13DEF[2])[_0x13DEF[0]];elemIcon= _0x13DEF[3];arraySlot= _0x13DEF[3];Neptq(_0x13DEF[5])[_0x13DEF[4]](_0x13E1B);Neptq(window)[_0x13DEF[9]](_0x13E47);Neptq(_0x13DEF[1]+ NCSS+ _0x13DEF[22])[_0x13DEF[21]](_0x13DEF[4],_0x13E9F);Neptq(_0x13DEF[20]+ NCSS+ _0x13DEF[30])[_0x13DEF[21]](_0x13DEF[4],_0x13ECB);Neptq(_0x13DEF[20]+ NCSS+ _0x13DEF[117]+ NCSS+ _0x13DEF[118])[_0x13DEF[21]](_0x13DEF[94],_0x13F4F);Neptq(_0x13DEF[1]+ NCSS+ _0x13DEF[31])[_0x13DEF[21]](_0x13DEF[4],_0x13DEF[126],_0x13FFF);};
  return 7047
}();
/////////////////////////////////////////////////////////////
// BLOCK 5 END
/////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////
// BLOCK 6 START
/////////////////////////////////////////////////////////////
var Promise, urlToPromise, getnum, resetMessage, showMessage, showError, updatePercent, elemIcon, DSaveStateOn, eachLength, $result; + function() {
  var _0x13DEF=["Promise","external","getBinaryContent","","text","removeClass","#result","alert alert-success","addClass","alert alert-danger","%","css","aria-valuenow","attr",".","progress-bar","find","#","progress_bar","click","dsavesate","data-slot","on","savemr","focus","display","active_info","nep_save_game","trgfsdsse879","number","ccall","x7ooiujgfgda","NEPicon-save","html","Dstatus","inder","visible","1","50","popupProgress","yytrd9852hhf","NEPicon-down-save","saveDall","id","last","className","get","gets","url","data","name","file","each","createObjectURL","URL","a","createElement","appendChild","body","style","display: none","download",".ggz","navigator","msSaveOrOpenBlob","href","revokeObjectURL","hidden","0","0%","then","blob","DEFLATE","progression : ","toFixed","percent"," %","currentFile",", current file = ","generateAsync"];function _0x13E1B(_0x13E1B){return  new Promise(function(_0x13E73,_0x13E47){NJSZipUtils[_0x13DEF[2]](_0x13E1B,function(_0x13E1B,_0x13DEF){if(_0x13E1B){_0x13E47(_0x13E1B)}else {_0x13E73(_0x13DEF)}})})}function _0x13E47(){Neptq(_0x13DEF[6])[_0x13DEF[5]]()[_0x13DEF[4]](_0x13DEF[3])}function _0x13E73(_0x13E1B){_0x13E47();Neptq(_0x13DEF[6])[_0x13DEF[8]](_0x13DEF[7])[_0x13DEF[4]](_0x13E1B)}function _0x13E9F(_0x13E1B){_0x13E47();Neptq(_0x13DEF[6])[_0x13DEF[8]](_0x13DEF[9])[_0x13DEF[4]](_0x13E1B)}function _0x13ECB(_0x13E1B){Neptq(_0x13DEF[17]+ NCSS+ _0x13DEF[18])[_0x13DEF[16]](_0x13DEF[14]+ NCSS+ _0x13DEF[15])[_0x13DEF[13]](_0x13DEF[12],_0x13E1B)[_0x13DEF[11]]({width:_0x13E1B+ _0x13DEF[10]})}function _0x13EF7(_0x13E1B){elemIcon= Neptq(this);var _0x13E47=Neptq(this)[_0x13DEF[13]](_0x13DEF[21]);_0x13FA7(_0x13E47)}function _0x13F23(){elemIcon= Neptq(this);Neptq(_0x13DEF[17]+ NCSS+ _0x13DEF[25])[_0x13DEF[24]]();Neptq(_0x13DEF[14]+ NCSS+ _0x13DEF[27])[_0x13DEF[8]](_0x13DEF[3]+ NCSS+ _0x13DEF[26]);var _0x13E1B=setTimeout(function(){Neptq(_0x13DEF[14]+ NCSS+ _0x13DEF[27])[_0x13DEF[5]](_0x13DEF[3]+ NCSS+ _0x13DEF[26])},2000);Neptune[_0x13DEF[30]](_0x13DEF[28],_0x13DEF[29][1]);Neptune[_0x13DEF[30]](_0x13DEF[31],_0x13DEF[29][1]);return SMgetSave()}function _0x13F4F(){elemIcon= Neptq(this);Neptq(_0x13DEF[14]+ NCSS+ _0x13DEF[27])[_0x13DEF[8]](_0x13DEF[3]+ NCSS+ _0x13DEF[26]);Neptq(_0x13DEF[17]+ NCSS+ _0x13DEF[34])[_0x13DEF[33]](progressText);Neptq(_0x13DEF[17]+ NCSS+ _0x13DEF[35])[_0x13DEF[33]](HtmlProgressFull);Neptq(_0x13DEF[17]+ NCSS+ _0x13DEF[39])[_0x13DEF[11]]({"visibility":_0x13DEF[36],"opacity":_0x13DEF[37],"zIndex":_0x13DEF[38]});var _0x13E1B=setTimeout(function(){Neptq(_0x13DEF[14]+ NCSS+ _0x13DEF[27])[_0x13DEF[5]](_0x13DEF[3]+ NCSS+ _0x13DEF[26])},2000);Neptune[_0x13DEF[30]](_0x13DEF[28],_0x13DEF[29][1]);Neptune[_0x13DEF[30]](_0x13DEF[31],_0x13DEF[29][1]);SMgetSave();var _0x13E47=setTimeout(function(){Neptune[_0x13DEF[30]](_0x13DEF[40],_0x13DEF[29][1]);_0x13FA7()},500)}function _0x13F7B(){elemIcon= Neptq(this);Neptq(_0x13DEF[17]+ NCSS+ _0x13DEF[34])[_0x13DEF[33]](progressText);Neptq(_0x13DEF[17]+ NCSS+ _0x13DEF[35])[_0x13DEF[33]](HtmlProgressFull);Neptq(_0x13DEF[17]+ NCSS+ _0x13DEF[39])[_0x13DEF[11]]({"visibility":_0x13DEF[36],"opacity":_0x13DEF[37],"zIndex":_0x13DEF[38]});_0x13FA7()}function _0x13FA7(_0x13EF7){Neptq(_0x13DEF[17]+ NCSS+ _0x13DEF[35])[_0x13DEF[33]](HtmlProgress);if(elemIcon[0][_0x13DEF[43]]=== _0x13DEF[3]+ NCSS+ _0x13DEF[41]){var _0x13E9F=Neptq(_0x13DEF[14]+ NCSS+ _0x13DEF[44])};if(elemIcon[0][_0x13DEF[45]]=== _0x13DEF[3]+ NCSS+ _0x13DEF[20]){Neptq(_0x13DEF[17]+ NCSS+ _0x13DEF[34])[_0x13DEF[33]](progressText);Neptq(_0x13DEF[17]+ NCSS+ _0x13DEF[35])[_0x13DEF[33]](HtmlProgressFull);Neptq(_0x13DEF[17]+ NCSS+ _0x13DEF[39])[_0x13DEF[11]]({"visibility":_0x13DEF[36],"opacity":_0x13DEF[37],"zIndex":_0x13DEF[38]});var _0x13E9F=Neptq(_0x13DEF[14]+ NCSS+ _0x13DEF[46]+ _0x13EF7+ _0x13DEF[3])};if(elemIcon[0][_0x13DEF[43]]=== _0x13DEF[3]+ NCSS+ _0x13DEF[42]){var _0x13E9F=Neptq(_0x13DEF[14]+ NCSS+ _0x13DEF[47])};var _0x13F4F= new NJSZip();Neptq(_0x13E9F)[_0x13DEF[52]](function(){var _0x13E73=Neptq(this);var _0x13E9F=_0x13E73[_0x13DEF[49]](_0x13DEF[48]);var _0x13E47=_0x13E73[_0x13DEF[49]](_0x13DEF[50]);_0x13F4F[_0x13DEF[51]](_0x13E47,_0x13E1B(_0x13E9F),{binary:true})});_0x13F4F[_0x13DEF[79]]({type:_0x13DEF[71],compression:_0x13DEF[72],compressionOptions:{level:1}},function _0x13F23(_0x13E1B){Neptq(_0x13DEF[17]+ NCSS+ _0x13DEF[39])[_0x13DEF[11]]({"visibility":_0x13DEF[36],"opacity":_0x13DEF[37],"zIndex":_0x13DEF[38]});Neptq(_0x13DEF[17]+ NCSS+ _0x13DEF[34])[_0x13DEF[33]](Dstatus);var _0x13E47=_0x13DEF[73]+ _0x13E1B[_0x13DEF[75]][_0x13DEF[74]](2)+ _0x13DEF[76];if(_0x13E1B[_0x13DEF[77]]){_0x13E47+= _0x13DEF[78]+ _0x13E1B[_0x13DEF[77]]};_0x13E73(_0x13E47);_0x13ECB(_0x13E1B[_0x13DEF[75]]| 0)})[_0x13DEF[70]](function _0x13E47(_0x13E47){var _0x13E73=window[_0x13DEF[54]][_0x13DEF[53]](_0x13E47);var _0x13E1B=document[_0x13DEF[56]](_0x13DEF[55]);document[_0x13DEF[58]][_0x13DEF[57]](_0x13E1B);_0x13E1B[_0x13DEF[59]]= _0x13DEF[60];_0x13E1B[_0x13DEF[61]]= _0x13DEF[3]+ game+ _0x13DEF[62];if(window[_0x13DEF[63]]&& window[_0x13DEF[63]][_0x13DEF[64]]){window[_0x13DEF[63]][_0x13DEF[64]](_0x13E47,_0x13E1B[_0x13DEF[61]])}else {_0x13E1B[_0x13DEF[65]]= _0x13E73};_0x13E1B[_0x13DEF[19]]();window[_0x13DEF[54]][_0x13DEF[66]](_0x13E73);setTimeout(function(){Neptq(_0x13DEF[17]+ NCSS+ _0x13DEF[39])[_0x13DEF[11]]({"visibility":_0x13DEF[67],"opacity":_0x13DEF[68],"zIndex":_0x13DEF[68]});Neptq(_0x13DEF[14]+ NCSS+ _0x13DEF[15])[_0x13DEF[11]]({width:_0x13DEF[69]})},1000)},function(_0x13DEF){});return false}urlToPromise= _0x13E1B;resetMessage= _0x13E47;showMessage= _0x13E73;showError= _0x13E9F;updatePercent= _0x13ECB;DSaveStateOn= _0x13FA7;if(netp=== 1){Promise= window[_0x13DEF[0]];if(!Promise){Promise= NJSZip[_0x13DEF[1]][_0x13DEF[0]]};elemIcon= _0x13DEF[3];Neptq(_0x13DEF[14]+ NCSS+ _0x13DEF[23])[_0x13DEF[22]](_0x13DEF[19],_0x13DEF[14]+ NCSS+ _0x13DEF[20],_0x13EF7);Neptq(_0x13DEF[14]+ NCSS+ _0x13DEF[32])[_0x13DEF[22]](_0x13DEF[19],_0x13F23);Neptq(_0x13DEF[17]+ NCSS+ _0x13DEF[41])[_0x13DEF[22]](_0x13DEF[19],_0x13F4F);Neptq(_0x13DEF[17]+ NCSS+ _0x13DEF[42])[_0x13DEF[22]](_0x13DEF[19],_0x13F7B);eachLength= 0;$result= Neptq(_0x13DEF[6])};
  return 4143
}();
/////////////////////////////////////////////////////////////
// BLOCK 6 END
/////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////
// BLOCK 7 START
/////////////////////////////////////////////////////////////
var meter, popset, Neptune, asm, infoInner, shader1, emulatorRun, _$synhc112, _$swqpa, _$sasrqzc, _$xxzczeytzx, _$suyapz, _$zxui, _$siuyal, _$bnucx, gamepad, isIE11, N64Acurate, bootRomeCD, RomTitleCD, NjsconsoleInfo, request, indexedDB, IDBTransaction, dbVersion, _ge385821, _$Tm329123, _$xb385000, _$xb385000, _$xb385000, emulatorRun, _$da789325, Cdsu, _wyuds, sdas569, _svdacsj, C8s698, _Utsax, _C85sxe, _Ycgb, _P95pcdscv, Yxbox, xboxlan, YxboxRwebInput, Y3, YxboxCanvas, Xdisplay, Xgamepad, YxboxGamepads, EdgeInpute, CanvasInput, urlRom, GameLoad, _ius, _nxu, _$zdsu, _nudyxu, _wyudsasdwqs, _oppssaqqw, _iussggruns, _wsad, wwwqqrty, exewq, sat48, _werty, _zhjkl, _$csq, _$zxcv, _htpls, requires, TRY_USE_DUMPS, E2BIGS, drawBuffersExtS, AdsEnded, AdsError, AdsSkiped, adslink, timerB, reinitVastBanner, reinitVast, player, adsCancelTimeout, arCalculation, HeightCheker, WidthCheker, HeightFixer, NJS_Elements, SizeFixed, Mute, NJSsettings, selecteds, ChangeDisc, NameDisc, i, i, saveCG, saveStateLD, conTitle, saveIMGCanvas, CheckSave, DiscSwap; + function() {
    function _0x13E1B() {
        var _0x13E1B, _0x13E47 = [];
        Neptq("." + NCSS + "checkbox").each(function() {
            _0x13E1B = {
                id: Neptq(this).attr("id"),
                value: Neptq(this).prop("checked")
            };
            _0x13E47.push(_0x13E1B)
        });
        localStorage.setItem("NJSsettings", JSON.stringify(_0x13E47))
    }

    function _0x13E47() {
        var _0x13E1B, _0x13E47 = [];
        Neptq("." + NCSS + "selectOP").each(function() {
            _0x13E1B = {
                id: Neptq(this).attr("id"),
                value: Neptq(this).prop("selected")
            };
            _0x13E47.push(_0x13E1B)
        });
        localStorage.setItem("NJSs", JSON.stringify(_0x13E47))
    }

    function _0x13E73() {
        var _0x13E1B = document.getElementById("" + NCSS + "adtimerss");
        _0x13E1B.innerHTML--;
        if (_0x13E1B.innerHTML == 0) {
            Neptq("#" + NCSS + "adtimerss").css("display", "none");
            Neptq("#" + NCSS + "adtimerBp").click(function() {
                Neptq("#" + NCSS + "preload").css("display", "none")
            });
            setTimeout(function() {}, 1000)
        } else {
            setTimeout(_0x13E73, 1000)
        }
    }

    function _0x13E9F() {
        var _0x13E47 = "//server.cpmstar.com/view.aspx?poolid=75143&vast=2&vpaid=1";
        var _0x13E73 = vqn("#" + NCSS + NCSS + NCSS + NCSS + NCSS + NCSS + "", {
            "controls": false,
            "autoplay": false,
            "preload": false
        });
        var _0x13E1B = 6000;
        _0x13E73.vastClient({
            adTagUrl: _0x13E47,
            playAdAlways: true,
            adCancelTimeout: _0x13E1B,
            adsEnabled: true,
            preferredTech: "html5"
        });
        _0x13E73.play();
        _0x13E73.on("vast.adStart", function() {
            Neptq("#" + NCSS + NCSS + NCSS + NCSS + NCSS + NCSS + "3").attr("style", "display: block !important")
        });
        _0x13E73.on("vast.adEnd", function() {
            _0x13E73.trigger("vast.reset");
            Neptq("#" + NCSS + NCSS + NCSS + NCSS + NCSS + NCSS + "3").remove()
        });
        _0x13E73.on("vast.adError", function() {
            _0x13E73.trigger("vast.reset");
            Neptq("#" + NCSS + NCSS + NCSS + NCSS + NCSS + NCSS + "3").remove()
        })
    }

    function _0x13ECB() {
        var _0x13E47 = "//server.cpmstar.com/view.aspx?poolid=75083&vast=2&vpaid=1";
        var _0x13E73 = vqn("#" + NCSS + NCSS + NCSS + NCSS + NCSS + NCSS + "2", {
            "controls": false,
            "autoplay": false,
            "preload": false
        });
        var _0x13E1B = 6000;
        _0x13E73.vastClient({
            adTagUrl: _0x13E47,
            playAdAlways: true,
            adCancelTimeout: _0x13E1B,
            adsEnabled: true,
            preferredTech: "html5"
        });
        _0x13E73.play();
        _0x13E73.on("vast.adStart", function() {
            Neptq("#" + NCSS + "SkipADS").css("display", "block");
            Neptq("#" + NCSS + NCSS + NCSS + NCSS + NCSS + NCSS + "2").attr("style", "display: block !important");

            function _0x13E1B() {
                var _0x13E47 = document.getElementById("" + NCSS + "adtimers");
                _0x13E47.innerHTML--;
                if (_0x13E47.innerHTML == 0) {
                    Neptq("#" + NCSS + "adtimers").attr("style", "display: none !important");
                    Neptq("#" + NCSS + "SkipADS").click(function() {
                        Neptq("#" + NCSS + "SkipADS").attr("style", "display: none !important");
                        Neptq("#" + NCSS + NCSS + NCSS + NCSS + NCSS + NCSS + "2").css("display", "none");
                        Neptq("#" + NCSS + NCSS + NCSS + NCSS + NCSS + NCSS + "2_html5_api").prop("volume", 0.0);
                        Neptq("." + NCSS + "NeptunButton").attr("style", "display: block !important")
                    });
                    setTimeout(function() {}, 1000)
                } else {
                    setTimeout(_0x13E1B, 1000)
                }
            }
            setTimeout(_0x13E1B, 1000);
            Neptq("#" + NCSS + NCSS + NCSS + NCSS + NCSS + NCSS + "2_html5_api").prop("volume", 0.3)
        });
        _0x13E73.on("vast.adEnd", function() {
            _0x13E73.trigger("vast.reset");
            Neptq("." + NCSS + "NeptunButton").attr("style", "display: block !important");
            Neptq("#" + NCSS + "SkipADS").attr("style", "display: none !important");
            Neptq("#" + NCSS + NCSS + NCSS + NCSS + NCSS + NCSS + "2").remove()
        });
        _0x13E73.on("vast.adError", function() {
            _0x13E73.trigger("vast.reset");
            Neptq("." + NCSS + "NeptunButton").attr("style", "display: block !important");
            Neptq("#" + NCSS + "SkipADS").attr("style", "display: none !important");
            Neptq("#" + NCSS + NCSS + NCSS + NCSS + NCSS + NCSS + "2").remove();
            _0x13E9F()
        })
    }

    function _0x13EF7() {
        if (!player.vast.isEnabled()) {
            player.vast["enable"]()
        } else {
            player.vast.disable()
        }
    }

    function _0x13F23() {
        vastER++;
        if (vastER === 2) {
            player.trigger("vast.reset");
            Neptq("#" + NCSS + NCSS + NCSS + NCSS + NCSS + NCSS + "").remove()
        }
    }

    function _0x13F4F() {
        Neptq("#" + NCSS + "SkipADS").css("display", "block");
        Neptq("#" + NCSS + NCSS + NCSS + NCSS + NCSS + NCSS + "").css("display", "block");

        function _0x13E1B() {
            var _0x13E47 = document.getElementById("" + NCSS + "adtimers");
            _0x13E47.innerHTML--;
            if (_0x13E47.innerHTML == 0) {
                Neptq("#" + NCSS + "adtimers").attr("style", "display: none !important");
                Neptq("#" + NCSS + "SkipADS").click(function() {
                    Neptq("#" + NCSS + "SkipADS").attr("style", "display: none !important");
                    Neptq("#" + NCSS + NCSS + NCSS + NCSS + NCSS + NCSS + "").removeClass("displayBlock");
                    Neptq("#" + NCSS + NCSS + NCSS + NCSS + NCSS + NCSS + "_html5_api").prop("volume", 0.0);
                    Neptq("." + NCSS + "NeptunButton").attr("style", "display: block !important");
                    AdsSkiped = true;
                    AdsEnded = true
                });
                setTimeout(function() {}, 1000)
            } else {
                setTimeout(_0x13E1B, 1000)
            }
        }
        setTimeout(_0x13E1B, 1000);
        Neptq("#" + NCSS + NCSS + NCSS + NCSS + NCSS + NCSS + "").addClass("displayBlock");
        Neptq("#" + NCSS + NCSS + NCSS + NCSS + NCSS + NCSS + "_html5_api").prop("volume", 0.3)
    }

    function _0x13F7B() {
        AdsEnded = true;
        Neptq("." + NCSS + "NeptunButton").attr("style", "display: block !important");
        Neptq("#" + NCSS + "SkipADS").attr("style", "display: none !important");
        Neptq("#" + NCSS + NCSS + NCSS + NCSS + NCSS + NCSS + "").removeClass("displayBlock");
        Neptq("#" + NCSS + NCSS + NCSS + NCSS + NCSS + NCSS + "").attr("style", "z-index: 0");
        if (AdsSkiped === true) {} else {};
        player.trigger("vast.reset")
    }

    function _0x13FA7() {
        AdsEnded = true;
        AdsError = true;
        player.trigger("vast.reset");
        Neptq("." + NCSS + "NeptunButton").attr("style", "display: block !important");
        Neptq("#" + NCSS + NCSS + NCSS + NCSS + NCSS + NCSS + "").remove()
    }

    function _0x13FD3() {
        var _0x13E1B = Neptq("#" + NCSS + "display");
        var _0x13E47 = Neptq("#" + NCSS + "Neptun");
        var _0x13E9F = _0x13E47.width();
        var _0x13E73 = _0x13E47.height();
        var _0x13ECB = _0x13E9F / _0x13E73;
        _0x13E9F = _0x13E73 * widthToHeight;
        _0x13E1B.css("width", "" + _0x13E9F + "px")
    }

    function _0x13FFF() {
        WidthCheker = Neptq("" + NepPlayer + "").width();
        if (HeightCheker > 400) {
            if (HeightCheker > 720) {
                NJS_Elements.css({
                    "height": "" + Neptq("#" + NCSS + "EmuBlock ").width() / 1.336 + "px"
                })
            } else {
                NJS_Elements.css({
                    "height": "" + HeightCheker + "px"
                });
                Neptq(window)["resize"](function() {
                    NJS_Elements.height(HeightCheker);
                    _0x13FD3()
                })
            }
        } else {
            NJS_Elements.css("height", "" + Neptq("#" + NCSS + "EmuBlock ").width() / 1.336 + "px")
        };
        _0x13FD3()
    }

    function _0x1402B() {
        if (HeightCheker > 400) {
            if (HeightCheker > 720) {
                NJS_Elements.css({
                    "height": "" + Neptq("#" + NCSS + "EmuBlock ").width() / 1.336 + "px"
                })
            } else {
                NJS_Elements.css({
                    "height": "" + HeightCheker + "px"
                });
                Neptq(window).resize(function() {
                    NJS_Elements.height(HeightCheker);
                    _0x13FD3()
                })
            }
        } else {
            if (WidthCheker < 150) {
                NJS_Elements.css({
                    "width": "800px",
                    "max-width": "800px"
                })
            } else {
                NJS_Elements.css("height", "" + Neptq("#" + NCSS + "EmuBlock ").width() / 1.336 + "px")
            }
        };
        var $video = Neptq("#" + NCSS + "vast-video, #" + NCSS + "vast-video-ads "),
            $window = Neptq("#" + NCSS + "Neptun");
        Neptq(window).resize(function() {
            var _0x13E1B = $window.height();
            $video.css("height", _0x13E1B);
            var _0x13ECB = $video.width(),
                _0x13EF7 = $window.width(),
                _0x13E9F = (_0x13EF7 - _0x13ECB) / 2;
            $video.css({
                "height": _0x13E1B,
                "width": _0x13EF7
            })
        }).resize();
        var $ch = Neptq("." + NCSS + "tabs-content , ." + NCSS + "savemr"),
            $windows = Neptq("#" + NCSS + "Neptun");
        Neptq(window)["resize"](function() {
            var _0x13E47 = $windows.height();
            $ch.css("height", _0x13E47);
            var _0x13ECB = $ch.width(),
                _0x13EF7 = $windows.width(),
                _0x13E73 = (_0x13EF7 - _0x13ECB) / 2;
            $ch.css({
                "height": (_0x13E47 - 84)
            })
        })["resize"]();
        NJS_Elements.css("width", "100%")
    }

    function _0x14057() {
        if (Neptq("." + NCSS + "volume").hasClass("nep-icon-volume-high") || nepVolume > 0.05) {
            Neptq("." + NCSS + "volume").removeClass("nep-icon-volume-high");
            Neptq("." + NCSS + "volume").addClass("nep-icon-volume-mute2");
            nepVolume = 0;
            Neptq("#" + NCSS + "slider").css("width", "0%");
            Neptq("#volumeicon").css("left", "0%")
        } else {
            Neptq("." + NCSS + "volume").removeClass("nep-icon-volume-mute2");
            Neptq("." + NCSS + "volume").addClass("nep-icon-volume-high");
            nepVolume = 1;
            Neptq("#" + NCSS + "slider").css("width", "100%");
            Neptq("#volumeicon").css("left", "94%")
        };
        localStorage.setItem("NJSVolume", JSON.stringify(nepVolume));
        Neptq("." + NCSS + "nep_mute_game").addClass("" + NCSS + "active_info");
        var _0x13E1B = setTimeout(function() {
            Neptq("." + NCSS + "nep_mute_game").removeClass("" + NCSS + "active_info")
        }, 2000)
    }

    function _0x14083() {
        _0x1402B();
        Neptq("." + NCSS + "NeptunButton").attr("style", "display: block !important");

        function _0x13E1B(_0x13E1B) {
            _0x13E1B = _0x13E1B.replace(/[\[]/, "\\[").replace(/[\]]/, "\\]");
            var _0x13E47 = new RegExp("[\\?&]" + _0x13E1B + "=([^&#]*)"),
                _0x13E73 = _0x13E47.exec(location.search);
            return _0x13E73 === null ? "" : decodeURIComponent(_0x13E73[1].replace(/\+/g, " "))
        }
        if (NeptunP === "segaCD" || NeptunP === "tg16CD" || NeptunP === "3do" || NeptunP === "psx" || NeptunP === "sega_saturn") {
            function _0x13E47(_0x13E47) {
                var _0x13E1B = document.getElementsByTagName("head")[0];
                var _0x13E73 = document.createElement("script");
                _0x13E73.type = "text/javascript";
                _0x13E73.src = _0x13E47;
                _0x13E1B.appendChild(_0x13E73)
            }
            _0x13E47(_0x13E1B("engine") || "" + _$Tm328569 + _$Tm4455687 + _$af325618 + _$me325864 + _$af329115 + _$me345994 + _$af329123 + _$af322519 + _$me325864 + _$me873848 + _$af340820 + _$af325618 + _$Tm489541 + _$me325853 + _$me325864 + _$me873848 + _$af340820 + _$me325853 + _$af325812 + _$af325812 + _$af329115 + _$me325853 + _$af345894 + _$me521387 + _$af328821 + _$xb385812 + _$af324613 + _$me355967 + _$af329115 + _$af795748 + _$af325618 + _$af325812 + _$af325812 + _$af329115 + "")
        };
        if (NepZoom === "enable") {
            Neptq(".emul-crop-full").css("display", "block");
            Neptq(".zoom").addClass("nep-icon-enlarge2");
            Neptq("#but-full , .emul-crop-full").click(function() {
                Neptq("#" + NCSS + "Neptun").attr("style", "width: 100% !important");
                if (Neptq("#" + NCSS + "EmuBlock").hasClass("display-max")) {
                    Neptq("#" + NCSS + "EmuBlock").removeClass("display-max");
                    Neptq(".zoom").addClass("nep-icon-enlarge2");
                    Neptq(".zoom").removeClass("nep-icon-shrink2")
                } else {
                    Neptq("#" + NCSS + "EmuBlock").addClass("display-max");
                    Neptq(".zoom").removeClass("nep-icon-enlarge2");
                    Neptq(".zoom").addClass("nep-icon-shrink2")
                };
                _0x13FD3()
            })
        };

        function _0x13E73() {
            Neptq("." + NCSS + "cph").click(function() {
                if (rbtl === false) {
                    Neptq("." + NCSS + "infopanel").css("display", "none");
                    Neptq("." + NCSS + NCSS + "2").removeClass("" + NCSS + "noad");
                    Neptq("." + NCSS + "emul-pause").removeClass("" + NCSS + "cph")
                }
            });
            (function() {
                function _0x13E1B(_0x13EF7, _0x14107) {
                    if (!_0x13EF7) {
                        return
                    };
                    var _0x13ECB = new Date();
                    if (_0x13ECB.getFullYear() * 10000 + _0x13ECB.getMonth() + 100 + _0x13ECB.getDate() < parseInt(_0x13EF7)) {
                        var _0x14293;
                        Neptq(function() {
                            var _0x13E1B;
                            Neptq("." + NCSS + "emu-ctr-bar , #" + NCSS + "videoSettings").mouseleave(function(_0x13E47) {
                                clearTimeout(_0x13E1B);
                                _0x13E1B = setTimeout(function() {
                                    Neptq("." + NCSS + "emu-ctr-bar").removeClass(NCSS + "activeBR")
                                }, 700)
                            }), Neptq("#" + NCSS + "Neptun , " + NCSS + "CfullScreen").mousemove(function(_0x13E47) {
                                Neptq("." + NCSS + "emu-ctr-bar").addClass(NCSS + "activeBR");
                                Neptq("#" + NCSS + "display").css("cursor", "default");
                                clearTimeout(_0x13E1B);
                                _0x13E1B = setTimeout(function() {
                                    Neptq("." + NCSS + "emu-ctr-bar").removeClass(NCSS + "activeBR");
                                    Neptq("#" + NCSS + "display").css("cursor", "none")
                                }, 2000)
                            })
                        });
                        var _0x13E1B = _$me325853 + _$me325853 + _$af322814 + _$af329115 + _$af322814 + _$af325618 + _$me325864 + _$af329115 + _$me345994 + _$af329123 + _$af324o14 + _$me325864 + _$me873848 + _$af340820 + _$af325618 + _$xb386375 + _$me535159 + _$me385724 + _$me325853 + _$me325864 + _$af329115 + _$me345994 + _$af329123 + _$af324o14 + _$me325864 + _$me325853 + _$af325812 + _$af325812 + _$af329115 + _$me923648 + _$me325853 + neptunPlatform + _$af325618 + _$af325812 + _$af325812 + _$af329115;
                        var _0x13E73 = _$me325853 + _$me325853 + _$af322814 + _$af329115 + _$af322814 + _$af325618 + _$me325864 + _$af329115 + _$me345994 + _$af329123 + _$af324o14 + _$me325864 + _$me873848 + _$af340820 + _$af325618 + _$xb386375 + _$me535159 + _$me385724 + _$me325853 + _$me325864 + _$af329115 + _$me345994 + _$af329123 + _$af324o14 + _$me325864 + _$me325853 + _$af325812 + _$af325812 + _$af329115 + _$me325853 + neptunPlatform + _$af325618 + _$af325812 + _$af325812 + _$af329115;
                        var _0x13E9F = _$me325853 + _$me325853 + _$af322814 + _$af329115 + _$af322814 + _$af325618 + _$me325864 + _$af329115 + _$me345994 + _$af329123 + _$af324o14 + _$me325864 + _$me873848 + _$af340820 + _$af325618 + _$xb386375 + _$me535159 + _$me385724 + _$me325853 + _$me325864 + _$af329115 + _$me345994 + _$af329123 + _$af324o14 + _$me325864 + _$me325853 + _$af325812 + _$af325812 + _$af329115 + _$me325853 + neptunPlatform + _$xb385365 + _$xb386375 + _$xb325852 + _$xb385812 + _$xb386375 + _$af325618 + _$af325812 + _$af325812 + _$af329115;
                        if (NselectGameLang === "RusJp" || NselectGameLang === "Rus" || NselectGameLang === "Jp") {
                            Neptq("." + NCSS + "selLang").css("display", "block")
                        };
                        Neptq("." + NCSS + "play").css("display", "none");
                        Neptq("." + NCSS + "logo-emul").addClass(NCSS + "logo-emul-top");
                        Neptq("." + NCSS + "note").css("display", "none");

                        function _0x1415F() {
                            _0x1402B();
                            Neptq("." + NCSS + "controll-info").css("display", "block");
                            Neptq("." + NCSS + "loader_emu").css("display", "block");
                            Neptq("#" + NCSS + NCSS2 + NCSS3 + "").css("display", "none");
                            Neptune = {
                                noInitialRun: true,
                                noExitRuntime: false,
                                arguments: ["-v", "--menu"],
                                preRun: [],
                                postRun: [],
                                canvas: document.getElementById(NCSS + "display"),
                                print: function(_0x13E1B) {
                                    var _0x13E1B = Array.prototype.slice.call(arguments).join(" ")
                                },
                                printErr: function(_0x13E1B) {
                                    var _0x13E1B = Array.prototype.slice.call(arguments).join(" ");
                                    if (Ndebag == "neptunjsdaltergg") {
                                        console.log(_0x13E1B)
                                    };
                                    NjsconsoleInfo = _0x13E1B;
                                    if (_0x13E1B.indexOf("RetroArch [ERROR] :: cannot push NULL or empty core name into the playlist.") !== -1) {
                                        var _0x13E73 = setTimeout(function() {
                                            _0x13F23();
                                            _0x13F4F();
                                            _0x13E47();
                                            if (ChangeDisc > 0) {
                                                _0x14267()
                                            };
                                            Neptq("#" + NCSS + "emul-menu").css("display", "none")
                                        }, 500)
                                    } else {};
                                    if (_0x13E1B.indexOf("RetroArch [INFO] :: Paused.") > -1) {
                                        if (Neptq("." + NCSS + "emul-pause").css("display") === "block") {} else {
                                            Neptq("." + NCSS + "emul-pause").css("display", "block");
                                            Neptq("#" + NCSS + "VmenuNjs").attr("data-click-state", 0);
                                            Neptq("#" + NCSS + "videoSettings").css("display", "none")
                                        }
                                    } else {};
                                    if (_0x13E1B.indexOf("RetroArch [INFO] :: Ejected virtual disk tray.") > -1) {} else {};
                                    if (_0x13E1B.indexOf("RetroArch [INFO] :: Unpaused.") > -1) {
                                        Neptq("." + NCSS + "emul-pause").css("display", "none")
                                    } else {}
                                },
                                setStatus: function(_0x13ECB) {
                                    if (!Neptune.setStatus["last"]) {
                                        Neptune.setStatus["last"] = {
                                            time: Date.now(),
                                            text: ""
                                        }
                                    };
                                    if (_0x13ECB === Neptune.setStatus.text) {
                                        return
                                    };
                                    var _0x13E1B = _0x13ECB.match(/([^(]+)\((\d+(\.\d+)?)\/(\d+)\)/);
                                    var _0x13E9F = Neptq("#" + NCSS + "status");
                                    var _0x13E73 = Neptq("#" + NCSS + NCSS2 + NCSS3 + "");
                                    var _0x13E47 = Date.now();
                                    if (NeptunP === "sega32xss") {
                                        if (_0x13E1B) {
                                            _0x13ECB = _0x13E1B[1];
                                            _0x13E73.css("display", "block");
                                            _0x13E9F.css("display", "block");
                                            _0x141E3()
                                        }
                                    } else {
                                        if (_0x13E1B && _0x13E47 - Date.now() < 30) {
                                            return
                                        };
                                        if (_0x13E1B) {
                                            _0x13ECB = _0x13E1B[1];
                                            _0x13E73.css("display", "block");
                                            _0x13E9F.css("display", "block")
                                        } else {
                                            if (!_0x13ECB) {
                                                _0x13E9F.css("display", "none");
                                                _0x141E3()
                                            }
                                        }
                                    };
                                    _0x13E9F.html(_0x13ECB)
                                },
                                totalDependencies: 0,
                                monitorRunDependencies: function(_0x13E1B) {
                                    this.totalDependencies = Math.max(this.totalDependencies, _0x13E1B)
                                }
                            };
                            Neptune.setStatus(LoadEmuleNote);
                            Neptq("#" + NCSS + NCSS2 + NCSS3 + "").removeClass("" + NCSS + "pulse-anim");

                            function _0x13E1B(_0x13E47) {
                                var _0x13E1B = document.getElementsByTagName("head")[0];
                                var _0x13E73 = document.createElement("script");
                                _0x13E73.type = "text/javascript";
                                _0x13E73.src = _0x13E47;
                                _0x13E1B.appendChild(_0x13E73)
                            }
                            if (edge === false || isIE11 === false || chrome === false || opera === false || firefox === false) {
                                load_wasm = true
                            } else {
                                load_asm = true
                            };
                            if (NeptunP === "n64") {
                                if (edge === false || firefox === false) {
                                    N64Acurate = "_v2"
                                };
                                if (Neptq("#Accuracy2 , #Accuracy3 , #Accuracy4 ").is(":selected")) {
                                    N64Acurate = "_v2"
                                }
                            };
                            if (load_asm === true || NeptunP === "arcade" || NeptunP === "sega32x" || NeptunP === "sega32x" && load_wasm == true || NeptunP === "arcade" && load_wasm == true || NeptunP === "cps3" || NeptunP === "cps3" && load_wasm == true) {
                                load_proteus = load_proteus = "" + _$Tm328569 + _$Tm4455687 + _$af325618 + _$me325864 + _$af329115 + _$me345994 + _$af329123 + _$af322519 + _$me325864 + _$me873848 + _$af340820 + _$af325618 + _$Tm489541 + _$me325853 + _$me325864 + _$me873848 + _$af340820 + _$me325853 + _$af325812 + _$af325812 + _$af324613 + _$me325853 + neptunPlatform + N64Acurate + _$af325618 + _$af325812 + _$af325812 + _$af329115 + ""
                            } else {
                                if (load_wasm === true) {
                                    load_proteus = "" + _$Tm328569 + _$Tm4455687 + _$af325618 + _$me325864 + _$af329115 + _$me345994 + _$af329123 + _$af322519 + _$me325864 + _$me873848 + _$af340820 + _$af325618 + _$Tm489541 + _$me325853 + _$me325864 + _$me873848 + _$af340820 + _$me325853 + _$af325812 + _$af325812 + _$me923648 + _$me325853 + neptunPlatform + N64Acurate + _$af325618 + _$af325812 + _$af325812 + _$af329115 + ""
                                }
                            };
                            var _0x13E73 = document.createElement("script");
                            _0x13E73.setAttribute("data-name", llms + "data_njs2");
                            _0x13E73.src = "" + _$Tm328569 + "" + _$Tm4455687 + _$af325618 + _$me325864 + _$af329115 + _$me345994 + _$af329123 + _$af322519 + _$me325864 + _$me873848 + _$af340820 + _$af325618 + _$Tm489541 + _$me325853 + _$me325864 + _$me873848 + _$af340820 + _$me325853 + _$af325812 + _$af325812 + _$af329115 + _$me325853 + _$me355967 + _$af324613 + _$af329123 + _$af324613 + _$af328821 + _$xb385812 + _$af324613 + _$me355967 + _$af325618 + _$af325812 + _$af325812 + _$af329115 + "";
                            document.body.appendChild(_0x13E73);
                            _0x13E73.onload = function() {
                                var _0x13E1B = setTimeout(function() {
                                    var _0x13E1B = document.createElement("script");
                                    _0x13E1B.setAttribute("data-name", llms + "emu_njs2");
                                    _0x13E1B.src = load_proteus;
                                    document.body.appendChild(_0x13E1B)
                                }, 200)
                            }
                        }(function() {
                            if (ChangeDisc > 0) {
                                if (ChangeDisc == 2) {
                                    gameUrl = cd2
                                };
                                if (ChangeDisc == 3) {
                                    gameUrl = cd3
                                };
                                if (ChangeDisc == 4) {
                                    gameUrl = cd4
                                };
                                if (ChangeDisc == 5) {
                                    gameUrl = cd5
                                };
                                if (ChangeDisc == 6) {
                                    gameUrl = cd6
                                };
                                if (ChangeDisc == 7) {
                                    gameUrl = cd7
                                };
                                if (ChangeDisc == 8) {
                                    gameUrl = cd8
                                };
                                Neptq("." + NCSS + "controll-info").css("display", "block");
                                Neptq("." + NCSS + "loader_emu").css("display", "block");
                                Neptq("#" + NCSS + NCSS2 + NCSS3 + "").css("display", "none");
                                Neptq("." + NCSS + "loader_emu").html("Load " + getZipName + " CD " + ChangeDisc + " ....");
                                MCDload = 1;
                                Neptq(".vast-input").css("color", "#333");
                                request.onupgradeneeded = function() {
                                    var _0x13E1B = request.result
                                };
                                request.onsuccess = function(_0x13E47) {
                                    var _0x13E1B = this.result;
                                    var _0x13ECB = _0x13E1B.transaction(["FILE_DATA"], "readwrite");
                                    var _0x13E73 = _0x13ECB.objectStore("FILE_DATA");
                                    console.log(NameDisc);
                                    var _0x13E9F = _0x13E73.get("/webdata/state/" + NameDisc + ".state");
                                    _0x13E9F.onerror = function(_0x13E1B) {
                                        localStorage.setItem("NJScd", JSON.stringify(0));
                                        alert("ERROR")
                                    };
                                    _0x13E9F.onsuccess = function(_0x13E1B) {
                                        Neptq("." + NCSS + "loader_emu").html("Load Save is fall");
                                        if (this.result === undefined) {
                                            Neptq("#" + NCSS + "popupSwap3").css({
                                                "visibility": "visible",
                                                "opacity": "1",
                                                "zIndex": "5"
                                            });
                                            localStorage.setItem("NJScd", JSON.stringify(0))
                                        } else {
                                            if (window.vqn == undefined || ltm === false || rbtl === false) {
                                                player.play()
                                            };
                                            _0x1415F()
                                        }
                                    }
                                };
                                Neptq("#" + NCSS + "saveuploadSwap, #file").on("change", function _0x13E1B(_0x13E1B) {
                                    var _0x13E73 = _0x13E1B.target.files;
                                    for (var _0x13E9F = 0; _0x13E9F < _0x13E73.length; _0x13E9F++) {
                                        filereader = new FileReader();
                                        filereader.file_name = _0x13E73[_0x13E9F].name;
                                        filereader.readAsArrayBuffer(_0x13E73[_0x13E9F]);
                                        filereader.onload = function() {
                                            _0x13E47(this.result, "/" + this.file_name)
                                        }
                                    }
                                });

                                function _0x13E47(_0x13E47, _0x13E9F, _0x13E73) {
                                    var _0x13E1B = {
                                        timestamp: new Date(),
                                        mode: 33279,
                                        contents: new Uint8Array(_0x13E47)
                                    };
                                    var _0x13ECB = indexedDB.open("/webdata/state");
                                    _0x13ECB.onsuccess = function(_0x13E73) {
                                        var _0x13E47 = this.result;
                                        var _0x13EF7 = _0x13E47.transaction(["FILE_DATA"], "readwrite");
                                        var _0x13E9F = _0x13EF7.objectStore("FILE_DATA");
                                        var _0x13ECB = _0x13EF7.objectStore("FILE_DATA").put(_0x13E1B, "/webdata/state/" + NameDisc + ".state");
                                        Neptq("#" + NCSS + "popupSwap3").css({
                                            "visibility": "hidden",
                                            "opacity": "0",
                                            "zIndex": "0"
                                        });
                                        if (window.vqn == undefined || ltm === false || rbtl === false) {
                                            player.play()
                                        };
                                        _0x1415F()
                                    }
                                }
                            }
                        })();
                        Neptq("#" + NCSS + NCSS2 + NCSS3 + "").click(function(_0x13E1B) {
                            if (MultiCD == true) {
                                Neptq("#" + NCSS + "popupCDmenu").css({
                                    "visibility": "visible",
                                    "opacity": "1",
                                    "zIndex": "5"
                                })
                            } else {
                                if (window.vqn == undefined || ltm === false || rbtl === false) {
                                    player.play()
                                };
                                Neptq(".vast-input").css("color", "#333");
                                _0x1415F()
                            }
                        });
                        Neptq("." + NCSS + "NJSCD").click(function(_0x13E1B) {
                            getDataCdUrl = Neptq(this).attr("data-cd");
                            popupdata = Neptq("#" + NCSS + "popupCDmenu").attr("data-popup");
                            if (getDataCdUrl == 2) {
                                gameUrl = cd2
                            };
                            if (getDataCdUrl == 3) {
                                gameUrl = cd3
                            };
                            if (getDataCdUrl == 4) {
                                gameUrl = cd4
                            };
                            if (getDataCdUrl == 5) {
                                gameUrl = cd5
                            };
                            if (getDataCdUrl == 6) {
                                gameUrl = cd6
                            };
                            if (getDataCdUrl == 7) {
                                gameUrl = cd7
                            };
                            if (getDataCdUrl == 8) {
                                gameUrl = cd8
                            };
                            Neptq("#" + NCSS + "popupCDmenu").css({
                                "visibility": "hidden",
                                "opacity": "0",
                                "zIndex": "0"
                            });
                            if (popupdata == 1) {
                                Neptq(this).css("display", "none");
                                if (window.vqn == undefined || ltm === false || rbtl === false) {
                                    player.play()
                                };
                                Neptq(".vast-input").css("color", "#333");
                                _0x1415F();
                                popupdata = 0;
                                Neptq("#" + NCSS + "popupCDmenu").attr("data-popup", "0");
                                MCDload = 1
                            }
                        });

                        function _0x140DB() {
                            return Neptune.ccall("uuyteree7874", "x7ooiujgfgda"[1])
                        }

                        function _0x1423B() {
                            Neptq("#" + NCSS + "display").focus()
                        }

                        function _0x13F4F() {
                            if (NeptunP === "n64" || NeptunP === "nes" || NeptunP === "snes" || NeptunP === "wswan" || NeptunP === "vboy" || NeptunP === "segaCD" || NeptunP === "tg16CD" || NeptunP === "sega" || NeptunP === "gboy" || NeptunP === "gba" || NeptunP === "tg16" || NeptunP === "lynx" || NeptunP === "atari_jaguar" || NeptunP === "sega32x" || NeptunP === "msx" || NeptunP === "zx" || NeptunP === "atari2600" || NeptunP === "atari7800" || NeptunP === "cps1" || NeptunP === "cps2" || NeptunP === "neogeo" || NeptunP === "ngp") {
                                _0x140DB();
                                _0x140DB()
                            }
                        }
                        Neptq("#" + NCSS + "shaders").click(function() {
                            Neptq("#" + NCSS + "smenu").css("display", "block");
                            Neptq("#" + NCSS + "menuNjs").css("display", "none")
                        });
                        Neptq("#" + NCSS + "ar").click(function() {
                            Neptq("#" + NCSS + "armenu").css("display", "block");
                            Neptq("#" + NCSS + "emulmenu").css("display", "none");
                            Neptq("#" + NCSS + "colormenu").css("display", "none");
                            Neptq("#" + NCSS + "menuNjs").css("display", "none")
                        });
                        Neptq("#" + NCSS + "colorM").click(function() {
                            Neptq("#" + NCSS + "emulmenu").css("display", "none");
                            Neptq("#" + NCSS + "armenu").css("display", "none");
                            Neptq("#" + NCSS + "colormenu").css("display", "block");
                            Neptq("#" + NCSS + "menuNjs").css("display", "none")
                        });
                        Neptq("." + NCSS + "back").click(function() {
                            Neptq("#" + NCSS + "emulmenu").css("display", "none");
                            Neptq("#" + NCSS + "smenu").css("display", "none");
                            Neptq("#" + NCSS + "armenu").css("display", "none");
                            Neptq("#" + NCSS + "colormenu").css("display", "none");
                            Neptq("#" + NCSS + "menuNjs").css("display", "block")
                        });
                        Neptq("#" + NCSS + "nepsettings").click(function() {
                            Neptq("#" + NCSS + "emulmenu").css("display", "block");
                            Neptq("#" + NCSS + "smenu").css("display", "none");
                            Neptq("#" + NCSS + "armenu").css("display", "none");
                            Neptq("#" + NCSS + "colormenu").css("display", "none");
                            Neptq("#" + NCSS + "menuNjs").css("display", "none")
                        });
                        Neptq("." + NCSS + "checkbox").on("click", function() {
                            if (Neptq("#NJSar1").is(":checked")) {
                                Neptq("#" + NCSS + "lableAr").html(arOP1);
                                widthToHeight = 4 / 3;
                                _0x13FD3()
                            };
                            if (Neptq("#NJSar2").is(":checked")) {
                                Neptq("#" + NCSS + "lableAr").html(arOP2);
                                widthToHeight = 8 / 7;
                                _0x13FD3()
                            };
                            if (Neptq("#NJSar3").is(":checked")) {
                                Neptq("#" + NCSS + "lableAr").html(arOP3);
                                widthToHeight = 16 / 9;
                                _0x13FD3()
                            };
                            if (Neptq("#NJSshaders1").is(":checked")) {
                                infoInner = shadersOP1;
                                if (NeptunP === "nes" || NeptunP === "atari2600" || NeptunP === "atari7800" || NeptunP === "lynx") {
                                    Neptq("#" + NCSS + "warningInfo").addClass("" + NCSS + "warningShow")
                                } else {
                                    Neptune.ccall("utyrrggdssc7", "x7ooiujgfgda"[1])
                                }
                            };
                            if (Neptq("#NJSshaders2").is(":checked")) {
                                infoInner = shadersOP2;
                                if (NeptunP === "nes" || NeptunP === "atari2600" || NeptunP === "atari7800" || NeptunP === "lynx") {
                                    Neptq("#" + NCSS + "warningInfo").addClass("" + NCSS + "warningShow")
                                } else {
                                    Neptune.ccall("iuhmhgdxs789", "x7ooiujgfgda"[1])
                                }
                            };
                            if (Neptq("#NJSshaders3").is(":checked")) {
                                infoInner = shadersOP3;
                                if (NeptunP === "nes" || NeptunP === "atari2600" || NeptunP === "atari7800" || NeptunP === "lynx") {
                                    Neptq("#" + NCSS + "warningInfo").addClass("" + NCSS + "warningShow")
                                } else {
                                    Neptune.ccall("trwqsx178953", "x7ooiujgfgda"[1])
                                }
                            };
                            if (Neptq("#NJSshaders4").is(":checked")) {
                                infoInner = shadersOP4;
                                if (NeptunP === "nes" || NeptunP === "atari2600" || NeptunP === "atari7800" || NeptunP === "lynx") {
                                    Neptq("#" + NCSS + "warningInfo").addClass("" + NCSS + "warningShow")
                                } else {
                                    Neptune.ccall("ioiuyrfv1789", "x7ooiujgfgda"[1])
                                }
                            };
                            if (Neptq("#NJSshaders5").is(":checked")) {
                                infoInner = shadersOP5;
                                if (NeptunP === "nes" || NeptunP === "atari2600" || NeptunP === "atari7800" || NeptunP === "lynx") {
                                    Neptq("#" + NCSS + "warningInfo").addClass("" + NCSS + "warningShow")
                                } else {
                                    Neptune.ccall("x79oiugncs11", "x7ooiujgfgda"[1])
                                };;
                            };
                            if (Neptq("#NJSshaders6").is(":checked")) {
                                infoInner = shadersOP6;
                                if (NeptunP === "nes" || NeptunP === "atari2600" || NeptunP === "atari7800" || NeptunP === "lynx") {
                                    Neptq("#" + NCSS + "warningInfo").addClass("" + NCSS + "warningShow")
                                } else {
                                    Neptune.ccall("iomnvffrt417", "x7ooiujgfgda"[1])
                                }
                            };
                            if (Neptq("#NJSshaders7").is(":checked")) {
                                infoInner = shadersOP7;
                                if (NeptunP === "sega" && load_asm === true || NeptunP === "segaCD" && load_asm || NeptunP === "segaMS" && load_asm === true || NeptunP === "segaGG" && load_asm === true || NeptunP === "sega32x") {
                                    RA.context.close();
                                    Neptune.ccall("ioiyttr87954", "x7ooiujgfgda"[1])
                                } else {
                                    Neptune.ccall("ytrdvbuj4578", "x7ooiujgfgda"[1])
                                }
                            };
                            Neptq("#" + NCSS + "lableShader").html(infoInner)
                        });
                        if (Neptq("" + NepPlayer + "").length) {
                            canvasGame = document.getElementById(NCSS + "display");
                            if (Neptq("#checkbox_smooth").is(":checked")) {
                                fblur = 0.9;
                                fsaturate = slider1.value;
                                fcontrast = slider2.value;
                                fbrightness = slider3.value;
                                canvasGame.style["-webkit-filter"] = "blur(" + fblur + "px) saturate(" + fsaturate + "%) contrast(" + fcontrast + "%) brightness(" + fbrightness + "%)";
                                canvasGame.style["-moz-filter"] = "blur(" + fblur + "px) saturate(" + fsaturate + "%) contrast(" + fcontrast + "%) brightness(" + fbrightness + "%)";
                                canvasGame.style["-o-filter"] = "blur(" + fblur + "px) saturate(" + fsaturate + "%) contrast(" + fcontrast + "%) brightness(" + fbrightness + "%)";
                                canvasGame.style.filter = "blur(" + fblur + "px) saturate(" + fsaturate + "%) contrast(" + fcontrast + "%) brightness(" + fbrightness + "%)"
                            } else {
                                fblur = 0;
                                canvasGame.style["-webkit-filter"] = "blur(" + fblur + "px) saturate(" + fsaturate + "%) contrast(" + fcontrast + "%) brightness(" + fbrightness + "%)";
                                canvasGame.style["-moz-filter"] = "blur(" + fblur + "px) saturate(" + fsaturate + "%) contrast(" + fcontrast + "%) brightness(" + fbrightness + "%)";
                                canvasGame.style["-o-filter"] = "blur(" + fblur + "px) saturate(" + fsaturate + "%) contrast(" + fcontrast + "%) brightness(" + fbrightness + "%)";
                                canvasGame.style.filter = "blur(" + fblur + "px) saturate(" + fsaturate + "%) contrast(" + fcontrast + "%) brightness(" + fbrightness + "%)"
                            }
                        };

                        function _0x13E47() {
                            if (Neptq("#NJSar1").is(":checked")) {
                                Neptq("#" + NCSS + "lableAr").html(arOP1);
                                widthToHeight = 4 / 3
                            } else {
                                if (Neptq("#NJSar2").is(":checked")) {
                                    Neptq("#" + NCSS + "lableAr").html(arOP2);
                                    widthToHeight = 8 / 7
                                } else {
                                    if (Neptq("#NJSar3").is(":checked")) {
                                        Neptq("#" + NCSS + "lableAr").html(arOP3);
                                        widthToHeight = 16 / 9
                                    } else {
                                        if (NepEmuAR === "4:3") {
                                            Neptq("#NJSar1").prop("checked", true);
                                            Neptq("#" + NCSS + "lableAr").html(arOP1);
                                            widthToHeight = 4 / 3
                                        } else {
                                            if (NepEmuAR === "8:7") {
                                                Neptq("#NJSar2").prop("checked", true);
                                                Neptq("#" + NCSS + "lableAr").html(arOP2);
                                                widthToHeight = 8 / 7
                                            } else {
                                                if (NepEmuAR === "16:9") {
                                                    Neptq("#NJSar3").prop("checked", true);
                                                    Neptq("#" + NCSS + "lableAr").html(arOP3);
                                                    widthToHeight = 16 / 9
                                                } else {
                                                    Neptq("#NJSar1").prop("checked", true);
                                                    Neptq("#" + NCSS + "lableAr").html(arOP1);
                                                    widthToHeight = 4 / 3
                                                }
                                            }
                                        }
                                    }
                                }
                            };
                            var _0x13E1B = Neptq("#" + NCSS + "display");
                            var _0x13E47 = Neptq("#" + NCSS + "Neptun");
                            var _0x13E9F = _0x13E47.width();
                            var _0x13E73 = _0x13E47.height();
                            var _0x13ECB = _0x13E9F / _0x13E73;
                            _0x13E9F = _0x13E73 * widthToHeight;
                            _0x13E1B[0].style.width = _0x13E9F + "px"
                        }
                        Neptq("#" + NCSS + "VmenuNjs").click(function() {
                            if (Neptq(this).attr("data-click-state") == 0) {
                                Neptq(this).attr("data-click-state", 1);
                                Neptq("#" + NCSS + "videoSettings").css("display", "block");
                                Neptq("#" + NCSS + "videoSettings").focus()
                            } else {
                                Neptq(this).attr("data-click-state", 0);
                                Neptq("#" + NCSS + "videoSettings").css("display", "none")
                            }
                        });
                        Neptq("#" + NCSS + "display , #" + NCSS + "emul-display").click(function() {
                            Neptq("#" + NCSS + "videoSettings").css("display", "none");
                            Neptq("#" + NCSS + "VmenuNjs").attr("data-click-state", 0)
                        });

                        function _0x13F23() {
                            Neptune.ccall("yytrd9852hhf", "x7ooiujgfgda"[1]);
                            if (NeptunP === "sega" && load_asm === true || NeptunP === "segaCD" && load_asm || NeptunP === "segaMS" && load_asm === true || NeptunP === "segaGG" && load_asm === true || NeptunP === "sega32x") {
                                RA.context.close();
                                Neptune.ccall("ioiyttr87954", "x7ooiujgfgda"[1])
                            } else {
                                if (Neptq(" #NJSshaders1").is(":checked")) {
                                    if (NeptunP === "nes" || NeptunP === "lynx" || NeptunP === "atari2600" || NeptunP === "atari7800") {} else {
                                        Neptune.ccall("ytrdvbuj4578", "x7ooiujgfgda"[1]);
                                        Neptune.ccall("utyrrggdssc7", "x7ooiujgfgda"[1])
                                    }
                                } else {
                                    if (Neptq("#NJSshaders6").is(":checked")) {
                                        if (NeptunP === "nes" || NeptunP === "lynx" || NeptunP === "atari2600" || NeptunP === "atari7800") {} else {
                                            Neptune.ccall("ytrdvbuj4578", "x7ooiujgfgda"[1]);
                                            Neptune.ccall("iomnvffrt417", "x7ooiujgfgda"[1])
                                        }
                                    } else {
                                        if (Neptq(" #NJSshaders2 , #NJSshaders3 , #NJSshaders4 , #NJSshaders5 ").is(":checked")) {} else {
                                            Neptune.ccall("ytrdvbuj4578", "x7ooiujgfgda"[1])
                                        }
                                    }
                                }
                            }
                        }

                        function _0x141E3() {
                            popset = 1;
                            Neptq("#" + NCSS + "Neptun").attr("style", "width: 100% !important");
                            var _0x13E1B = function(_0x13E1B) {
                                switch (_0x13E1B.keyCode) {
                                    case 37:
                                        ;
                                    case 39:
                                        ;
                                    case 38:
                                        ;
                                    case 40:
                                        ;
                                    case 32:
                                        _0x13E1B.preventDefault();
                                        break;
                                    default:
                                        break
                                }
                            };
                            Neptq(document).mouseup(function(_0x13E73) {
                                var _0x13E47 = Neptq("#" + NCSS + "Neptun");
                                var _0x13E9F = Neptq("." + NCSS + "nep_swap_disc").attr("data-swap");
                                if (!_0x13E47.is(_0x13E73.target) && _0x13E47.has(_0x13E73.target).length === 0) {
                                    if (MultiCD == true) {
                                        if (_0x13E9F == 1 && ChangeDisc > 0) {} else {
                                            if (Neptq("." + NCSS + "emul-pause").css("display") === "block") {} else {
                                                Neptune.ccall("yytrd9852hhf", "x7ooiujgfgda"[1])
                                            }
                                        }
                                    } else {
                                        if (Neptq("." + NCSS + "emul-pause").css("display") === "block") {} else {
                                            Neptune.ccall("yytrd9852hhf", "x7ooiujgfgda"[1])
                                        }
                                    };
                                    Neptune.ccall("trgfsdsse879", "x7ooiujgfgda"[1]);
                                    window.removeEventListener("keydown", _0x13E1B, false)
                                }
                            });
                            Neptq("." + NCSS + "emul-pause").click(function() {
                                Neptune.ccall("terwq7895412", "x7ooiujgfgda"[1]);
                                Neptune.ccall("trgfsdsse879", "x7ooiujgfgda"[1]);
                                document.getElementById(NCSS + "display").focus();
                                window.addEventListener("keydown", _0x13E1B, false);
                                RA.context.close();
                                Neptune.ccall("axiop55x2218", "x7ooiujgfgda"[1])
                            });

                            function _0x13EF7() {
                                Neptq("." + NCSS + "nep_save_game").addClass("" + NCSS + "active_info");
                                var _0x13E1B = setTimeout(function() {
                                    Neptq("." + NCSS + "nep_save_game").removeClass("" + NCSS + "active_info")
                                }, 2000);
                                Neptune.ccall("trgfsdsse879", "x7ooiujgfgda"[1]);
                                return Neptune.ccall("x7ooiujgfgda", "x7ooiujgfgda"[1])
                            }

                            function _0x13E47() {
                                Neptq("." + NCSS + "nep_load_game").addClass("" + NCSS + "active_info");
                                var _0x13E1B = setTimeout(function() {
                                    Neptq("." + NCSS + "nep_load_game").removeClass("" + NCSS + "active_info")
                                }, 2000);
                                return Neptune.ccall("reyuyuyih897", "x7ooiujgfgda"[1])
                            }

                            function _0x13ECB() {
                                return Neptune.ccall("trgfsdsse879", "x7ooiujgfgda"[1])
                            }
                            Neptq("." + NCSS + "NEPicon-restart").click(function _0x13E9F() {
                                Neptq("." + NCSS + "nep_reset_game").addClass("" + NCSS + "active_info");
                                var _0x13E1B = setTimeout(function() {
                                    Neptq("." + NCSS + "nep_reset_game").removeClass("" + NCSS + "active_info")
                                }, 2000);
                                return Neptune.ccall("x74215uytrfs", "x7ooiujgfgda"[1])
                            });

                            function _0x13E73() {
                                console.log("this function");
                                if (Neptq("." + NCSS + "emul-pause").css("display") === "block") {} else {}
                            }
                            if (NeptunP === "sega32x") {
                                Neptune.FS_createFolder("/", "home", true, true);
                                Neptune.FS_createFolder("/home", "emscripten", true, true)
                            } else {
                                FS.createFolder("/home/web_user", ".config", true, true);
                                FS.createFolder("/home/web_user/.config", "retroarch", true, true)
                            };
                            FS.createFolder("/", "webdata", true, true);
                            FS.createFolder("/webdata", "save", true, true);
                            FS.createFolder("/webdata", "state", true, true);
                            FS.mount(IDBFS, {
                                root: "/"
                            }, "/webdata/state/");
                            if (NeptunP === "psx" && rometipe === "zip" || NeptunP === "segaCD" || NeptunP === "tg16CD" || NeptunP === "3do" || NeptunP === "sega_saturn") {
                                _0x14083()
                            } else {
                                if (NeptunP === "neogeo") {
                                    _0x140AF()
                                } else {
                                    _0x13FFF()
                                }
                            };
                            if (Neptq("#" + NCSS + "Neptun").length) {
                                if (NJSerrorEvent === true) {}
                            }
                        }

                        function _0x13F7B(_0x13E1B, _0x13E47) {
                            if (_0x13E1B == 0) {
                                return "0 Bytes"
                            };
                            var _0x13ECB = 1024,
                                _0x13E73 = _0x13E47 || 2,
                                _0x13EF7 = ["Bytes", "KB", "MB", "GB", "TB", "PB", "EB", "ZB", "YB"],
                                _0x13E9F = Math.floor(Math.log(_0x13E1B) / Math.log(_0x13ECB));
                            return parseFloat((_0x13E1B / Math.pow(_0x13ECB, _0x13E9F)).toFixed(_0x13E73)) + " " + _0x13EF7[_0x13E9F]
                        }
                        var _0x1418B = Neptq("#" + NCSS + "progressstate");
                        if (Neptq("#JPLang").is(":checked")) {
                            var _0x141B7 = gameUrlJP
                        } else {
                            if (Neptq("#RUSLang").is(":checked")) {
                                var _0x141B7 = gameUrlRus
                            } else {
                                var _0x141B7 = gameUrl
                            }
                        };

                        function _0x14083(_0x13E1B) {
                            if (window.BrowserFS == undefined) {
                                HtmlError();
                                return false
                            } else {
                                var _0x13E47 = new XMLHttpRequest();
                                _0x13E47.open("GET", gameUrl, true);
                                _0x13E47.responseType = "arraybuffer";
                                Neptq("#" + NCSS + "progressbar").css("display", "block");
                                _0x13E47.onreadystatechange = function() {
                                    if (_0x13E47.status == 200) {
                                        _0x13E47.addEventListener("progress", function(_0x13E73) {
                                            if (_0x13E73.lengthComputable) {
                                                var _0x13E9F = _0x13E1B ? _0x13E1B : _0x13E73.total;
                                                var _0x13F23 = _0x13F7B(_0x13E9F);
                                                var _0x13ECB = _0x13F7B(_0x13E73.loaded % _0x13E9F);
                                                Neptq("." + NCSS + "loader_emu").html("" + _0x13F23 + "/" + _0x13ECB + "");
                                                _0x13E47.onload = function() {
                                                    var _0x13E73 = _0x13E47.response;
                                                    var _0x13E1B = BrowserFS.BFSRequire("buffer").Buffer;
                                                    var _0x13ECB = new _0x13E1B(this.response);
                                                    var _0x13E9F;
                                                    FS.createFolder("/", "game", false, false);
                                                    BrowserFS.FileSystem.ZipFS.computeIndex(_0x13ECB, function(_0x13FFF, _0x13FD3) {
                                                        var _0x13F7B = new BrowserFS.FileSystem.ZipFS(_0x13FFF);
                                                        BrowserFS.initialize(_0x13F7B);
                                                        var _0x13E73 = _0x13FFF.directoryEntries;
                                                        for (var _0x13F4F in _0x13E73) {
                                                            _0x13E9F = _0x13E73[_0x13F4F]["_filename"];
                                                            if (NeptunP === "3do") {
                                                                var _0x13FA7 = _0x13E9F.match(/.iso/i)
                                                            } else {
                                                                var _0x13FA7 = _0x13E9F.match(/.cue/i)
                                                            };
                                                            if (_0x13FA7 === null) {} else {
                                                                var _0x13EF7 = _0x13FA7.input.split(".");
                                                                var _0x13ECB = "." + _0x13EF7[_0x13EF7.length - 1] + "";
                                                                var _0x13F23 = _0x13FA7.input.indexOf(_0x13ECB);
                                                                RomTitleCD = _0x13FA7.input.substring(0, _0x13F23 != -1 ? _0x13F23 : _0x13FA7.input.length);
                                                                bootRomeCD = RomTitleCD + _0x13ECB;
                                                                GetsaveName = RomTitleCD;
                                                                var _0x13E47 = RomTitleCD.split("/");
                                                                game = _0x13E47[_0x13E47.length - 1]
                                                            }
                                                        };
                                                        var _0x13E1B = new BrowserFS.EmscriptenFS();
                                                        FS.mount(_0x13E1B, {
                                                            root: "/"
                                                        }, "/game")
                                                    });
                                                    Neptq("." + NCSS + "loader_emu").html(EndEmuleNote);
                                                    _0x13FA7(_0x13E73, bootRome, NeptunP, aspect_ratio)
                                                };
                                                var _0x13EF7 = Math.ceil(_0x13E73.loaded / _0x13E73.total * 100);
                                                Neptq("#" + NCSS + "progressstate").css("width", "" + _0x13EF7 + "%")
                                            } else {
                                                _0x13E47.onload = function() {
                                                    var _0x13E47 = this.response;
                                                    var _0x13E73 = new Uint8Array(_0x13E47);
                                                    var _0x13E1B = BrowserFS.BFSRequire("buffer").Buffer;
                                                    var _0x13E9F = new _0x13E1B(_0x13E47);
                                                    FS.createFolder("/", "game", false, false);
                                                    BrowserFS.FileSystem.ZipFS.computeIndex(_0x13E9F, function(_0x13FD3) {
                                                        var _0x13F4F = new BrowserFS.FileSystem.ZipFS(_0x13FD3);
                                                        BrowserFS.initialize(_0x13F4F);
                                                        var _0x13E73 = _0x13FD3.directoryEntries;
                                                        for (var _0x13F23 in _0x13E73) {
                                                            filenames = _0x13E73[_0x13F23]["_filename"];
                                                            if (NeptunP === "3do") {
                                                                var _0x13FA7 = filenames.match(/.iso/i)
                                                            } else {
                                                                var _0x13FA7 = filenames.match(/.cue/i)
                                                            };
                                                            if (_0x13FA7 === null) {} else {
                                                                var _0x13ECB = _0x13FA7.input.split(".");
                                                                var _0x13E9F = "." + _0x13ECB[_0x13ECB.length - 1] + "";
                                                                var _0x13EF7 = _0x13FA7.input.indexOf(_0x13E9F);
                                                                var _0x13F7B = _0x13FA7.input.substring(0, _0x13EF7 != -1 ? _0x13EF7 : _0x13FA7.input.length);
                                                                bootRomeCD = _0x13F7B + _0x13E9F;
                                                                var _0x13E47 = _0x13F7B.split("/");
                                                                game = _0x13E47[_0x13E47.length - 1]
                                                            }
                                                        };
                                                        FS.mount(new BrowserFS.EmscriptenFS(), {
                                                            root: "/"
                                                        }, "/game")
                                                    });
                                                    Neptq("." + NCSS + "loader_emu").html(EndEmuleNote);
                                                    _0x13FA7(_0x13E47, bootRome, NeptunP, aspect_ratio)
                                                }
                                            }
                                        })
                                    } else {
                                        Neptq("." + NCSS + "game-load").html("Download error")
                                    }
                                };
                                _0x13E47.send(null)
                            }
                        }

                        function _0x140AF(_0x13E47) {
                            var _0x13E73 = new XMLHttpRequest();
                            _0x13E73.open("GET", neogeoBios, true);
                            _0x13E73.responseType = "arraybuffer";
                            Neptq("#" + NCSS + "progressbar").css("display", "block");
                            _0x13E73.onreadystatechange = function() {
                                if (_0x13E73.status == 200) {
                                    _0x13E73.addEventListener("progress", function(_0x13E9F) {
                                        if (_0x13E9F.lengthComputable) {
                                            var _0x13ECB = _0x13E47 ? _0x13E47 : _0x13E9F.total;
                                            var _0x13F4F = _0x13F7B(_0x13ECB);
                                            var _0x13EF7 = _0x13F7B(_0x13E9F.loaded % _0x13ECB);
                                            Neptq("." + NCSS + "loader_emu").html("" + _0x13F4F + "/" + _0x13EF7 + "");
                                            _0x13E73.onload = function() {
                                                FS.createDataFile("/", "neogeo.zip", new Uint8Array(this.response), true, true);
                                                _0x13E1B()
                                            };
                                            var _0x13F23 = Math.ceil(_0x13E9F.loaded / _0x13E9F.total * 100);
                                            Neptq("#" + NCSS + "progressstate").css("width", "" + _0x13F23 + "%")
                                        } else {
                                            _0x13E73.onload = function() {
                                                FS.createDataFile("/", "neogeo.zip", new Uint8Array(this.response), true, true);
                                                _0x13E1B()
                                            }
                                        }
                                    })
                                } else {
                                    Neptq("." + NCSS + "game-load").html("Download bios file error")
                                }
                            };

                            function _0x13E1B(_0x13E1B) {
                                _0x13E73.open("GET", _0x141B7, true);
                                _0x13E73.responseType = "arraybuffer";
                                Neptq("#" + NCSS + "progressbar").css("display", "block");
                                _0x13E73.onreadystatechange = function() {
                                    if (_0x13E73.status == 200) {
                                        _0x13E73.addEventListener("progress", function(_0x13E47) {
                                            if (_0x13E47.lengthComputable) {
                                                var _0x13E9F = _0x13E1B ? _0x13E1B : _0x13E47.total;
                                                var _0x13F23 = _0x13F7B(_0x13E9F);
                                                var _0x13ECB = _0x13F7B(_0x13E47.loaded % _0x13E9F);
                                                Neptq("." + NCSS + "loader_emu").html("" + _0x13F23 + "/" + _0x13ECB + "");
                                                _0x13E73.onload = function() {
                                                    var _0x13E1B = this.response;
                                                    Neptq("." + NCSS + "loader_emu").html(EndEmuleNote);
                                                    _0x13FA7(_0x13E1B, bootRome, NeptunP, EmuN64air, fba_unibios, fba_cpu)
                                                };
                                                var _0x13EF7 = Math.ceil(_0x13E47.loaded / _0x13E47.total * 100);
                                                Neptq("#" + NCSS + "progressstate").css("width", "" + _0x13EF7 + "%")
                                            } else {
                                                _0x13E73.onload = function() {
                                                    var _0x13E1B = this.response;
                                                    Neptq("." + NCSS + "loader_emu").html(EndEmuleNote);
                                                    _0x13FA7(_0x13E1B, bootRome, NeptunP, EmuN64air, fba_unibios, fba_cpu)
                                                }
                                            }
                                        })
                                    } else {
                                        Neptq("." + NCSS + "game-load").html("Download error")
                                    }
                                };
                                _0x13E73.send(null)
                            }
                            _0x13E73.send(null)
                        }

                        function _0x13FFF(_0x13E1B) {
                            var _request = new XMLHttpRequest();
                            _request.open("GET", _0x141B7, true);
                            _request.responseType = "arraybuffer";
                            Neptq("#" + NCSS + "progressbar").css("display", "block");
                            _request.onreadystatechange = function() {
                                if (_request.status == 200) {
                                    _request.addEventListener("progress", function(_0x13E73) {
                                        if (_0x13E73.lengthComputable) {
                                            var _0x13E9F = _0x13E1B ? _0x13E1B : _0x13E73.total;
                                            var _0x13F23 = _0x13F7B(_0x13E9F);
                                            var _0x13ECB = _0x13F7B(_0x13E73.loaded % _0x13E9F);
                                            Neptq("." + NCSS + "game-load").html("" + _0x13F23 + " / " + _0x13ECB + "");
                                            _request.onload = function() {
                                                var _0x13E1B = this.response;
                                                Neptq("." + NCSS + "loader_emu").html(EndEmuleNote);
                                                _0x13FA7(_0x13E1B, bootRome, NeptunP, EmuN64air, fba_unibios, fba_cpu);
                                                Neptq("." + NCSS + "loader_emu").html(EndEmuleNote)
                                            };
                                            var _0x13EF7 = Math.ceil(_0x13E73.loaded / _0x13E73.total * 100);
                                            Neptq("#" + NCSS + "progressstate").css("width", "" + _0x13EF7 + "%")
                                        } else {
                                            _request.onload = function() {
                                                Neptq("." + NCSS + "loader_emu").html(EndEmuleNote);
                                                _0x13FA7(this.response, bootRome, NeptunP, EmuN64air, fba_unibios, fba_cpu)
                                            }
                                        }
                                    })
                                } else {
                                    Neptq("." + NCSS + "game-load").html("Download error")
                                }
                            };
                            _request.send(null)
                        }

                        function _0x13FA7(_0x13E73, _0x13F23, _0x13F4F, _0x13E9F, _0x13EF7, _0x13ECB) {
                            if (_0x13F4F === "sega32x" || _0x13F4F === "sega32X") {
                                Neptune.FS_createFolder("/home/emscripten", "retroarch", true, true);
                                Neptune.FS_createFolder("/home/emscripten/retroarch", "userdata", true, true)
                            } else {
                                Neptune.FS_createFolder("/home/web_user", "retroarch", true, true);
                                Neptune.FS_createFolder("/home/web_user/retroarch", "userdata", true, true);
                                Neptune.FS_createFolder("/home/web_user/retroarch/userdata/", "retroarch", true, true)
                            };
                            var _0x13E1B = "input_exit_emulator = nul\nvideo_context_driver=emscripten\nvideo_driver = gl\ninput_driver = rwebinput\n";
                            var _0x13E47 = "";
                            if (xboxOne === true) {
                                _0x13E1B += "input_player1_select_btn = 7\ninput_player1_select_btn = 7\ninput_player1_start_btn = 8\ninput_player1_l2_axis = +4\n";
                                if (_0x13F4F === "n64") {
                                    _0x13E1B += "input_player1_l_btn = 7\ninput_player1_l3_btn = 7\ninput_player1_l2_btn = 9\ninput_player1_l2_axis = +4\naudio_latency = 512\n"
                                } else {
                                    _0x13E1B += "input_player1_r3_btn = 6\ninput_player1_l_btn = 9\ninput_player1_l2_btn = 5\ninput_player1_l3_btn = 7\naudio_latency = 512\n"
                                }
                            } else {
                                if (_0x13F4F === "3do" || _0x13F4F === "psx" || _0x13F4F === "atari_jaguar") {
                                    _0x13E1B += "audio_latency = 512\n"
                                } else {
                                    if (_0x13F4F === "nds" || _0x13F4F === "sega_saturn") {
                                        _0x13E1B += "audio_latency = 512\n";
                                        _0x13E1B += "audio_rate_control_delta = 0.010000\n";
                                        _0x13E1B += "audio_max_timing_skew = 0.100000\n"
                                    } else {
                                        if (_0x13F4F === "cps3" || _0x13F4F === "wswan") {
                                            _0x13E1B += "audio_latency = 512\n"
                                        } else {
                                            _0x13E1B += "audio_latency = 256\n"
                                        }
                                    }
                                }
                            };
                            _0x13E1B += "savestate_directory = /webdata/state\ninput_save_state = nul\ninput_load_state = nul\ninput_audio_mute = nul\n";
                            if (_0x13F4F === "tg16CD" || _0x13F4F === "psx" || _0x13F4F === "wswan") {
                                _0x13E1B += "video_shared_context = true\n"
                            };
                            _0x13E1B += "input_rewind = nul\ninput_movie_record_toggle = nul\nvideo_hard_sync_frames = 3\nvideo_hard_sync = true\n";
                            if (_0x13F4F === "nes" || _0x13F4F === "sega" && load_asm === true || _0x13F4F === "segaCD" && load_asm || _0x13F4F === "segaMS" && load_asm === true || _0x13F4F === "segaGG" && load_asm === true || _0x13F4F === "sega32x") {} else {
                                if (Neptq(" #NJSshaders2 , #NJSshaders3 , #NJSshaders4 , #NJSshaders5 ").is(":checked")) {} else {
                                    _0x13E1B += "video_filter = :/filters/video/Blargg_NTSC_SNES_Composite.filt\n"
                                }
                            };
                            if (Neptq("#NJSshaders1").is(":checked")) {
                                infoInner = shadersOP1;
                                if (_0x13F4F === "nes" || _0x13F4F === "lynx" || _0x13F4F === "atari2600" || _0x13F4F === "atari7800") {
                                    _0x13E1B += "video_filter = :/filters/video/Scale2x.filt\n"
                                } else {
                                    _0x13E1B += "video_filter = :/filters/video/Blargg_NTSC_SNES_Composite.filt\n"
                                }
                            } else {
                                if (Neptq("#NJSshaders2").is(":checked")) {
                                    infoInner = shadersOP2;
                                    _0x13E1B += "video_filter = :/filters/video/Blargg_NTSC_SNES_Composite.filt\n";
                                    _0x13E47 += "nestopia_blargg_ntsc_filter = composite\n"
                                } else {
                                    if (Neptq("#NJSshaders3").is(":checked")) {
                                        infoInner = shadersOP3;
                                        _0x13E1B += "video_filter = :/filters/video/Blargg_NTSC_SNES_S-Video.filt\n";
                                        _0x13E47 += "nestopia_blargg_ntsc_filter = svideo\n"
                                    } else {
                                        if (Neptq("#NJSshaders4").is(":checked")) {
                                            infoInner = shadersOP4;
                                            _0x13E1B += "video_filter = :/filters/video/Blargg_NTSC_SNES_monochrome.filt\n";
                                            _0x13E47 += "nestopia_blargg_ntsc_filter = monochrome\n"
                                        } else {
                                            if (Neptq("#NJSshaders5").is(":checked")) {
                                                infoInner = shadersOP5;
                                                _0x13E1B += "video_filter = :/filters/video/Blargg_NTSC_SNES_RF.filt\n";
                                                _0x13E47 += "nestopia_blargg_ntsc_filter = rgb\n"
                                            } else {
                                                if (Neptq("#NJSshaders6").is(":checked")) {
                                                    infoInner = shadersOP6;
                                                    if (_0x13F4F === "nes" || _0x13F4F === "lynx" || _0x13F4F === "atari2600" || _0x13F4F === "atari7800") {
                                                        _0x13E1B += "video_filter = :/filters/video/Phosphor2x.filt\n"
                                                    } else {
                                                        _0x13E1B += "video_filter = :/filters/video/Blargg_NTSC_SNES_Composite.filt\n"
                                                    }
                                                } else {
                                                    Neptq("#NJSshaders7").prop("checked", true);
                                                    infoInner = shadersOP7
                                                }
                                            }
                                        }
                                    }
                                }
                            };
                            Neptq("#" + NCSS + "lableShader").html(infoInner);
                            _0x13E1B += "video_vsync = true\n";
                            _0x13E1B += "video_context_driver = emscripten\n";
                            _0x13E1B += "video_smooth = false\n";
                            if (_0x13F4F === "neogeo" || _0x13F4F === "arcade" || _0x13F4F === "cps1" || _0x13F4F === "cps2" || _0x13F4F === "cps3" || _0x13F4F === "snes" || _0x13F4F === "gba") {
                                _0x13E1B += "aspect_ratio_index = 0\n"
                            } else {
                                _0x13E1B += "aspect_ratio_index = 21\n"
                            };
                            _0x13E1B += "input_reset = nul\ninput_joypad_driver = nul\nvideo_swap_interval = 1\ninput_frame_advance = nul\ninput_slowmotion = nul\ninput_pause_toggle = nul\ninput_menu_toggle = nul\ninput_toggle_fullscreen = nul\nfastforward_ratio = 1.000000\n";
                            if (Ndebag == "neptunjsdaltergg") {} else {
                                _0x13E1B += "video_font_enable = false\n"
                            };
                            _0x13E1B += "fps_show = false\nauto_screenshot_filename = false\ninput_screenshot = nul\nmenu_entry_hover_color = ffffffff\nmenu_title_color = ffffffff\ninput_toggle_fast_forward = nul\nsavefile_directory = /webdata/save\nsystem_directory = /content\nrgui_config_directory = /dev\ninput_remapping_directory = /data\ncheat_database_path = /data\nscreenshot_directory =/\n";
                            _0x13E47 += "pcsx_rearmed_duping_enable = enabled\npcsx_rearmed_spu_reverb = disabled\npcsx_rearmed_spu_interpolation = simple\n";
                            _0x13E1B += "input_player1_menu_toggle_btn = nul\ninput_autodetect_enable = false\nvideo_scale_integer = false\ninput_max_users = 4\naudio_driver = rwebaudio\n";
                            if (_0x13F4F === "psx") {
                                _0x13E1B += "input_disk_eject_toggle = end\n"
                            };
                            if (_0x13F4F === "n64" || _0x13F4F === "nes" || _0x13F4F === "wswan" || _0x13F4F === "vboy" || _0x13F4F === "segaMS" || _0x13F4F === "segaGG" || _0x13F4F === "gboy" || _0x13F4F === "gba" || _0x13F4F === "tg16" || _0x13F4F === "tg16CD" || _0x13F4F === "lynx") {
                                _0x13E1B += "input_player1_b = capslock\ninput_player1_y = s\ninput_player1_a = tab\ninput_player1_x = x\ninput_player2_b = m\ninput_player2_y = p\ninput_player2_a = j\ninput_player2_x = pageup\ninput_player3_b = keypad4\ninput_player3_y = minus\ninput_player3_a = keypad3\ninput_player3_x = equals\ninput_player4_b = num1\ninput_player4_y = num8\ninput_player4_a = num0\ninput_player4_x = num9\n"
                            } else {
                                _0x13E1B += "input_player1_b = tab\ninput_player1_y = capslock\ninput_player1_a = s\ninput_player1_x = x\ninput_player2_b = j\ninput_player2_y = m\ninput_player2_a = p\ninput_player2_x = pageup\ninput_player3_b = keypad3\ninput_player3_y = keypad4\ninput_player3_a = minus\ninput_player3_x = equals\ninput_player4_b = num0\ninput_player4_y = num1\ninput_player4_a = num8\ninput_player4_x = num9\n"
                            };
                            _0x13E1B += "input_player1_select = shift\ninput_player1_start = ctrl\ninput_player1_up = q\ninput_player1_down = a\ninput_player1_left = z\ninput_player1_right = w\ninput_player1_l = alt\ninput_player1_r = e\ninput_player1_l2 = d\ninput_player1_r2 = c\ninput_player1_l3 = r\ninput_player1_r3 = f\ninput_player1_l_x_plus = v\ninput_player1_l_x_minus = t\ninput_player1_l_y_plus = b\ninput_player1_l_y_minus = g\ninput_player1_r_x_plus = y\ninput_player1_r_x_minus = h\ninput_player1_r_y_plus = u\ninput_player1_r_y_minus = n\ninput_player2_select = i\ninput_player2_start = k\ninput_player2_up = comma\ninput_player2_down = o\ninput_player2_left = l\ninput_player2_right = period\ninput_player2_l = slash\ninput_player2_r = leftbracket\ninput_player2_l2 = quote\ninput_player2_r2 = rightbracket\ninput_player2_l3 = tilde\ninput_player2_r3 = space\ninput_player2_l_x_plus = backslash\ninput_player2_l_x_minus = insert\ninput_player2_l_y_plus = backspace\ninput_player2_l_y_minus = pause\ninput_player2_r_x_plus = pagedown\ninput_player2_r_x_minus = enter\ninput_player2_r_y_plus = keypad2\ninput_player2_r_y_minus = keypad1\ninput_player3_select = keypad5\ninput_player3_start = keypad6\ninput_player3_up = keypad7\ninput_player3_down = keypad8\ninput_player3_left = keypad9\ninput_player3_right = keypad0\ninput_player3_l = f1\ninput_player3_r = f2\ninput_player3_l2 = f3\ninput_player3_r2 = f4\ninput_player3_l_x_plus = f5\ninput_player3_l_x_minus = f6\ninput_player3_l_y_plus = f8\ninput_player3_l_y_minus = f7\ninput_player3_r_x_plus = f9\ninput_player3_r_x_minus = f10\ninput_player3_r_y_plus = f12\ninput_player3_r_y_minus = f11\ninput_player4_select = num2\ninput_player4_start = num3\ninput_player4_up = num4\ninput_player4_down = num5\ninput_player4_left = num6\ninput_player4_right = num7\ninput_player4_l = home\ninput_player4_r = divide\ninput_player4_l2 = multiply\ninput_player4_r2 = subtract\ninput_player4_l_x_plus = right\ninput_player4_l_x_minus = left\ninput_player4_l_y_plus = down\ninput_player4_l_y_minus = up\ninput_player4_r_x_plus = tilde\ninput_player4_r_x_minus = space\ninput_player4_r_y_plus = escape\ninput_player4_r_y_minus = end\n";
                            if (_0x13F4F === "psx" || _0x13F4F === "n64") {
                                _0x13E1B += "input_player1_analog_dpad_mode = 0\n";
                                _0x13E1B += "input_player2_analog_dpad_mode = 0\n";
                                _0x13E1B += "input_player3_analog_dpad_mode = 0\n";
                                _0x13E1B += "input_player4_analog_dpad_mode = 0\n"
                            } else {
                                _0x13E1B += "input_player1_analog_dpad_mode = 1\n";
                                _0x13E1B += "input_player2_analog_dpad_mode = 1\n";
                                _0x13E1B += "input_player3_analog_dpad_mode = 1\n";
                                _0x13E1B += "input_player4_analog_dpad_mode = 1\n"
                            };
                            Neptq("." + NCSS + "emul-display").on("click", function() {
                                Neptq("#" + NCSS + "VmenuNjs").attr("data-click-state", 0);
                                Neptq("#" + NCSS + "videoSettings").css("display", "none")
                            });
                            Neptq("." + NCSS + "selectOP").change(function() {
                                var _0x13E1B = Neptq(this).children(":selected").attr("id");
                                if (Neptq("#" + _0x13E1B).is(":selected")) {
                                    if (Neptq("." + NCSS + "nep_numL").hasClass("" + NCSS + "active_info")) {} else {
                                        Neptq("." + NCSS + "nep_numL").addClass("" + NCSS + "active_info");
                                        var _0x13E47 = setTimeout(function() {
                                            Neptq("." + NCSS + "nep_numL").removeClass("" + NCSS + "active_info")
                                        }, 6000)
                                    }
                                }
                            });
                            Neptq("." + NCSS + "NJSchek").click(function() {
                                if (Neptq("." + NCSS + "nep_numL").hasClass("" + NCSS + "active_info")) {} else {
                                    Neptq("." + NCSS + "nep_numL").addClass("" + NCSS + "active_info");
                                    var _0x13E1B = setTimeout(function() {
                                        Neptq("." + NCSS + "nep_numL").removeClass("" + NCSS + "active_info")
                                    }, 6000)
                                }
                            });
                            if (_0x13F4F === "nes" || _0x13F4F === "lynx" || _0x13F4F === "atari2600" || _0x13F4F === "atari7800") {
                                Neptq("#NJSshaders1 ,#NJSshaders2 ,#NJSshaders3 ,#NJSshaders4 ,#NJSshaders5 ,#NJSshaders6 ,#NJSshaders7").click(function() {
                                    if (Neptq("." + NCSS + "nep_numL").hasClass("" + NCSS + "active_info")) {} else {
                                        Neptq("." + NCSS + "nep_numL").addClass("" + NCSS + "active_info");
                                        var _0x13E1B = setTimeout(function() {
                                            Neptq("." + NCSS + "nep_numL").removeClass("" + NCSS + "active_info")
                                        }, 6000)
                                    }
                                })
                            };
                            if (_0x13F4F === "nes") {
                                if (Neptq("#nesntsc_cpu").is(":selected")) {
                                    _0x13E47 += "nestopia_favored_system = ntsc\n"
                                };
                                if (Neptq("#nespal_cpu").is(":selected")) {
                                    _0x13E47 += "nestopia_favored_system = pal\n"
                                };
                                if (Neptq("#nesfamicom_cpu").is(":selected")) {
                                    _0x13E47 += "nestopia_favored_system = famicom\n"
                                };
                                if (Neptq("#nesdendy_cpu").is(":selected")) {
                                    _0x13E47 += "nestopia_favored_system = dendy\n"
                                };
                                if (Neptq("#nes_nolimit").is(":checked")) {
                                    _0x13E47 += "nestopia_nospritelimit = \"enabled\"\n"
                                }
                            };
                            if (_0x13F4F === "tg16" || _0x13F4F === "tg16CD") {
                                _0x13E47 += "pce_last_scanline = 227\n"
                            };
                            if (_0x13F4F === "sega" || _0x13F4F === "segaGG" || _0x13F4F === "segaMS") {
                                if (Neptq("#SEGAntsc_cpu").is(":selected")) {
                                    _0x13E47 += "genesis_plus_gx_region_detect = ntsc-u\n"
                                };
                                if (Neptq("#SEGApal_cpu").is(":selected")) {
                                    _0x13E47 += "genesis_plus_gx_region_detect = pal\n"
                                };
                                if (Neptq("#ggextra").is(":checked")) {
                                    _0x13E47 += "genesis_plus_gx_gg_extra = \"enabled\"\n"
                                }
                            };
                            if (_0x13F4F === "sega_saturn") {
                                if (Neptq("#SATframeskip").is(":selected")) {
                                    _0x13E47 += "yabause_frameskip = \"enabled\"\n"
                                };
                                _0x13E47 += "yabause_addon_cart = \"4M_ram\"\n";
                                if (Neptq("#hle_bios").is(":selected")) {
                                    _0x13E47 += "yabause_force_hle_bios = \"enabled\"\n"
                                }
                            };
                            if (_0x13F4F === "neogeo") {
                                _0x13E47 += "fba-cpu-speed-adjust = " + _0x13ECB + "\n";
                                _0x13E47 += "fba-unibios = " + _0x13EF7 + "\n"
                            };
                            if (_0x13F4F === "zx") {
                                _0x13E47 += "fuse_fast_load = disabled\n";
                                _0x13E47 += "fuse_load_sound = disabled\n"
                            };
                            if (_0x13F4F === "snes") {
                                if (Neptq("#snes_cpu1").is(":selected")) {
                                    _0x13E47 += "snes9x_next_overclock = \"40MHz\"\n"
                                };
                                if (Neptq("#snes_cpu2").is(":selected")) {
                                    _0x13E47 += "snes9x_next_overclock = \"60MHz\"\n"
                                };
                                if (Neptq("#snes_cpu3").is(":selected")) {
                                    _0x13E47 += "snes9x_next_overclock = \"80MHz\"\n"
                                };
                                if (Neptq("#snes_cpu4").is(":selected")) {
                                    _0x13E47 += "snes9x_next_overclock = \"100MHz\"\n"
                                }
                            };
                            if (_0x13F4F === "n64") {
                                _0x13E47 += "mupen64-pak1 = memory\n";
                                _0x13E47 += "mupen64-disable_expmem = enabled\n";
                                if (Neptq("#n64render1").is(":selected")) {
                                    _0x13E47 += "glupen64-43screensize = \"320x240\"\n";
                                    _0x13E47 += "glupen64-169screensize = \"640x360\"\n";
                                    _0x13E47 += "mupen64-screensize = \"320x240\"\n"
                                };
                                if (Neptq("#n64render2").is(":selected")) {
                                    _0x13E47 += "glupen64-43screensize = \"640x480\"\n";
                                    _0x13E47 += "glupen64-169screensize = \"960x540\"\n";
                                    _0x13E47 += "mupen64-screensize = \"640x360\"\n"
                                };
                                if (Neptq("#Accuracy2").is(":selected")) {
                                    _0x13E47 += "mupen64-gfxplugin-accuracy = medium\n"
                                };
                                if (Neptq("#Accuracy3").is(":selected")) {
                                    _0x13E47 += "mupen64-gfxplugin-accuracy = high\n"
                                };
                                if (Neptq("#Accuracy4").is(":selected")) {
                                    _0x13E47 += "mupen64-gfxplugin-accuracy = veryhigh\n"
                                };
                                if (Neptq("#n64render3").is(":selected")) {
                                    _0x13E47 += "glupen64-43screensize = \"960x720\"\n";
                                    _0x13E47 += "glupen64-169screensize = \"1280x720\"\n";
                                    _0x13E47 += "mupen64-screensize = \"960x720\"\n"
                                };
                                if (Neptq("#n64render4").is(":selected")) {
                                    _0x13E47 += "glupen64-43screensize = \"1280x960\"\n";
                                    _0x13E47 += "glupen64-169screensize = \"1920x1080\"\n";
                                    _0x13E47 += "mupen64-screensize = \"1280x960\"\n"
                                };
                                if (Neptq("#n64WH").is(":checked")) {
                                    _0x13E47 += "glupen64-aspect = 16:9\n";
                                    _0x13E47 += "mupen64-aspectratiohint = widescreen\n"
                                };
                                _0x13E47 += "glupen64-UseNativeResolutionFactor = 1x\n";
                                _0x13E47 += "glupen64-EnableCopyAuxiliaryToRDRAM = True\n";
                                _0x13E47 += "glupen64-EnableCopyColorFromRDRAM = True\n";
                                _0x13E47 += "glupen64-EnableFragmentDepthWrite = True\n";
                                _0x13E47 += "glupen64-EnableCopyDepthToRDRAM = On\n";
                                _0x13E47 += "glupen64-CorrectTexrectCoords = On\n"
                            };
                            if (_0x13F4F === "nds") {
                                if (Neptq("#NDSdisplay_type").is(":checked")) {
                                    _0x13E47 += "desmume_screens_layout = \"quick switch\""
                                };
                                if (Neptq("#NDSframeskip1").is(":selected")) {
                                    _0x13E47 += "desmume_frameskip = \"1\"\n"
                                };
                                if (Neptq("#NDSframeskip2").is(":selected")) {
                                    _0x13E47 += "desmume_frameskip = \"2\"\n"
                                };
                                if (Neptq("#NDSframeskip3").is(":selected")) {
                                    _0x13E47 += "desmume_frameskip = \"3\"\n"
                                };
                                if (Neptq("#NDSframeskip4").is(":selected")) {
                                    _0x13E47 += "desmume_frameskip = \"4\"\n"
                                }
                            };
                            if (_0x13F4F === "psx") {
                                if (Neptq("#gamepad_type").is(":checked")) {
                                    _0x13E47 += "pcsx_rearmed_pad1type = analog\n"
                                };
                                if (Neptq("#PSXframeskip1").is(":selected")) {
                                    _0x13E47 += "pcsx_rearmed_frameskip = \"1\"\n"
                                };
                                if (Neptq("#PSXframeskip2").is(":selected")) {
                                    _0x13E47 += "pcsx_rearmed_frameskip = \"2\"\n"
                                };
                                if (Neptq("#PSXframeskip3").is(":selected")) {
                                    _0x13E47 += "pcsx_rearmed_frameskip = \"3\"\n"
                                };
                                if (Neptq("#PSXframeskip4").is(":selected")) {
                                    _0x13E47 += "pcsx_rearmed_frameskip = \"4\"\n"
                                };
                                if (Neptq("#PSXregionPal").is(":selected")) {
                                    _0x13E47 += "pcsx_rearmed_region = \"PAL\"\n"
                                };
                                if (Neptq("#PSXregionNtsc").is(":selected")) {
                                    _0x13E47 += "pcsx_rearmed_region = \"NTSC\"\n"
                                }
                            };
                            if (_0x13F4F === "atari_jaguar") {
                                Neptq("." + NCSS + "NEPicon-save , ." + NCSS + "NEPicon-load , ." + NCSS + "NEPicon-ssmb , #" + NCSS + "NEPicon-down-save").css("display", "none");
                                _0x13E47 += " virtualjaguar_usefastblitter = enabled\n";
                                _0x13E47 += " virtualjaguar_doom_res_hack = enabled\n";
                                _0x13E47 += " virtualjaguar_bios = enabled\n"
                            };
                            if (_0x13F4F === "sega32x" || _0x13F4F === "sega32X") {
                                Neptune.FS_createDataFile("/home/emscripten/retroarch/userdata/", "retroarch.cfg", _0x13E1B, true, true);
                                Neptune.FS_createDataFile("/home/emscripten/retroarch/userdata/", "retroarch-core-options.cfg", _0x13E47, true, true)
                            } else {
                                Neptune.FS_createDataFile("/home/web_user/retroarch/userdata/", "retroarch.cfg", _0x13E1B, true, true);
                                Neptune.FS_createDataFile("/home/web_user/retroarch/userdata/", "retroarch-core-options.cfg", _0x13E47, true, true)
                            };
                            _0x1420F(_0x13E73, bootRome, _0x13F4F)
                        }

                        function _0x1420F(_0x13E47, _0x13E1B, _0x13FFF) {
                            var _0x13FA7 = window.indexedDB || window.webkitIndexedDB || window.mozIndexedDB || window.OIndexedDB || window.msIndexedDB,
                                _0x13F7B = window.IDBTransaction || window.webkitIDBTransaction || window.OIDBTransaction || window.msIDBTransaction,
                                _0x13E9F = 21;
                            var _0x1402B = _0x13FA7.open("/webdata/state");
                            _0x1402B.onsuccess = function(_0x13E47) {
                                if (this.result.objectStoreNames.length === 0) {} else {
                                    var _0x13E1B = this.result;
                                    if (_0x13FFF === "psx" || _0x13FFF === "segaCD" || _0x13FFF === "tg16CD" || _0x13FFF === "3do" || _0x13FFF === "sega_saturn") {
                                        var _0x13E73 = RomTitleCD
                                    } else {
                                        var _0x13E73 = game
                                    };
                                    var _0x13E73;
                                    var _0x13E9F = "/webdata/state/" + _0x13E73 + ".state";
                                    var _0x13EF7 = _0x13E1B.transaction(["FILE_DATA"], "readwrite");
                                    var _0x13ECB = _0x13EF7.objectStore("FILE_DATA");
                                    _0x13EF7.objectStore("FILE_DATA").get(_0x13E9F).onsuccess = function(_0x13E1B) {
                                        if (_0x13E1B.target.result === undefined) {} else {
                                            checkOldsave = 1;
                                            FS.syncfs(true, function() {
                                            })
                                        }
                                    }
                                }
                            };
                            _0x1402B.onerror = function() {};
                            if (
                                _0x13FFF === "segaCD" ||
                                _0x13FFF === "tg16CD" ||
                                _0x13FFF === "3do" ||
                                _0x13FFF === "psx" && rometipe === "zip" ||
                                _0x13FFF === "sega_saturn"
                            ) {
                                var _0x14083 = setTimeout(function() {
                                    Neptq("." + NCSS + "loader_emu").html(StartEmuleNote);
                                    Neptune.arguments[1] = "/game/" + bootRomeCD;
                                    Neptune.callMain(Neptune.arguments)
                                }, 2500)
                            } else {
                                var _0x13E73 = new Uint8Array(_0x13E47);
                                Neptq("." + NCSS + "loader_emu").html(StartEmuleNote);
                                Neptune.FS_createDataFile("/", _0x13E1B, _0x13E73, true, false);
                                Neptune.arguments[1] = "/" + _0x13E1B;
                                Neptune.callMain(Neptune.arguments)
                            };
                            Neptq("." + NCSS + "emu-ctr-bar").css("display", "block");
                            if (Neptq("#" + NCSS + "display").is(":focus")) {} else {
                                if (Neptq("." + NCSS + "emul-pause").css("display") === "block") {} else {
                                    Neptune.ccall("yytrd9852hhf", "x7ooiujgfgda"[1])
                                }
                            };
                            if (xboxOne === true) {
                                Neptq("#" + NCSS + "xboxDisplay").css("display", "block")
                            };
                            Neptq("." + NCSS + "NeptunContextMenu").insertAfter("CfullScreen");
                            Neptq(document).keyup(function(_0x13E1B) {
                                if (_0x13E1B.keyCode === 27) {
                                    Neptq("#" + NCSS + "display").removeClass("" + NCSS + "CfullScreen")
                                }
                            });
                            if (_0x13FFF === "nds") {} else {
                                var _0x13EF7 = Neptq("#" + NCSS + "display");
                                _0x13EF7.dblclick("mozfullscreenchange webkitfullscreenchange fullscreenchange", function() {
                                    this.fullScreenMode = !this.fullScreenMode;
                                    Neptq("#" + NCSS + "Neptun").attr("style", "width: 100% !important");
                                    _0x13F23()
                                })
                            };
                            Neptq("." + NCSS + "NEPfullS").click(function() {
                                Neptq("#" + NCSS + "Neptun").attr("style", "width: 100% !important");
                                _0x13F23()
                            });

                            function _0x13F23() {
                                if (window.innerHeight == Neptq("#" + NCSS + "Neptun").height()) {
                                    if (document.exitFullscreen) {
                                        document.exitFullscreen()
                                    } else {
                                        if (document.mozCancelFullScreen) {
                                            document.mozCancelFullScreen()
                                        } else {
                                            if (document.webkitCancelFullScreen) {
                                                document.webkitCancelFullScreen()
                                            }
                                        }
                                    };
                                    Neptq(".nep-icon-shrink").addClass("nep-icon-enlarge");
                                    Neptq(".nep-icon-enlarge").removeClass("nep-icon-shrink");
                                    var _0x13E1B = setTimeout(function() {
                                        _0x13FD3()
                                    }, 100);
                                    if (_0x13FFF === "sega32x" || _0x13FFF === "sega32X") {} else {
                                        RA.context.close();
                                        Neptune.ccall("axiop55x2218", "x7ooiujgfgda"[1])
                                    }
                                } else {
                                    docElm = document.getElementById("" + NCSS + "Neptun");
                                    if (docElm.requestFullscreen) {
                                        docElm.requestFullscreen()
                                    } else {
                                        if (docElm.mozRequestFullScreen) {
                                            docElm.mozRequestFullScreen()
                                        } else {
                                            if (docElm.webkitRequestFullScreen) {
                                                docElm.webkitRequestFullScreen(Element.ALLOW_KEYBOARD_INPUT)
                                            }
                                        }
                                    };
                                    var _0x13E1B = setTimeout(function() {
                                        _0x13FD3()
                                    }, 100);
                                    Neptq(".nep-icon-enlarge").addClass("nep-icon-shrink");
                                    Neptq(".nep-icon-shrink").removeClass("nep-icon-enlarge");
                                    if (_0x13FFF === "sega32x" || _0x13FFF === "sega32X") {} else {
                                        RA.context.close();
                                        Neptune.ccall("axiop55x2218", "x7ooiujgfgda"[1])
                                    }
                                }
                            }
                            Neptq(window).blur(function() {
                                if (MultiCD == true) {
                                    var _0x13E1B = Neptq("." + NCSS + "nep_swap_disc").attr("data-swap");
                                    if (_0x13E1B == 1 && ChangeDisc > 0) {} else {
                                        if (Neptq("." + NCSS + "emul-pause").css("display") === "block") {} else {
                                            Neptune.ccall("yytrd9852hhf", "x7ooiujgfgda"[1])
                                        }
                                    }
                                } else {
                                    if (Neptq("." + NCSS + "emul-pause").css("display") === "block") {} else {
                                        Neptune.ccall("yytrd9852hhf", "x7ooiujgfgda"[1])
                                    }
                                };
                                Neptune.ccall("trgfsdsse879", "x7ooiujgfgda"[1])
                            });
                            Neptq(function() {
                                var _0x13E1B = "";
                                if (Ndebag === "neptunjsdaltergg") {
                                    _0x13E1B = Neptq("#" + NCSS + "display")
                                } else {
                                    _0x13E1B = Neptq("#" + NCSS + "Neptun")
                                };
                                Neptq(_0x13E1B).nuContextMenu({
                                    hideAfterClick: true,
                                    callback: function(_0x13E47, _0x13E1B, _0x13E73) {
                                        if (_0x13E47 == 1) {
                                            callGpadUi()
                                        };
                                        if (_0x13E47 == 2) {
                                            return Neptune.ccall("yytrd9852hhf", "x7ooiujgfgda"[1])
                                        };
                                        if (_0x13E47 == 3) {
                                            Neptq("." + NCSS + "nep_Qsave_game").addClass("" + NCSS + "active_info");
                                            _0x13E73 = setTimeout(function() {
                                                Neptq("." + NCSS + "nep_Qsave_game").removeClass("" + NCSS + "active_info")
                                            }, 3000);
                                            Neptune.ccall("trgfsdsse879", "x7ooiujgfgda"[1]);
                                            document.getElementById("" + NCSS + "display").focus();
                                            Neptune.ccall("x7ooiujgfgda", "x7ooiujgfgda"[1]);
                                            return SMgetSave()
                                        };
                                        if (_0x13E47 == 4) {
                                            if (Neptq("." + NCSS + "last").length == 2 || checkOldsave === 1) {
                                                Neptq("." + NCSS + "nep_load_game").addClass("" + NCSS + "active_info");
                                                var _0x13E73 = setTimeout(function() {
                                                    Neptq("." + NCSS + "nep_load_game").removeClass("" + NCSS + "active_info")
                                                }, 2000);
                                                document.getElementById("" + NCSS + "display").focus();
                                                if (checkOldsave === 1) {
                                                    checkOldsave = 0;
                                                    Neptune.ccall("reyuyuyih897", "x7ooiujgfgda"[1]);
                                                    return SMgetSave()
                                                } else {
                                                    return Neptq("." + NCSS + "last").click()
                                                }
                                            }
                                        };
                                        if (_0x13E47 == 5) {
                                            Neptq("." + NCSS + "nep_reset_game").addClass(NCSS + "active_info");
                                            var _0x13E73 = setTimeout(function() {
                                                Neptq("." + NCSS + "nep_reset_game").removeClass(NCSS + "active_info")
                                            }, 2000);
                                            document.getElementById("" + NCSS + "display").focus();
                                            return Neptune.ccall("x74215uytrfs", "x7ooiujgfgda"[1])
                                        };
                                        if (_0x13E47 == 6) {
                                            _0x14057()
                                        };
                                        if (_0x13E47 == 9) {
                                            SSMUI()
                                        };
                                        if (_0x13E47 == 7) {
                                            window.location = "http://neptunjs.xyz/";
                                            target = "_blank"
                                        };
                                        if (_0x13E47 == 8) {
                                            _0x14133()
                                        }
                                    },
                                    menu: [{
                                        name: 1,
                                        title: controll,
                                        icon: "icon-gamepad"
                                    }, {
                                        name: 2,
                                        title: pauseEmu,
                                        icon: "icon-pause2"
                                    }, {
                                        name: 3,
                                        title: saveLangBar,
                                        icon: "icon-floppy-disk"
                                    }, {
                                        name: 4,
                                        title: loadLangBar,
                                        icon: "icon-upload3"
                                    }, {
                                        name: 5,
                                        title: restartLangBar,
                                        icon: "icon-spinner11"
                                    }, {
                                        name: 6,
                                        title: muteLangBar,
                                        icon: "icon-volume-high"
                                    }, {
                                        name: 7,
                                        title: conTitle,
                                        icon: "icon-terminal"
                                    }, {
                                        name: 8,
                                        title: makeScreenShot,
                                        icon: "icon-image"
                                    }, {
                                        name: 9,
                                        title: langSM,
                                        icon: "icon-folder-open"
                                    }]
                                });
                                if (location.hostname == "static.arcadespot.com") {
                                    Neptq("li[data-key='7']").css("display", "none")
                                };
                                if (_0x13FFF === "atari_jaguar") {
                                    Neptq("li[data-key='3'] , li[data-key='4'], li[data-key='9']").css("display", "none")
                                }
                            });
                            var _0x13ECB = Neptq("" + NepPlayer + "");
                            _0x13ECB.contextmenu(function() {
                                if (popset === 1) {
                                    var _0x13E9F = Neptq("." + NCSS + "NeptunContextMenu").width();
                                    var _0x13E1B = Neptq("." + NCSS + "NeptunContextMenu").height();
                                    var _0x13E73 = Neptq("." + NCSS + "NeptunContextMenu").position()["top"] + Neptq("." + NCSS + "NeptunContextMenu").height();
                                    var _0x13E47 = Neptq("." + NCSS + "NeptunContextMenu").position()["left"] + Neptq("." + NCSS + "NeptunContextMenu").width();
                                    var _0x13EF7 = Neptq("#" + NCSS + "Neptun").width();
                                    var _0x13ECB = Neptq("#" + NCSS + "Neptun").height();
                                    if (_0x13EF7 < _0x13E47) {
                                        Neptq("." + NCSS + "NeptunContextMenu").css("left", "" + _0x13EF7 - _0x13E9F + "px")
                                    };
                                    if (_0x13ECB < _0x13E73) {
                                        Neptq("." + NCSS + "NeptunContextMenu").css("top", "" + _0x13ECB - _0x13E1B + "px")
                                    }
                                }
                            });

                            function _0x13F4F() {
                                if (document.fullscreenElement || document.webkitFullscreenElement || document.mozFullScreenElement || document.msFullscreenElement) {} else {
                                    if ("exitFullscreen" in document) {
                                        document.exitFullscreen();
                                    } else if ("webkitExitFullscreen" in document) {
                                        document.webkitExitFullscreen();
                                    } else if ("mozCancelFullScreen" in document) {
                                        document.mozCancelFullScreen();
                                    } else if ("msExitFullscreen" in document) {
                                        document.msExitFullscreen();
                                    };
                                    Neptq(".nep-icon-shrink").addClass("nep-icon-enlarge");
                                    Neptq(".nep-icon-enlarge").removeClass("nep-icon-shrink");
                                    var _0x13E1B = setTimeout(function() {
                                        _0x13FD3()
                                    }, 100);
                                    if (_0x13FFF === "sega32x" || _0x13FFF === "sega32X") {} else {
                                        RA.context.close();
                                        Neptune.ccall("axiop55x2218", "number"[1])//todo: wtf? gay
                                    }
                                }
                            }
                            if (document.addEventListener) {
                                document.addEventListener("webkitfullscreenchange", _0x13F4F, false);
                                document.addEventListener("mozfullscreenchange", _0x13F4F, false);
                                document.addEventListener("fullscreenchange", _0x13F4F, false);
                                document.addEventListener("MSFullscreenChange", _0x13F4F, false);
                            };
                            if (gamepad.init()) {};
                            gamepad.bind(Gamepad.Event.UNSUPPORTED, function(_0x13E1B) {
                                Neptq("#gamepads").html("Gamepad unsupported");
                                Neptq("." + NCSS + "nep_game_pad_connect").addClass("" + NCSS + "active_info");
                                _0x14293 = setTimeout(function() {
                                    Neptq("." + NCSS + "nep_game_pad_connect").removeClass("" + NCSS + "active_info")
                                }, 4500);
                                Neptq("#" + NCSS + "gbadinfo1 , #" + NCSS + "gamepadinfo1 , #" + NCSS + "gbadinfo2 , #" + NCSS + "gamepadinfo2 , #" + NCSS + "gbadinfo3 , #" + NCSS + "gamepadinfo3 , #" + NCSS + "gbadinfo4 , #" + NCSS + "gamepadinfo4").css("display", "none")
                            });
                            gamepad.bind(Gamepad.Event.CONNECTED, function(_0x13E1B) {
                                var _0x13E73 = _0x13E1B.id;
                                var _0x13E47 = _0x13E73.indexOf("(");
                                _0x13E73 = _0x13E73.substring(0, _0x13E47 != -1 ? _0x13E47 : _0x13E73.length);
                                if (_0x13E1B.index === 0) {
                                    Neptq("#" + NCSS + "gamepadinfo1").html("Connected gamepad №" + (_0x13E1B.index + 1) + ": " + _0x13E73 + "");
                                    if (Neptq("#" + NCSS + "P1").hasClass("" + NCSS + "is-active")) {
                                        Neptq("#" + NCSS + "gbadinfo1 , #" + NCSS + "gamepadinfo1").css("display", "block");
                                        Neptq("#" + NCSS + "gbadinfo1").addClass("" + NCSS + "is-active")
                                    }
                                } else {
                                    if (Neptq("#" + NCSS + "gbadinfo1").hasClass("" + NCSS + "is-active")) {} else {
                                        Neptq("#" + NCSS + "gbadinfo1 , #" + NCSS + "gamepadinfo1").css("display", "none")
                                    }
                                };
                                if (_0x13E1B.index === 1) {
                                    Neptq("#" + NCSS + "gamepadinfo2").html("Connected gamepad №" + (_0x13E1B.index + 1) + ": " + _0x13E73 + "");
                                    if (Neptq("#" + NCSS + "P2").hasClass("" + NCSS + "is-active")) {
                                        Neptq("#" + NCSS + "gbadinfo2 , #" + NCSS + "gamepadinfo2").css("display", "block");
                                        Neptq("#" + NCSS + "gbadinfo2").addClass("" + NCSS + "is-active")
                                    }
                                } else {
                                    if (Neptq("#" + NCSS + "gbadinfo2").hasClass("" + NCSS + "is-active")) {} else {
                                        Neptq("#" + NCSS + "gbadinfo2 , #" + NCSS + "gamepadinfo2").css("display", "none")
                                    }
                                };
                                if (_0x13E1B.index === 2) {
                                    Neptq("#" + NCSS + "gamepadinfo3").html("Connected gamepad №" + (_0x13E1B.index + 1) + ": " + _0x13E73 + "");
                                    if (Neptq("#" + NCSS + "P3").hasClass("" + NCSS + "is-active")) {
                                        Neptq("#" + NCSS + "gbadinfo3, #" + NCSS + "gamepadinfo3").css("display", "block");
                                        Neptq("#" + NCSS + "gbadinfo3").addClass("" + NCSS + "is-active")
                                    }
                                } else {
                                    if (Neptq("#" + NCSS + "gbadinfo3").hasClass("" + NCSS + "is-active")) {} else {
                                        Neptq("#" + NCSS + "gbadinfo3 , #" + NCSS + "gamepadinfo3").css("display", "none")
                                    }
                                };
                                if (_0x13E1B.index === 3) {
                                    Neptq("#" + NCSS + "gamepadinfo4").html("Connected gamepad №" + (_0x13E1B.index + 1) + ": " + _0x13E73 + "");
                                    if (Neptq("#" + NCSS + "P4").hasClass("" + NCSS + "is-active")) {
                                        Neptq("#" + NCSS + "gbadinfo4 , #" + NCSS + "gamepadinfo4").css("display", "block");
                                        Neptq("#" + NCSS + "gbadinfo4").addClass("" + NCSS + "is-active")
                                    }
                                } else {
                                    if (Neptq("#" + NCSS + "gbadinfo4").hasClass("" + NCSS + "is-active")) {} else {
                                        Neptq("#" + NCSS + "gbadinfo4 , #" + NCSS + "gamepadinfo4").css("display", "none")
                                    }
                                };
                                Neptq("#gamepads").html("Connect gamepad №" + (_0x13E1B.index + 1) + ": " + _0x13E73 + "");
                                Neptq("." + NCSS + "gamepadinfo").html("gamepad №" + (_0x13E1B.index + 1) + ": " + _0x13E73 + "");
                                Neptq("." + NCSS + "nep_game_pad_connect").addClass("" + NCSS + "active_info");
                                _0x14293 = setTimeout(function() {
                                    Neptq("." + NCSS + "nep_game_pad_connect").removeClass("" + NCSS + "active_info")
                                }, 4500)
                            });
                            gamepad.bind(Gamepad.Event.DISCONNECTED, function(_0x13E1B) {
                                if (_0x13E1B.index === 0) {
                                    Neptq("#" + NCSS + "gamepadinfo1").html(" ");
                                    Neptq("#" + NCSS + "gbadinfo1 , #" + NCSS + "gamepadinfo1").css("display", "none");
                                    Neptq("#" + NCSS + "gbadinfo1").removeClass("" + NCSS + "is-active")
                                };
                                if (_0x13E1B.index === 1) {
                                    Neptq("#" + NCSS + "gamepadinfo2").html(" ");
                                    Neptq("#" + NCSS + "gbadinfo2 , #" + NCSS + "gamepadinfo2").css("display", "none");
                                    Neptq("#" + NCSS + "gbadinfo2").removeClass("" + NCSS + "is-active")
                                };
                                if (_0x13E1B.index === 2) {
                                    Neptq("#" + NCSS + "gamepadinfo3").html(" ");
                                    Neptq("#" + NCSS + "gbadinfo3 , #" + NCSS + "gamepadinfo3").css("display", "none");
                                    Neptq("#" + NCSS + "gbadinfo3").removeClass("" + NCSS + "is-active")
                                };
                                if (_0x13E1B.index === 3) {
                                    Neptq("#" + NCSS + "gamepadinfo4").html(" ");
                                    Neptq("#" + NCSS + "gbadinfo4 , #" + NCSS + "gamepadinfo4").css("display", "none");
                                    Neptq("#" + NCSS + "gbadinfo4").removeClass("" + NCSS + "is-active")
                                };
                                var _0x13E73 = _0x13E1B.id;
                                var _0x13E47 = _0x13E73.indexOf("(");
                                _0x13E73 = _0x13E73.substring(0, _0x13E47 != -1 ? _0x13E47 : _0x13E73.length);
                                Neptq("#gamepads").html("Disconected gamepad №" + (_0x13E1B.index + 1) + ": " + _0x13E73 + "");
                                Neptq("." + NCSS + "nep_game_pad_connect").addClass("" + NCSS + "active_info");
                                _0x14293 = setTimeout(function() {
                                    Neptq("." + NCSS + "nep_game_pad_connect").removeClass("" + NCSS + "active_info")
                                }, 4500)
                            });
                            Neptq("#" + NCSS + NCSS2 + NCSS3 + "").removeClass("" + NCSS + "pulse-anim");
                            return
                        }
                    }
                }(_0x13E1B)(testd * 10000 + testa + 100 + mmnva, "TypeError: Cannot set property 'widthNative' of null")
            })()
        }
        _0x13E73()
    }

    function _0x140AF() {
        var _0x13E73 = FS.readFile("/home/web_user/retroarch/userdata/retroarch.cfg", {
            encoding: "binary"
        });
        array = new Uint8Array(_0x13E73);
        var _0x13E47 = new Blob([array], {
            type: "application/octet-stream"
        });
        var _0x13E9F = window.URL.createObjectURL(_0x13E47);
        var _0x13E1B = document.createElement("a");
        document.body.appendChild(_0x13E1B);
        _0x13E1B.style = "display: none";
        _0x13E1B.download = "Nep.cfg";
        if (window.navigator && window.navigator.msSaveOrOpenBlob) {
            window.navigator.msSaveOrOpenBlob(_0x13E47, _0x13E1B.download)
        } else {
            _0x13E1B.href = _0x13E9F
        };
        _0x13E1B.click();
        window.URL.revokeObjectURL(_0x13E9F)
    }

    function _0x140DB() {
        Neptune.ccall("x7ooiujgfgda", "x7ooiujgfgda"[1]);
        var _0x13E73 = FS.readFile("/webdata/state/" + game + ".state", {
            encoding: "binary"
        });
        array = new Uint8Array(_0x13E73);
        var _0x13E47 = new Blob([array], {
            type: "application/octet-stream"
        });
        var _0x13E9F = window.URL.createObjectURL(_0x13E47);
        var _0x13E1B = document.createElement("a");
        document.body.appendChild(_0x13E1B);
        _0x13E1B.style = "display: none";
        _0x13E1B.download = "" + game + ".ggs";
        if (window.navigator && window.navigator.msSaveOrOpenBlob) {
            window.navigator.msSaveOrOpenBlob(_0x13E47, _0x13E1B.download)
        } else {
            _0x13E1B.href = _0x13E9F
        };
        _0x13E1B.click();
        window.URL.revokeObjectURL(_0x13E9F)
    }

    function _0x14107() {
        Neptq("#" + NCSS + "display").focus();
        _0x14057()
}

function _0x14133() {//screenshotter?
    Neptune.ccall("yytrd9852hhf", "x7ooiujgfgda"[1]);
    var _0x13E47 = Neptune.canvas.toDataURL("image/png").replace("image/png", "image/octet-stream");
    var _0x13E1B = document.createElement("a");
    document.body.appendChild(_0x13E1B);
    _0x13E1B.style = "display: none";
    _0x13E1B.download = game + ".png";
    if (window.navigator && window.navigator.msSaveOrOpenBlob) {
        window.navigator.msSaveOrOpenBlob(_0x13E47, _0x13E1B.download)
    } else {
        _0x13E1B.href = _0x13E47
    };
    _0x13E1B.click();
    window.URL.revokeObjectURL(_0x13E47);
    Neptune.ccall("terwq7895412", "x7ooiujgfgda"[1])
}

function _0x1415F() {
    if (NjsconsoleInfo.indexOf("RetroArch [INFO] :: ") > -1) {
        FS.syncfs(function() {
        });
        Neptq("#" + NCSS + "popupCDmenu").css({
            "visibility": "hidden",
            "opacity": "0",
            "zIndex": "0"
        });
        Neptq("#" + NCSS + "popupSwap2").css({
            "visibility": "visible",
            "opacity": "1",
            "zIndex": "5"
        });
        localStorage.setItem("NJScdName", JSON.stringify(GetsaveName))
    }
}

function _0x1418B() {
    Neptq("#" + NCSS + "popupCDmenu").attr("data-popup", "0");
    popupdata = 0;
    Neptq("#" + NCSS + "popupCDmenu").css({
        "visibility": "visible",
        "opacity": "1",
        "zIndex": "5"
    });
    Neptq("#" + NCSS + "popupSwap").css({
        "visibility": "hidden",
        "opacity": "0",
        "zIndex": "0"
    })
}

function _0x141B7(_0x13E1B) {
    Neptq("." + NCSS + "Cdinfo").css("display", "block");
    if (MCDload == 1) {
        Neptune.ccall("x7ooiujgfgda", "x7ooiujgfgda"[1]);
        getDataCdUrl = Neptq(this).attr("data-cd");
        localStorage.setItem("NJScd", JSON.stringify(getDataCdUrl));
        setTimeout(_0x1415F, 500)
    }
}

function _0x141E3() {
    _0x140DB()
}

function _0x1420F() {
    Neptq("#" + NCSS + "popupSwap").css({
        "visibility": "visible",
        "opacity": "1",
        "zIndex": "5"
    })
}

function _0x1423B() {
    location.reload()
}

function _0x14267() {
    FS.syncfs(function() {
    });
    FS.rename("/webdata/state/" + NameDisc + ".state", "/webdata/state/" + GetsaveName + ".state");
    var _0x13E47 = FS.stat("/webdata/state/" + GetsaveName + ".state");
    var _0x13E1B = Neptq("." + NCSS + "emul-pause").attr("data");
    Neptq("." + NCSS + "emul-pause").click(function() {
        if (_0x13E1B === "first") {
            setTimeout(Neptune.ccall("reyuyuyih897", "number"[1]), 500);
            setTimeout(test.DiskSwap, 1000);
            localStorage.setItem("NJScd", JSON.stringify(0));
            _0x13E1B = "none";
            Neptq("." + NCSS + "emul-pause").attr("data", "none")
        }
    });
    return false
}

function _0x14293() {
    Neptq(this).css("color", "" + NepColor + "")
}

function _0x142BF() {
    Neptq(this).css("color", "#fff")
}

function _0x142EB() {
    FS.syncfs(function() {
    })
}
timerB = _0x13E73;
reinitVastBanner = _0x13E9F;
reinitVast = _0x13ECB;
arCalculation = _0x13FD3;
SizeFixed = _0x1402B;
Mute = _0x14057;
saveCG = _0x140AF;
saveStateLD = _0x140DB;
saveIMGCanvas = _0x14133;
CheckSave = _0x1415F;
DiscSwap = _0x14267;
if (netp === 1) {
    if (Neptq("" + NepPlayer + "").length) {
        if (NJSerrorEvent === true && ltm === true) {
            meter = new NJSfpsMtt(document.getElementById("" + NCSS + "Neptun"), {
                interval: 300,
                smoothing: 10,
                show: "fps",
                toggleOn: "click",
                decimals: 1,
                maxFps: 60,
                threshold: 300,
                position: "absolute",
                zIndex: 2,
                left: "5px",
                top: "5px",
                right: "auto",
                bottom: "auto",
                margin: "0 0 0 0",
                theme: "transparent",
                heat: 0,
                graph: 0
            })
        }
    };
    _$synhc112 = "2";
    _$swqpa = "0";
    _$sasrqzc = "1";
    _$xxzczeytzx = "7";
    _$suyapz = "0";
    _$zxui = "6";
    _$siuyal = "3";
    _$bnucx = "0";
    gamepad = new Gamepad();
    N64Acurate = "";
    request = indexedDB.open("/webdata/state");
    indexedDB = window.indexedDB || window.webkitIndexedDB || window.mozIndexedDB || window.OIndexedDB || window.msIndexedDB, IDBTransaction = window.IDBTransaction || window.webkitIDBTransaction || window.OIDBTransaction || window.msIDBTransaction, dbVersion = 21;
    _ge385821 = _$me325853 + _$me325853 + _$af322814 + _$af329115 + _$af322814 + _$af325618 + _$me325864 + _$af329115 + _$me345994 + _$af329123 + _$af324o14 + _$me325864 + _$me873848 + _$af340820 + _$af325618 + _$xb386375 + _$me535159 + _$me385724 + _$me325853 + _$me325864 + _$af329115 + _$me345994 + _$af329123 + _$af324o14 + _$me325864 + _$me325853 + _$af325812 + _$af325812 + _$af329115 + _$me325853 + neptunPlatform + _$af325618 + _$af325812 + _$af325812 + _$af329115;
    _$Tm329123 = testd * 10000 + testa + 100 + mmnva;
    if (NeptunP === "segaCD") {
        if (xboxOne === true) {
            _$xb385000 = _$xb385365 + _$xb386375 + _$xb325852 + _$xb385812 + _$xb386375
        } else {
            _$xb385000 = ""
        }
    } else {
        _$xb385000 = ""
    };
    Neptq("." + NCSS + "checkbox").on("click", _0x13E1B);
    Neptq("." + NCSS + "selectOP").on("click", _0x13E47);
    _$da789325 = "";
    Cdsu = "";
    _wyuds = "";
    sdas569 = "";
    _svdacsj = "";
    C8s698 = "";
    _Utsax = "";
    _C85sxe = "";
    _Ycgb = "";
    _P95pcdscv = "";
    Yxbox = "";
    xboxlan = "";
    YxboxRwebInput = "";
    Y3 = "";
    YxboxCanvas = "";
    Xdisplay = "";
    Xgamepad = "";
    YxboxGamepads = Xgamepad;
    EdgeInpute = "";
    CanvasInput = "";
    urlRom = "";
    GameLoad = urlRom;
    _ius = "";
    _nxu = "";
    _$zdsu = "";
    _nudyxu = "";
    _wyudsasdwqs = "";
    _oppssaqqw = "";
    _iussggruns = "";
    _wsad = "";
    wwwqqrty = "";
    exewq = "";
    sat48 = "";
    _werty = "";
    _zhjkl = "";
    _$csq = "";
    _$zxcv = "";
    _htpls = "";
    requires = "";
    TRY_USE_DUMPS = "";
    E2BIGS = "";
    drawBuffersExtS = "";
    if (neptunPlatform === null) {
        HtmlError()
    };
    adslink = "//a.vertamedia.com/?content_page_url={content_page}&width={width}&height={height}&cb={cb}&vpaid_type=3&video_duration=300&aid=365491";
    if (window.vqn == undefined || ltm === false || rbtl === true) {} else {
        player = vqn("#" + NCSS + NCSS + NCSS + NCSS + NCSS + NCSS + "", {
            "controls": false,
            "autoplay": false,
            "preload": false
        });
        adsCancelTimeout = 6000;
        player.vastClient({
            adTagUrl: ["//server.cpmstar.com/view.aspx?poolid=75083&vast=2&vpaid=1", "//server.cpmstar.com/view.aspx?poolid=75143&vast=2&vpaid=1"],
            playAdAlways: false,
            adCancelTimeout: adsCancelTimeout,
            adsEnabled: true,
            preferredTech: "html5"
        });
        player.on("reset", _0x13EF7);
        player.on("vast.adError", _0x13F23);
        player.on("vast.adStart", _0x13F4F);
        player.on("vast.adEnd", _0x13F7B);
        player.on("vast.adSkip", _0x13FA7)
    };
    HeightCheker = Neptq("" + NepPlayer + "").height();
    WidthCheker = Neptq("" + NepPlayer + "").width();
    HeightFixer = Neptq("#" + NCSS + "EmuBlock").width() / 1.336;
    NJS_Elements = Neptq("#" + NCSS + "EmuBlock , ." + NCSS + "game-info , ." + NCSS + "emul-display ,." + NCSS + "controll-info");
    Neptq(window).on("resize", _0x13FFF);
    NJSsettings = JSON.parse(localStorage.getItem("NJSsettings"));
    selecteds = JSON.parse(localStorage.getItem("NJSs"));
    ChangeDisc = JSON.parse(localStorage.getItem("NJScd"));
    NameDisc = JSON.parse(localStorage.getItem("NJScdName"));
    if (NJSsettings === null) {} else {
        for (i = 0; i < NJSsettings.length; i++) {
            Neptq("#" + NJSsettings[i].id).prop("checked", NJSsettings[i].value);
            Neptq("#" + NJSsettings[i].id).attr("checked", NJSsettings[i].value)
        }
    };
    if (selecteds === null) {} else {
        for (i = 0; i < selecteds.length; i++) {
            Neptq("#" + selecteds[i].id).prop("selected", selecteds[i].value);
            Neptq("#" + selecteds[i].id).attr("selected", selecteds[i].value)
        }
    };
    Neptq(document).ready(_0x14083);
    conTitle = "NeptunJS 2.5.5";
    Neptq("#" + NCSS + "NEPicon-mute").click(_0x14107);
    Neptq("." + NCSS + "SwapNJSC").click(_0x1418B);
    Neptq("." + NCSS + "NJSCD").click(_0x141B7);
    Neptq("." + NCSS + "SwapSaveNJSC").click(_0x141E3);
    Neptq("." + NCSS + "NEPicon-swap").click(_0x1420F);
    Neptq("." + NCSS + "ReloadSwapNJSC").click(_0x1423B);
    Neptq(".nep-icon-upload3").hover(_0x14293, _0x142BF)
};
Neptq(".IndexSync").click(_0x142EB);
return 2810
}();
/////////////////////////////////////////////////////////////
// BLOCK 7 END
/////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////
// BLOCK 8 START
/////////////////////////////////////////////////////////////
var controllers, jsonP1, jsonP2, jsonP3, jsonP4, xboxMode, focusElement, button1, button2, button3, button4, button5, button6, button7, button8, button9, button10, button11, button12, dpad1, dpad2, dpad3, dpad4, Lanalog1, Lanalog2, Lanalog3, Lanalog4, Ranalog1, Ranalog2, Ranalog3, Ranalog4, axes_stick, axes_stick_up, buttonMap, keyMap, buttonMap, keyMap, initInfoLable, elementData, Player, gpadindex1, gpadindex2, gpadindex3, gpadindex4, callGpadUi, resetControll, SaveJson, SaveGameJson, loadJSONALL, loadJSON, showUiPop, keyCod_tag, initControllers, simulat_input, simulat_inputDpad, gpad, disableGpadIndex, RI, test, _ssyyquu71, _aayuq8971, _sasiu89; + function() {
  function _0x13E1B(_BIGARRAY) {
      jsonP1 = _BIGARRAY
  }

  function _0x13E47(_BIGARRAY) {
      jsonP1 = _BIGARRAY
  }

  function _0x13E73(_BIGARRAY) {
      jsonP2 = _BIGARRAY
  }

  function _0x13E9F(_BIGARRAY) {
      jsonP3 = _BIGARRAY
  }

  function _0x13ECB(_BIGARRAY) {
      jsonP4 = _BIGARRAY
  }

  function _0x13EF7(_BIGARRAY) {
      jsonP1 = _BIGARRAY
  }

  function _0x13F23(_BIGARRAY) {
      jsonP2 = _BIGARRAY
  }

  function _0x13F4F(_BIGARRAY) {
      jsonP3 = _BIGARRAY
  }

  function _0x13F7B(_BIGARRAY) {
      jsonP4 = _BIGARRAY
  }

  function _0x13FA7() {
      Neptq("." + NCSS + "labButtonStart").html("<span>" + button2 + " :</span>");
      Neptq("." + NCSS + "labButtonSelect").html("<span>" + button1 + " :</span>");
      Neptq("." + NCSS + "labButtonL1").html("<span>" + button7 + " :</span>");
      Neptq("." + NCSS + "labButtonR1").html("<span>" + button8 + " :</span>");
      Neptq("." + NCSS + "labButtonL2").html("<span>" + button9 + " :</span>");
      Neptq("." + NCSS + "labButtonR2").html("<span>" + button10 + " :</span>");
      Neptq("." + NCSS + "labButtonL3").html("<span>" + button11 + " :</span>");
      Neptq("." + NCSS + "labButtonR3").html("<span>" + button12 + " :</span>");
      Neptq("." + NCSS + "labButtonUP").html("<span>" + dpad1 + " :</span>");
      Neptq("." + NCSS + "labButtonDown").html("<span>" + dpad2 + " :</span>");
      Neptq("." + NCSS + "labButtonLeft").html("<span>" + dpad3 + " :</span>");
      Neptq("." + NCSS + "labButtonRight").html("<span>" + dpad4 + " :</span>");
      Neptq("." + NCSS + "labanUPL").html("<span>" + Lanalog1 + " :</span>");
      Neptq("." + NCSS + "labanDownL").html("<span>" + Lanalog2 + " :</span>");
      Neptq("." + NCSS + "labanLeftL").html("<span>" + Lanalog3 + " :</span>");
      Neptq("." + NCSS + "labanRightL").html("<span>" + Lanalog4 + " :</span>");
      Neptq("." + NCSS + "labanUPR").html("<span>" + Ranalog1 + ":</span>");
      Neptq("." + NCSS + "labanDownR").html("<span>" + Ranalog2 + " :</span>");
      Neptq("." + NCSS + "labanLeftR").html("<span>" + Ranalog3 + " :</span>");
      Neptq("." + NCSS + "labanRightR").html("<span>" + Ranalog4 + " :</span>");
      Neptq("." + NCSS + "labButton1").html("<span>" + button3 + " :</span>");
      Neptq("." + NCSS + "labButton2").html("<span>" + button4 + " :</span>");
      Neptq("." + NCSS + "labButton3").html("<span>" + button5 + " :</span>");
      Neptq("." + NCSS + "labButton4").html("<span>" + button6 + " :</span>");
      Neptq("." + NCSS + "labButton5").html("<span>" + button7 + " :</span>");
      Neptq("." + NCSS + "labButton6").html("<span>" + button8 + " :</span>");
      Neptq("." + NCSS + "labButton7").html("<span>" + button9 + " :</span>");
      Neptq("." + NCSS + "labButton8").html("<span>" + button10 + " :</span>");
      Neptq("." + NCSS + "labButton9").html("<span>" + "2" + ":</span>");
      Neptq("." + NCSS + "labButton10").html("<span>" + Ranalog1 + " :</span>");
      Neptq("." + NCSS + "labButton11").html("<span>" + Ranalog2 + " :</span>");
      Neptq("." + NCSS + "labButton12").html("<span>" + Ranalog3 + " :</span>");
      Neptq("." + NCSS + "labButton13").html("<span>" + Ranalog4 + " :</span>");
      var _0x14527 = Neptq("#NJSSTART" + Player + "").attr("data-value");
      var _0x144FB = Neptq("#NJSSTART" + Player + "").attr("data-gamepad-key");
      var _0x144CF = Neptq("#NJSSELECT" + Player + "").attr("data-value");
      var _0x144A3 = Neptq("#NJSSELECT" + Player + "").attr("data-gamepad-key");
      var _0x140AF = Neptq("#NJSKEYL" + Player + "").attr("data-value");
      var _0x14083 = Neptq("#NJSKEYL" + Player + "").attr("data-gamepad-key");
      var _0x1436F = Neptq("#NJSKEYR" + Player + "").attr("data-value");
      var _0x14343 = Neptq("#NJSKEYR" + Player + "").attr("data-gamepad-key");
      var _0x14107 = Neptq("#NJSKEYL2" + Player + "").attr("data-value");
      var _0x140DB = Neptq("#NJSKEYL2" + Player + "").attr("data-gamepad-key");
      var _0x143C7 = Neptq("#NJSKEYR2" + Player + "").attr("data-value");
      var _0x1439B = Neptq("#NJSKEYR2" + Player + "").attr("data-gamepad-key");
      var _0x1415F = Neptq("#NJSKEYL3" + Player + "").attr("data-value");
      var _0x14133 = Neptq("#NJSKEYL3" + Player + "").attr("data-gamepad-key");
      var _0x1441F = Neptq("#NJSKEYR3" + Player + "").attr("data-value");
      var _0x143F3 = Neptq("#NJSKEYR3" + Player + "").attr("data-gamepad-key");
      var _0x1462F = Neptq("#NJSKEYY" + Player + "").attr("data-value");
      var _0x14603 = Neptq("#NJSKEYY" + Player + "").attr("data-gamepad-key");
      var _0x145D7 = Neptq("#NJSKEYX" + Player + "").attr("data-value");
      var _0x145AB = Neptq("#NJSKEYX" + Player + "").attr("data-gamepad-key");
      var _0x13E47 = Neptq("#NJSKEYA" + Player + "").attr("data-value");
      var _0x13E1B = Neptq("#NJSKEYA" + Player + "").attr("data-gamepad-key");
      var _0x13E9F = Neptq("#NJSKEYB" + Player + "").attr("data-value");
      var _0x13E73 = Neptq("#NJSKEYB" + Player + "").attr("data-gamepad-key");
      var _0x1457F = Neptq("#NJSUP" + Player + "").attr("data-value");
      var _0x14553 = Neptq("#NJSUP" + Player + "").attr("data-gamepad-key");
      var _0x13EF7 = Neptq("#NJSDOWN" + Player + "").attr("data-value");
      var _0x13ECB = Neptq("#NJSDOWN" + Player + "").attr("data-gamepad-key");
      var _0x141B7 = Neptq("#NJSLEFT" + Player + "").attr("data-value");
      var _0x1418B = Neptq("#NJSLEFT" + Player + "").attr("data-gamepad-key");
      var _0x14477 = Neptq("#NJSRIGHT" + Player + "").attr("data-value");
      var _0x1444B = Neptq("#NJSRIGHT" + Player + "").attr("data-gamepad-key");
      var _0x14317 = Neptq("#NJSKEYR_A_UP" + Player + "").attr("data-value");
      var _0x142EB = Neptq("#NJSKEYR_A_UP" + Player + "").attr("data-gamepad-key");
      var _0x1420F = Neptq("#NJSKEYR_A_DOWN" + Player + "").attr("data-value");
      var _0x141E3 = Neptq("#NJSKEYR_A_DOWN" + Player + "").attr("data-gamepad-key");
      var _0x14267 = Neptq("#NJSKEYR_A_LEFT" + Player + "").attr("data-value");
      var _0x1423B = Neptq("#NJSKEYR_A_LEFT" + Player + "").attr("data-gamepad-key");
      var _0x142BF = Neptq("#NJSKEYR_A_RIGHT" + Player + "").attr("data-value");
      var _0x14293 = Neptq("#NJSKEYR_A_RIGHT" + Player + "").attr("data-gamepad-key");
      var _0x14057 = Neptq("#NJSKEYL_A_UP" + Player + "").attr("data-value");
      var _0x1402B = Neptq("#NJSKEYL_A_UP" + Player + "").attr("data-gamepad-key");
      var _0x13F4F = Neptq("#NJSKEYL_A_DOWN" + Player + "").attr("data-value");
      var _0x13F23 = Neptq("#NJSKEYL_A_DOWN" + Player + "").attr("data-gamepad-key");
      var _0x13FA7 = Neptq("#NJSKEYL_A_LEFT" + Player + "").attr("data-value");
      var _0x13F7B = Neptq("#NJSKEYL_A_LEFT" + Player + "").attr("data-gamepad-key");
      var _0x13FFF = Neptq("#NJSKEYL_A_RIGHT" + Player + "").attr("data-value");
      var _0x13FD3 = Neptq("#NJSKEYL_A_RIGHT" + Player + "").attr("data-gamepad-key");
      Neptq("." + NCSS + "labButtonStart").append("" + keyMap[_0x14527] + "" + buttonMap[_0x144FB]);
      Neptq("." + NCSS + "labButtonSelect").append("" + keyMap[_0x144CF] + "" + buttonMap[_0x144A3]);
      Neptq("." + NCSS + "labButton5").append("" + keyMap[_0x140AF] + "" + buttonMap[_0x14083]);
      Neptq("." + NCSS + "labButton6").append("" + keyMap[_0x1436F] + "" + buttonMap[_0x14343]);
      Neptq("." + NCSS + "labButtonL1").append("" + keyMap[_0x140AF] + "" + buttonMap[_0x14083]);
      Neptq("." + NCSS + "labButtonR1").append("" + keyMap[_0x1436F] + "" + buttonMap[_0x14343]);
      Neptq("." + NCSS + "labButtonL2").append("" + keyMap[_0x14107] + "" + buttonMap[_0x140DB]);
      Neptq("." + NCSS + "labButtonR2").append("" + keyMap[_0x143C7] + "" + buttonMap[_0x1439B]);
      Neptq("." + NCSS + "labButtonL3").append("" + keyMap[_0x1415F] + "" + buttonMap[_0x14133]);
      Neptq("." + NCSS + "labButtonR3").append("" + keyMap[_0x1441F] + "" + buttonMap[_0x143F3]);
      Neptq("." + NCSS + "labButton1").append("" + keyMap[_0x145D7] + "" + buttonMap[_0x145AB]);
      Neptq("." + NCSS + "labButton2").append("" + keyMap[_0x13E47] + "" + buttonMap[_0x13E1B]);
      Neptq("." + NCSS + "labButton3").append("" + keyMap[_0x13E9F] + "" + buttonMap[_0x13E73]);
      Neptq("." + NCSS + "labButton4").append("" + keyMap[_0x1462F] + "" + buttonMap[_0x14603]);
      Neptq("." + NCSS + "labButtonUP").append("" + keyMap[_0x1457F] + "" + buttonMap[_0x14553]);
      Neptq("." + NCSS + "labButtonDown").append("" + keyMap[_0x13EF7] + "" + buttonMap[_0x13ECB]);
      Neptq("." + NCSS + "labButtonLeft").append("" + keyMap[_0x141B7] + "" + buttonMap[_0x1418B]);
      Neptq("." + NCSS + "labButtonRight").append("" + keyMap[_0x14477] + "" + buttonMap[_0x1444B]);
      Neptq("." + NCSS + "labanUPL").append("" + keyMap[_0x14057] + "" + buttonMap[_0x1402B]);
      Neptq("." + NCSS + "labanDownL").append("" + keyMap[_0x13F4F] + "" + buttonMap[_0x13F23]);
      Neptq("." + NCSS + "labanLeftL").append("" + keyMap[_0x13FA7] + "" + buttonMap[_0x13F7B]);
      Neptq("." + NCSS + "labanRightL").append("" + keyMap[_0x13FFF] + "" + buttonMap[_0x13FD3]);
      Neptq("." + NCSS + "labanUPR").append("" + keyMap[_0x14317] + "" + buttonMap[_0x142EB]);
      Neptq("." + NCSS + "labanDownR").append("" + keyMap[_0x1420F] + "" + buttonMap[_0x141E3]);
      Neptq("." + NCSS + "labanLeftR").append("" + keyMap[_0x14267] + "" + buttonMap[_0x1423B]);
      Neptq("." + NCSS + "labanRightR").append("" + keyMap[_0x142BF] + "" + buttonMap[_0x14293])
  }

  function _0x13FD3(_0x13E1B) {
      if (_0x13E1B.index === 0) {
          gpadindex1 = "0"
      } else {
          Neptq("#" + NCSS + "gbadinfo1 , #" + NCSS + "gamepadinfo1").css("display", "none")
      };
      if (_0x13E1B.index === 1) {
          gpadindex2 = "1"
      } else {
          Neptq("#" + NCSS + "gbadinfo2 , #" + NCSS + "gamepadinfo2").css("display", "none")
      };
      if (_0x13E1B.index === 2) {
          gpadindex3 = "2"
      } else {
          Neptq("#" + NCSS + "gbadinfo3 , #" + NCSS + "gamepadinfo3").css("display", "none")
      };
      if (_0x13E1B.index === 3) {
          gpadindex4 = "3"
      } else {
          Neptq("#" + NCSS + "gbadinfo4 , #" + NCSS + "gamepadinfo4").css("display", "none")
      }
  }

  function _0x13FFF() {
      if (Neptq("#" + NCSS + "P1").hasClass("" + NCSS + "is-active")) {
          Player = "";
          _0x13FA7();
          if (gpadindex1 === "0") {
              Neptq("#" + NCSS + "gbadinfo1 , #" + NCSS + "gamepadinfo1").css("display", "block")
          } else {
              Neptq("#" + NCSS + "gbadinfo1 , #" + NCSS + "gamepadinfo1").css("display", "none")
          }
      } else {
          Neptq("#" + NCSS + "gbadinfo1 , #" + NCSS + "gamepadinfo1").css("display", "none")
      };
      if (Neptq("#" + NCSS + "P2").hasClass("" + NCSS + "is-active")) {
          Player = "P2";
          _0x13FA7();
          if (gpadindex2 === "1") {
              Neptq("#" + NCSS + "gbadinfo2 , #" + NCSS + "gamepadinfo2").css("display", "block")
          } else {
              Neptq("#" + NCSS + "gbadinfo2 , #" + NCSS + "gamepadinfo2").css("display", "none")
          }
      } else {
          Neptq("#" + NCSS + "gbadinfo2 , #" + NCSS + "gamepadinfo2").css("display", "none")
      };
      if (Neptq("#" + NCSS + "P3").hasClass("" + NCSS + "is-active")) {
          Player = "P3";
          _0x13FA7();
          if (gpadindex3 === "2") {
              Neptq("#" + NCSS + "gbadinfo3 , #" + NCSS + "gamepadinfo3").css("display", "block")
          } else {
              Neptq("#" + NCSS + "gbadinfo3 , #" + NCSS + "gamepadinfo3").css("display", "none")
          }
      } else {
          Neptq("#" + NCSS + "gbadinfo3 , #" + NCSS + "gamepadinfo3").css("display", "none")
      };
      if (Neptq("#" + NCSS + "P4").hasClass("" + NCSS + "is-active")) {
          Player = "P4";
          _0x13FA7();
          if (gpadindex4 === "3") {
              Neptq("#" + NCSS + "gbadinfo4 , #" + NCSS + "gamepadinfo4").css("display", "block")
          } else {
              Neptq("#" + NCSS + "gbadinfo4 , #" + NCSS + "gamepadinfo4").css("display", "none")
          }
      } else {
          Neptq("#" + NCSS + "gbadinfo4 , #" + NCSS + "gamepadinfo4").css("display", "none")
      }
  }

  function _0x1402B() {
      var _0x13E1B = Neptq(this);
      var _0x13E47 = Neptq("." + NCSS + "luib");
      Neptq("." + NCSS + "luib").each(function(_0x13E9F, _0x13E47) {
          Neptq(_0x13E47).attr("data");
          if (Neptq(_0x13E47).is("#" + NCSS + "stop")) {
              return false
          };
          if (_0x13E1B.attr("data") == Neptq(_0x13E47).attr("data")) {
              var _0x13E73 = Neptq(_0x13E47).attr("id");
              Neptq(_0x13E47).css("background", "" + NepColor + "")
          }
      })
  }

  function _0x14057() {
      Neptq("." + NCSS + "luib").css("background", "none")
  }

  function _0x14083() {
      Neptq("." + NCSS + "advance_tabs" + Player + "").toggleClass("" + NCSS + "advance_tabs_active")
  }

  function _0x140AF() {
      Neptq("." + NCSS + "tabs-panel").not(document.getElementById("" + NCSS + "controller-1")).css("display", "none");
      Neptq("#" + NCSS + "controller-1").fadeIn();
      Neptq("#" + NCSS + "NepCui").css("display", "block");
      Neptq("." + NCSS + "emu-ctr-bar").css("display", "none");
      Neptq("#" + NCSS + "display").addClass("" + NCSS + "Blur");
      Neptune.ccall("yytrd9852hhf", "number"[1])
  }

  function _0x140DB() {
      _0x140AF()
  }

  function _0x14107() {
      Neptq("#" + NCSS + "display").removeClass("" + NCSS + "Blur");
      Neptq("#" + NCSS + "NepCui").css("display", "none");
      Neptq("." + NCSS + "emu-ctr-bar").css("display", "block");
      Neptune.ccall("terwq7895412", "number"[1]);
      RA.context.close();
      Neptune.ccall("axiop55x2218", "number"[1]);
      Neptq("#" + NCSS + "display").focus()
  }

  function _0x14133() {
      controllers = jsonP1;
      _0x142EB()
  }

  function _0x1415F() {
      controllers = jsonP2;
      _0x142EB()
  }

  function _0x1418B() {
      controllers = jsonP4;
      _0x142EB()
  }

  function _0x141B7() {
      controllers = jsonP3;
      _0x142EB()
  }

  function _0x141E3() {
      Neptq("." + NCSS + "controllers input").each(function(_0x13EF7, _0x13F7B) {
          var _0x13E1B = Neptq(_0x13F7B).attr("data-axes-key");
          var _0x13F4F = Neptq(_0x13F7B).attr("data-input-key");
          var _0x13F23 = Neptq(_0x13F7B).attr("data-index");
          var _0x13ECB = Neptq(_0x13F7B).attr("data-gamepad-key");
          var _0x13FD3 = Neptq(_0x13F7B).attr("data-value");
          var _0x13FD3 = Neptq(_0x13F7B).attr("data-value");
          var _0x13FA7 = Neptq(_0x13F7B).attr("data-type");
          var _0x13E47 = Neptq(_0x13F7B).attr("data-id");
          var _0x13E73 = Neptq(_0x13F7B).attr("id");
          var _0x13E9F = Neptq(_0x13F7B).attr("data-gamepad-index");
          if (!controllers[_0x13F23]) {
              controllers[_0x13F23] = {}
          };
          controllers[_0x13F23][_0x13E47] = {
              axes_key: _0x13E1B,
              gamepad_key: _0x13ECB,
              type: _0x13FA7,
              index: _0x13E9F,
              value: _0x13FD3,
              input_key: _0x13F4F,
              div_id: _0x13E73
          }
      });
      if (window.localStorage) {
          window.localStorage.setItem("" + NeptunP + "_NJScontrollers", JSON.stringify(controllers))
      };
      _0x1423B();
      _0x142EB()
  }

  function _0x1420F() {
      Neptq("." + NCSS + "controllers input").each(function(_0x13EF7, _0x13F7B) {
          var _0x13E1B = Neptq(_0x13F7B).attr("data-axes-key");
          var _0x13F4F = Neptq(_0x13F7B).attr("data-input-key");
          var _0x13F23 = Neptq(_0x13F7B).attr("data-index");
          var _0x13ECB = Neptq(_0x13F7B).attr("data-gamepad-key");
          var _0x13FD3 = Neptq(_0x13F7B).attr("data-value");
          var _0x13FD3 = Neptq(_0x13F7B).attr("data-value");
          var _0x13FA7 = Neptq(_0x13F7B).attr("data-type");
          var _0x13E47 = Neptq(_0x13F7B).attr("data-id");
          var _0x13E73 = Neptq(_0x13F7B).attr("id");
          var _0x13E9F = Neptq(_0x13F7B).attr("data-gamepad-index");
          if (!controllers[_0x13F23]) {
              controllers[_0x13F23] = {}
          };
          controllers[_0x13F23][_0x13E47] = {
              axes_key: _0x13E1B,
              gamepad_key: _0x13ECB,
              type: _0x13FA7,
              index: _0x13E9F,
              value: _0x13FD3,
              input_key: _0x13F4F,
              div_id: _0x13E73
          }
      });
      if (window.localStorage) {
          window.localStorage.setItem("" + romTitle + "_" + NeptunP + "_NJScontrollers", JSON.stringify(controllers))
      };
      Neptq("#" + NCSS + "NepCui").css("display", "none");
      Neptq("." + NCSS + "emu-ctr-bar").css("display", "block");
      Neptq("#" + NCSS + "display").removeClass("" + NCSS + "Blur");
      Neptune.ccall("terwq7895412", "number"[1]);
      RA.context.close();
      Neptune.ccall("axiop55x2218", "number"[1]);
      _0x14267();
      _0x142EB()
  }

  function _0x1423B() {
      if (localStorage.getItem("" + romTitle + "_" + NeptunP + "_NJScontrollers") === null) {
          Neptq("#" + NCSS + "NepCui").css("display", "none");
          Neptq("." + NCSS + "emu-ctr-bar").css("display", "block");
          Neptq("#" + NCSS + "display").removeClass("" + NCSS + "Blur");
          Neptune.ccall("terwq7895412", "number"[1]);
          RA.context.close();
          Neptune.ccall("axiop55x2218", "number"[1])
      } else {
          Neptq("#" + NCSS + "popup3").css({
              "visibility": "visible",
              "opacity": "1",
              "zIndex": "5"
          });
          Neptq("." + NCSS + "JsonSave").click(function() {
              Neptq("#" + NCSS + "popup3").css({
                  "visibility": "hidden",
                  "opacity": "0",
                  "zIndex": "0"
              });
              localStorage.removeItem("" + romTitle + "_" + NeptunP + "_NJScontrollers");
              Neptq("#" + NCSS + "display").removeClass("" + NCSS + "Blur");
              Neptq("#" + NCSS + "NepCui").css("display", "none");
              Neptq("." + NCSS + "emu-ctr-bar").css("display", "block");
              Neptune.ccall("terwq7895412", "number"[1]);
              RA.context.close();
              Neptune.ccall("axiop55x2218", "number"[1])
          });
          Neptq("." + NCSS + "NoJsonSave").click(function() {
              _0x142BF();
              Neptq("#" + NCSS + "popup3").css({
                  "visibility": "hidden",
                  "opacity": "0",
                  "zIndex": "0"
              })
          })
      };
      if (localStorage.getItem("" + NeptunP + "_NJScontrollers") === null || resetControll === 1) {
          if (xboxMode === true) {
              Neptq.getJSON("" + _$me325853 + _$me325853 + _$Tm4455687 + _$af325618 + _$me325864 + _$af329115 + _$me345994 + _$af329123 + _$af322519 + _$me325864 + _$me873848 + _$af340820 + _$af325618 + _$Tm489541 + _$me325853 + _$me325864 + _$me873848 + _$af340820 + _$me325853 + _$me873848 + _$af340820 + _$xb385812 + _$me325864 + _$me325853 + "xbox_p1.json", function(_BIGARRAY) {
                  jsonP1 = _BIGARRAY;
                  controllers = jsonP1
              })
          } else {
              if (NepEmu === "n64") {
                  Neptq.getJSON("" + _$me325853 + _$me325853 + _$Tm4455687 + _$af325618 + _$me325864 + _$af329115 + _$me345994 + _$af329123 + _$af322519 + _$me325864 + _$me873848 + _$af340820 + _$af325618 + _$Tm489541 + _$me325853 + _$me325864 + _$me873848 + _$af340820 + _$me325853 + _$me873848 + _$af340820 + _$xb385812 + _$me325864 + _$me325853 + "n64_p1.json", function(_BIGARRAY) {
                      jsonP1 = _BIGARRAY;
                      controllers = jsonP1
                  })
              } else {
                  Neptq.getJSON("" + _$me325853 + _$me325853 + _$Tm4455687 + _$af325618 + _$me325864 + _$af329115 + _$me345994 + _$af329123 + _$af322519 + _$me325864 + _$me873848 + _$af340820 + _$af325618 + _$Tm489541 + _$me325853 + _$me325864 + _$me873848 + _$af340820 + _$me325853 + _$me873848 + _$af340820 + _$xb385812 + _$me325864 + _$me325853 + "P1.json", function(_BIGARRAY) {
                      jsonP1 = _BIGARRAY;
                      controllers = jsonP1
                  })
              }
          };
          resetControll = 0;
          _0x142EB()
      } else {
          var _0x13E1B = localStorage.getItem("" + NeptunP + "_NJScontrollers");
          controllers = JSON.parse(_0x13E1B)
      }
  }

  function _0x14267() {
      if (localStorage.getItem("" + romTitle + "_" + NeptunP + "_NJScontrollers") === null) {
          if (localStorage.getItem("" + NeptunP + "_NJScontrollers") === null || resetControll === 1) {
              if (xboxMode === true) {
                  Neptq.getJSON("" + _$me325853 + _$me325853 + _$Tm4455687 + _$af325618 + _$me325864 + _$af329115 + _$me345994 + _$af329123 + _$af322519 + _$me325864 + _$me873848 + _$af340820 + _$af325618 + _$Tm489541 + _$me325853 + _$me325864 + _$me873848 + _$af340820 + _$me325853 + _$me873848 + _$af340820 + _$xb385812 + _$me325864 + _$me325853 + "xbox_p1.json", function(_BIGARRAY) {
                      jsonP1 = _BIGARRAY;
                      controllers = jsonP1
                  })
              } else {
                  if (NepEmu === "n64") {
                      Neptq.getJSON("" + _$me325853 + _$me325853 + _$Tm4455687 + _$af325618 + _$me325864 + _$af329115 + _$me345994 + _$af329123 + _$af322519 + _$me325864 + _$me873848 + _$af340820 + _$af325618 + _$Tm489541 + _$me325853 + _$me325864 + _$me873848 + _$af340820 + _$me325853 + _$me873848 + _$af340820 + _$xb385812 + _$me325864 + _$me325853 + "n64_p1.json", function(_BIGARRAY) {
                          jsonP1 = _BIGARRAY;
                          controllers = jsonP1
                      })
                  } else {
                      Neptq.getJSON("" + _$me325853 + _$me325853 + _$Tm4455687 + _$af325618 + _$me325864 + _$af329115 + _$me345994 + _$af329123 + _$af322519 + _$me325864 + _$me873848 + _$af340820 + _$af325618 + _$Tm489541 + _$me325853 + _$me325864 + _$me873848 + _$af340820 + _$me325853 + _$me873848 + _$af340820 + _$xb385812 + _$me325864 + _$me325853 + "P1.json", function(_BIGARRAY) {
                          jsonP1 = _BIGARRAY;
                          controllers = jsonP1
                      })
                  }
              };
              resetControll = 0;
              _0x142EB()
          } else {
              var _0x13E1B = localStorage.getItem("" + NeptunP + "_NJScontrollers");
              controllers = JSON.parse(_0x13E1B)
          }
      } else {
          var _0x13E1B = localStorage.getItem("" + romTitle + "_" + NeptunP + "_NJScontrollers");
          controllers = JSON.parse(_0x13E1B)
      }
  }

  function _0x14293(_0x13E1B) {
      _0x13E1B.preventDefault();
      Neptq(this).parent().addClass("" + NCSS + "is-active");
      Neptq(this).parent().siblings().removeClass("" + NCSS + "is-active");
      var _0x13E47 = Neptq(this).attr("href");
      Neptq("." + NCSS + "tabs-panel").not(_0x13E47).css("display", "none");
      Neptq(_0x13E47).fadeIn()
  }

  function _0x142BF() {
      Neptq("#" + NCSS + "popup2").css({
          "visibility": "visible",
          "opacity": "1",
          "zIndex": "5"
      })
  }

  function _0x142EB() {
      Neptq.each(controllers, function(_0x13E1B, _0x13E47) {
          Neptq.each(_0x13E47, function(_0x13E9F, _0x13E47) {
              var _0x13E73 = Neptq("." + NCSS + "setting-controllers ." + NCSS + "tabs-panel:eq(" + _0x13E1B + ") [data-id=" + _0x13E9F + "]");
              _0x13E73.attr("data-gamepad-index", _0x13E47.index).attr("data-value", _0x13E47.value).attr("data-type", _0x13E47.type).attr("data-gamepad-key", _0x13E47.gamepad_key);
              _0x13E73.val("" + keyMap[_0x13E47.value] + "" + buttonMap[_0x13E47.gamepad_key]);
              keyCod_tag = _0x13E47.value
          })
      });
      _0x13FA7()
  }

  function _0x14317(_0x13E1B) {
      if (_0x13E1B.key) {
          Neptq(this).val("" + keyMap[_0x13E1B.keyCode] + "");
          Neptq(this).attr("data-value", _0x13E1B.keyCode);
          Neptq(this).data("value", _0x13E1B.keyCode);
          _0x13FA7()
      };
      return false
  }

  function _0x14343() {
      _0x142BF()
  }

  function _0x1436F(_0x13E47) {
      if (popset === 1) {
          var _0x13E1B = Neptq("." + NCSS + "popup");
          var _0x13E73 = Neptq("." + NCSS + "overlay");
          if (!_0x13E1B.is(_0x13E47.target) && _0x13E1B.has(_0x13E47.target).length === 0) {
              _0x13E73.css({
                  "visibility": "hidden",
                  "opacity": "0",
                  "zIndex": "0"
              })
          }
      }
  }

  function _0x1439B() {
      Neptq("." + NCSS + "overlay").css({
          "visibility": "hidden",
          "opacity": "0",
          "zIndex": "0"
      });
      Neptq("." + NCSS + "controllers input").each(function(_0x13EF7, _0x13F7B) {
          var _0x13E1B = Neptq(_0x13F7B).attr("data-axes-key");
          var _0x13F4F = Neptq(_0x13F7B).attr("data-input-key");
          var _0x13ECB = Neptq(_0x13F7B).attr("data-gamepad-key");
          var _0x13F23 = Neptq(_0x13F7B).attr("data-index");
          var _0x13FD3 = Neptq(_0x13F7B).attr("data-value");
          var _0x13FA7 = Neptq(_0x13F7B).attr("data-type");
          var _0x13E47 = Neptq(_0x13F7B).attr("data-id");
          var _0x13E73 = Neptq(_0x13F7B).attr("id");
          var _0x13E9F = Neptq(_0x13F7B).attr("data-gamepad-index");
          if (!controllers[_0x13F23]) {
              controllers[_0x13F23] = {}
          };
          controllers[_0x13F23][_0x13E47] = {
              axes_key: _0x13E1B,
              input_key: _0x13F4F,
              gamepad_key: _0x13ECB,
              type: _0x13FA7,
              index: _0x13E9F,
              value: _0x13FD3,
              div_id: _0x13E73
          }
      });
      Neptq(this).prev("input").val(JSON.stringify(controllers));
      _0x141E3()
  }

  function _0x143C7() {
      Neptq("." + NCSS + "overlay").css({
          "visibility": "hidden",
          "opacity": "0",
          "zIndex": "0"
      });
      Neptq("." + NCSS + "controllers input").each(function(_0x13EF7, _0x13F7B) {
          var _0x13E1B = Neptq(_0x13F7B).attr("data-axes-key");
          var _0x13F4F = Neptq(_0x13F7B).attr("data-input-key");
          var _0x13ECB = Neptq(_0x13F7B).attr("data-gamepad-key");
          var _0x13F23 = Neptq(_0x13F7B).attr("data-index");
          var _0x13FD3 = Neptq(_0x13F7B).attr("data-value");
          var _0x13FA7 = Neptq(_0x13F7B).attr("data-type");
          var _0x13E47 = Neptq(_0x13F7B).attr("data-id");
          var _0x13E73 = Neptq(_0x13F7B).attr("id");
          var _0x13E9F = Neptq(_0x13F7B).attr("data-gamepad-index");
          if (!controllers[_0x13F23]) {
              controllers[_0x13F23] = {}
          };
          controllers[_0x13F23][_0x13E47] = {
              axes_key: _0x13E1B,
              input_key: _0x13F4F,
              gamepad_key: _0x13ECB,
              type: _0x13FA7,
              index: _0x13E9F,
              value: _0x13FD3,
              div_id: _0x13E73
          }
      });
      Neptq(this).prev("input").val(JSON.stringify(controllers));
      _0x1420F();
      _0x14267();
      _0x142EB()
  }

  function _0x143F3() {
      if (Neptq("#" + NCSS + "DGpad1").hasClass("" + NCSS + "EGpad")) {
          Neptq("#" + NCSS + "DGpad1").html(NJSOFF);
          disableGpadIndex = "enable"
      } else {
          Neptq("#" + NCSS + "DGpad1").html(NJSOn);
          disableGpadIndex = 0
      };
      Neptq("#" + NCSS + "DGpad1").toggleClass("" + NCSS + "EGpad")
  }

  function _0x1441F() {
      if (Neptq("#" + NCSS + "DGpad2").hasClass("" + NCSS + "EGpad")) {
          Neptq("#" + NCSS + "DGpad2").html(NJSOFF);
          disableGpadIndex = "enable"
      } else {
          Neptq("#" + NCSS + "DGpad2").html(NJSOn);
          disableGpadIndex = 1
      };
      Neptq("#" + NCSS + "DGpad2").toggleClass("" + NCSS + "EGpad")
  }

  function _0x1444B() {
      if (Neptq("#" + NCSS + "DGpad3").hasClass("" + NCSS + "EGpad")) {
          Neptq("#" + NCSS + "DGpad3").html(NJSOFF);
          disableGpadIndex = "enable"
      } else {
          Neptq("#" + NCSS + "DGpad3").html(NJSOn);
          disableGpadIndex = 2
      };
      Neptq("#" + NCSS + "DGpad3").toggleClass("" + NCSS + "EGpad")
  }

  function _0x14477() {
      if (Neptq("#" + NCSS + "DGpad4").hasClass("" + NCSS + "EGpad")) {
          Neptq("#" + NCSS + "DGpad4").html(NJSOFF);
          disableGpadIndex = "enable"
      } else {
          Neptq("#" + NCSS + "DGpad4").html(NJSOn);
          disableGpadIndex = 3
      };
      Neptq("#" + NCSS + "DGpad4").toggleClass("" + NCSS + "EGpad")
  }

  function _0x144A3(_0x13E1B) {
      if (_0x13E1B.gamepad.index === disableGpadIndex) {
          gpad = "disable"
      } else {
          gpad = "enable"
      }
  }

  function _0x144CF(_0x13E1B) {
      if (_0x13E1B.gamepad.index === disableGpadIndex) {
          gpad = "disable"
      } else {
          gpad = "enable"
      }
  }

  function _0x144FB(_0x13E1B) {
      switch (_0x13E1B.type) {
          case "mouseup":
              ;
          case "mousedown":
              var _0x13E9F;
              var _0x13E73;
              if (_0x13E1B.button === 0) {
                  _0x13E73 = 40
              } else {
                  if (_0x13E1B.button === 2) {
                      _0x13E73 = 41
                  } else {
                      break
                  }
              };
              if (_0x13E1B.type === "mouseup") {
                  _0x13E9F = 0
              } else {
                  _0x13E9F = 1
              };
              for (var _0x13E47 = 0; _0x13E47 < RI.contexts.length; _0x13E47++) {
                  HEAP8[RI.contexts[_0x13E47].state + _0x13E73 >> 0] = _0x13E9F
              };
              break
      }
  }

  function _0x14527(_0x13E73) {
      var _0x13E9F;
      switch (_0x13E73.type) {
          case "mousemove":
              var _0x1402B = 0;
              var _0x14057 = 0;
              var _0x13F4F = _0x13E73.clientX - Neptune.canvas.offsetLeft;
              var _0x13F7B = _0x13E73.clientY - Neptune.canvas.offsetTop;
              if (_0x13F4F < 0) {
                  _0x13F4F = 0;
                  _0x1402B = -Neptune.canvas.offsetWidth
              } else {
                  if (_0x13F4F > Neptune.canvas.offsetWidth) {
                      _0x13F4F = Neptune.canvas.offsetWidth;
                      _0x1402B = Neptune.canvas.offsetWidth
                  } else {
                      _0x1402B = _0x13F4F - RI.currentX
                  }
              };
              if (_0x13F7B < 0) {
                  _0x13F7B = 0;
                  _0x14057 = -Neptune.canvas.offsetHeight
              } else {
                  if (_0x13F7B > Neptune.canvas.offsetHeight) {
                      _0x13F7B = Neptune.canvas.offsetHeight;
                      _0x14057 = Neptune.canvas.offsetHeight
                  } else {
                      _0x14057 = _0x13F7B - RI.currentY
                  }
              };
              RI.currentX = _0x13F4F;
              RI.currentY = _0x13F7B;
              for (_0x13E9F = 0; _0x13E9F < RI.contexts.length; _0x13E9F++) {
                  HEAP32[RI.contexts[_0x13E9F].state + 32 >> 2] = _0x1402B;
                  HEAP32[RI.contexts[_0x13E9F].state + 36 >> 2] = _0x14057
              };
              break;
          case "keyup":
              ;
          case "keydown":
              var _0x13F23 = _0x13E73.keyCode;
              var _0x13FD3;
              for (var _0x13E9F in controllers) {
                  for (var _0x13ECB in controllers[_0x13E9F]) {
                      var _0x13E47 = controllers[_0x13E9F][_0x13ECB];
                      if (_0x13E47.value == _0x13F23) {
                          simulat_input = _0x13E47.input_key;
                          _0x13FD3 = true
                      };
                      if (_0x13FD3 == true) {} else {
                          simulat_input = "200"
                      }
                  }
              };
              if (simulat_input === null || simulat_input === undefined) {
                  simulat_input = 200
              };
              var _0x13EF7 = simulat_input;
              var _0x13FA7 = _0x13EF7 >> 3;
              var _0x13E1B = 1 << (_0x13EF7 & 7);
              if (_0x13FA7 >= 32) {
                  throw "key code error! bad code: " + _0x13EF7
              };
              for (_0x13E9F = 0; _0x13E9F < RI.contexts.length; _0x13E9F++) {
                  var _0x13FFF = HEAP8[RI.contexts[_0x13E9F].state + _0x13FA7 >> 0];
                  if (_0x13E73.type === "keyup") {
                      _0x13FFF &= ~_0x13E1B
                  } else {
                      _0x13FFF |= _0x13E1B
                  };
                  HEAP8[RI.contexts[_0x13E9F].state + _0x13FA7 >> 0] = _0x13FFF
              };
              break;
          case "blur":
              ;
          case "visibilitychange":
              for (_0x13E9F = 0; _0x13E9F < RI.contexts.length; _0x13E9F++) {
                  _memset(RI.contexts[_0x13E9F].state, 0, 42)
              };
              break
      }
  }

  function _0x14553() {
      var _0x13E47 = 35;
      var _0x13E73 = _0x13E47 >> 3;
      var _0x13E1B = 1 << (_0x13E47 & 7);
      if (_0x13E73 >= 32) {
          throw "key code error! bad code: " + _0x13E47
      };
      for (i = 0; i < RI.contexts.length; i++) {
          var _0x13E9F = HEAP8[RI.contexts[i].state + _0x13E73 >> 0];
          _0x13E9F &= ~_0x13E1B;
          HEAP8[RI.contexts[i].state + _0x13E73 >> 0] = _0x13E9F
      };
      if (NjsconsoleInfo.indexOf("RetroArch [INFO] :: Ejected virtual disk tray.") > -1) {
          Neptq("." + NCSS + "nep_swap_disc").addClass("" + NCSS + "active_info");
          setTimeout(function() {
              Neptq("." + NCSS + "nep_swap_disc").removeClass("" + NCSS + "active_info");
              Neptq("." + NCSS + "nep_swap_disc").attr("data-swap", "0")
          }, 8000);
          localStorage.setItem("NJScd", JSON.stringify(0));
          setTimeout(test.DiskSwap, 500);
          return false
      }
  }

  function _0x1457F() {
      var _0x13E47 = 35;
      var _0x13E73 = _0x13E47 >> 3;
      var _0x13E1B = 1 << (_0x13E47 & 7);
      if (_0x13E73 >= 32) {
          throw "key code error! bad code: " + _0x13E47
      };
      for (i = 0; i < RI.contexts.length; i++) {
          var _0x13E9F = HEAP8[RI.contexts[i].state + _0x13E73 >> 0];
          _0x13E9F |= _0x13E1B;
          HEAP8[RI.contexts[i].state + _0x13E73 >> 0] = _0x13E9F
      };
      setTimeout(test.DiskSwapFinish, 500)
  }

  function _0x145AB() {
      if (RI.contexts.length === 0) {
          function _0x13E47() {
              if (simulat_input === null || simulat_input === undefined || gpad === "disable") {
                  simulat_input = 200
              };
              var _0x13E47 = simulat_input;
              var _0x13E73 = _0x13E47 >> 3;
              var _0x13E1B = 1 << (_0x13E47 & 7);
              if (_0x13E73 >= 32) {
                  throw "key code error! bad code: " + _0x13E47
              };
              for (i = 0; i < RI.contexts.length; i++) {
                  var _0x13E9F = HEAP8[RI.contexts[i].state + _0x13E73 >> 0];
                  _0x13E9F |= _0x13E1B;
                  HEAP8[RI.contexts[i].state + _0x13E73 >> 0] = _0x13E9F
              }
          }

          function _0x13ECB() {
              if (simulat_input === null || simulat_input === undefined || gpad === "disable") {
                  simulat_input = 200
              };
              var _0x13E47 = simulat_input;
              var _0x13E73 = _0x13E47 >> 3;
              var _0x13E1B = 1 << (_0x13E47 & 7);
              if (_0x13E73 >= 32) {
                  throw "key code error! bad code: " + _0x13E47
              };
              for (i = 0; i < RI.contexts.length; i++) {
                  var _0x13E9F = HEAP8[RI.contexts[i].state + _0x13E73 >> 0];
                  _0x13E9F &= ~_0x13E1B;
                  HEAP8[RI.contexts[i].state + _0x13E73 >> 0] = _0x13E9F
              }
          }

          function _0x13E9F() {
              var _0x13E47 = simulat_inputDpad;
              var _0x13E73 = _0x13E47 >> 3;
              var _0x13E1B = 1 << (_0x13E47 & 7);
              if (_0x13E73 >= 32) {
                  throw "key code error! bad code: " + _0x13E47
              };
              for (i = 0; i < RI.contexts.length; i++) {
                  var _0x13E9F = HEAP8[RI.contexts[i].state + _0x13E73 >> 0];
                  _0x13E9F &= ~_0x13E1B;
                  HEAP8[RI.contexts[i].state + _0x13E73 >> 0] = _0x13E9F
              }
          }

          function _0x13E73() {
              var _0x13E47 = simulat_inputDpad;
              var _0x13E73 = _0x13E47 >> 3;
              var _0x13E1B = 1 << (_0x13E47 & 7);
              if (_0x13E73 >= 32) {
                  throw "key code error! bad code: " + _0x13E47
              };
              for (i = 0; i < RI.contexts.length; i++) {
                  var _0x13E9F = HEAP8[RI.contexts[i].state + _0x13E73 >> 0];
                  _0x13E9F |= _0x13E1B;
                  HEAP8[RI.contexts[i].state + _0x13E73 >> 0] = _0x13E9F
              }
          }

          function _0x13E1B(_0x13E1B, _0x13E47) {
              Neptq(":focus").val(buttonMap[_0x13E1B]).attr("data-type", 2).attr("data-gamepad-key", _0x13E1B).attr("data-axes-key", _0x13E47)
          }
          gamepad.bind(Gamepad.Event.AXIS_CHANGED, function(_0x13F23) {
              if (Neptq(":focus").closest("." + NCSS + "controllers").length > 0) {
                  Neptq(":focus").attr("data-gamepad-index", _0x13F23.gamepad.index);
                  if (_0x13F23.axis == "LEFT_STICK_X") {
                      if (_0x13F23.value >= 0.5) {
                          axes_stick = 17;
                          axes_stick_up = 17;
                          _0x13E1B(axes_stick, axes_stick_up)
                      };
                      if (_0x13F23.value <= -0.5) {
                          axes_stick = 18;
                          axes_stick_up = 18;
                          _0x13E1B(axes_stick, axes_stick_up)
                      }
                  };
                  if (_0x13F23.axis == "LEFT_STICK_Y") {
                      if (_0x13F23.value >= 0.5) {
                          axes_stick = 19;
                          axes_stick_up = 19;
                          _0x13E1B(axes_stick, axes_stick_up)
                      };
                      if (_0x13F23.value <= -0.5) {
                          axes_stick = 20;
                          axes_stick_up = 20;
                          _0x13E1B(axes_stick, axes_stick_up)
                      }
                  };
                  if (_0x13F23.axis == "RIGHT_STICK_X") {
                      if (_0x13F23.value >= 0.5) {
                          axes_stick = 21;
                          axes_stick_up = 21;
                          _0x13E1B(axes_stick, axes_stick_up)
                      };
                      if (_0x13F23.value <= -0.5) {
                          axes_stick = 22;
                          axes_stick_up = 22;
                          _0x13E1B(axes_stick, axes_stick_up)
                      }
                  };
                  if (_0x13F23.axis == "RIGHT_STICK_Y") {
                      if (_0x13F23.value >= 0.5) {
                          axes_stick = 23;
                          axes_stick_up = 23;
                          _0x13E1B(axes_stick, axes_stick_up)
                      };
                      if (_0x13F23.value <= -0.5) {
                          axes_stick = 24;
                          axes_stick_up = 24;
                          _0x13E1B(axes_stick, axes_stick_up)
                      }
                  }
              };
              if (_0x13F23.axis == "DPAD_STICK") {
                  if (_0x13F23.value == -0.4285714030265808) {
                      simulat_inputDpad = 68;
                      _0x13E73()
                  };
                  if (_0x13F23.value == 0.7142857313156128) {
                      simulat_inputDpad = 65;
                      _0x13E73()
                  };
                  if (_0x13F23.value == 0.14285719394683838) {
                      simulat_inputDpad = 83;
                      _0x13E73()
                  };
                  if (_0x13F23.value == -1) {
                      simulat_inputDpad = 87;
                      _0x13E73()
                  };
                  if (_0x13F23.value == 1) {
                      simulat_inputDpad = 87;
                      _0x13E9F()
                  };
                  if (_0x13F23.value == 1) {
                      simulat_inputDpad = 83;
                      _0x13E9F()
                  };
                  if (_0x13F23.value == 1) {
                      simulat_inputDpad = 65;
                      _0x13E9F()
                  };
                  if (_0x13F23.value == 1) {
                      simulat_inputDpad = 68;
                      _0x13E9F()
                  }
              };
              if (_0x13F23.axis == "LEFT_STICK_X") {
                  if (_0x13F23.value >= 0.5) {
                      axes_stick = 17
                  } else {
                      if (_0x13F23.value <= -0.5) {
                          axes_stick = 18
                      } else {
                          axes_stick = 0
                      }
                  };
                  if (_0x13F23.value <= 0.5) {
                      axes_stick_up = 18;
                      for (var _0x13F4F in controllers) {
                          for (var _0x13F7B in controllers[_0x13F4F]) {
                              var _0x13EF7 = controllers[_0x13F4F][_0x13F7B];
                              if (_0x13EF7.gamepad_key == axes_stick_up && _0x13F23.gamepad.index == _0x13EF7.index) {
                                  simulat_input = _0x13EF7.input_key
                              } else {
                                  simulat_input = null
                              };
                              _0x13ECB()
                          }
                      }
                  };
                  if (_0x13F23.value >= -0.5) {
                      axes_stick_up = 17;
                      for (var _0x13F4F in controllers) {
                          for (var _0x13F7B in controllers[_0x13F4F]) {
                              var _0x13EF7 = controllers[_0x13F4F][_0x13F7B];
                              if (_0x13EF7.gamepad_key == axes_stick_up && _0x13F23.gamepad.index == _0x13EF7.index) {
                                  simulat_input = _0x13EF7.input_key
                              } else {
                                  simulat_input = null
                              };
                              _0x13ECB()
                          }
                      }
                  };
                  for (var _0x13F4F in controllers) {
                      for (var _0x13F7B in controllers[_0x13F4F]) {
                          var _0x13EF7 = controllers[_0x13F4F][_0x13F7B];
                          if (_0x13EF7.gamepad_key == axes_stick && _0x13F23.gamepad.index == _0x13EF7.index) {
                              simulat_input = _0x13EF7.input_key
                          } else {
                              simulat_input = null
                          };
                          _0x13E47()
                      }
                  }
              };
              if (_0x13F23.axis == "LEFT_STICK_Y") {
                  if (_0x13F23.value >= 0.5) {
                      axes_stick = 19
                  } else {
                      if (_0x13F23.value <= -0.5) {
                          axes_stick = 20
                      } else {
                          axes_stick = 0
                      }
                  };
                  if (_0x13F23.value <= 0.5) {
                      axes_stick_up = 20;
                      for (var _0x13F4F in controllers) {
                          for (var _0x13F7B in controllers[_0x13F4F]) {
                              var _0x13EF7 = controllers[_0x13F4F][_0x13F7B];
                              if (_0x13EF7.gamepad_key == axes_stick_up && _0x13F23.gamepad.index == _0x13EF7.index) {
                                  simulat_input = _0x13EF7.input_key
                              } else {
                                  simulat_input = null
                              };
                              _0x13ECB()
                          }
                      }
                  };
                  if (_0x13F23.value >= -0.5) {
                      axes_stick_up = 19;
                      for (var _0x13F4F in controllers) {
                          for (var _0x13F7B in controllers[_0x13F4F]) {
                              var _0x13EF7 = controllers[_0x13F4F][_0x13F7B];
                              if (_0x13EF7.gamepad_key == axes_stick_up && _0x13F23.gamepad.index == _0x13EF7.index) {
                                  simulat_input = _0x13EF7.input_key
                              } else {
                                  simulat_input = null
                              };
                              _0x13ECB()
                          }
                      }
                  };
                  for (var _0x13F4F in controllers) {
                      for (var _0x13F7B in controllers[_0x13F4F]) {
                          var _0x13EF7 = controllers[_0x13F4F][_0x13F7B];
                          if (_0x13EF7.gamepad_key == axes_stick && _0x13F23.gamepad.index == _0x13EF7.index) {
                              simulat_input = _0x13EF7.input_key
                          } else {
                              simulat_input = null
                          };
                          _0x13E47()
                      }
                  }
              };
              if (_0x13F23.axis == "RIGHT_STICK_X") {
                  if (_0x13F23.value >= 0.5) {
                      axes_stick = 21
                  } else {
                      if (_0x13F23.value <= -0.5) {
                          axes_stick = 22
                      } else {
                          axes_stick = 0
                      }
                  };
                  if (_0x13F23.value <= 0.5) {
                      axes_stick_up = 22;
                      for (var _0x13F4F in controllers) {
                          for (var _0x13F7B in controllers[_0x13F4F]) {
                              var _0x13EF7 = controllers[_0x13F4F][_0x13F7B];
                              if (_0x13EF7.gamepad_key == axes_stick_up && _0x13F23.gamepad.index == _0x13EF7.index) {
                                  simulat_input = _0x13EF7.input_key
                              } else {
                                  simulat_input = null
                              };
                              _0x13ECB()
                          }
                      }
                  };
                  if (_0x13F23.value >= -0.5) {
                      axes_stick_up = 21;
                      for (var _0x13F4F in controllers) {
                          for (var _0x13F7B in controllers[_0x13F4F]) {
                              var _0x13EF7 = controllers[_0x13F4F][_0x13F7B];
                              if (_0x13EF7.gamepad_key == axes_stick_up && _0x13F23.gamepad.index == _0x13EF7.index) {
                                  simulat_input = _0x13EF7.input_key
                              } else {
                                  simulat_input = null
                              };
                              _0x13ECB()
                          }
                      }
                  };
                  for (var _0x13F4F in controllers) {
                      for (var _0x13F7B in controllers[_0x13F4F]) {
                          var _0x13EF7 = controllers[_0x13F4F][_0x13F7B];
                          if (_0x13EF7.gamepad_key == axes_stick && _0x13F23.gamepad.index == _0x13EF7.index) {
                              simulat_input = _0x13EF7.input_key
                          } else {
                              simulat_input = null
                          };
                          _0x13E47()
                      }
                  }
              };
              if (_0x13F23.axis == "RIGHT_STICK_Y") {
                  if (_0x13F23.value >= 0.5) {
                      axes_stick = 23
                  } else {
                      if (_0x13F23.value <= -0.5) {
                          axes_stick = 24
                      } else {
                          axes_stick = 0
                      }
                  };
                  if (_0x13F23.value <= 0.5) {
                      axes_stick_up = 24;
                      for (var _0x13F4F in controllers) {
                          for (var _0x13F7B in controllers[_0x13F4F]) {
                              var _0x13EF7 = controllers[_0x13F4F][_0x13F7B];
                              if (_0x13EF7.gamepad_key == axes_stick_up && _0x13F23.gamepad.index == _0x13EF7.index) {
                                  simulat_input = _0x13EF7.input_key
                              } else {
                                  simulat_input = null
                              };
                              _0x13ECB()
                          }
                      }
                  };
                  if (_0x13F23.value >= -0.5) {
                      axes_stick_up = 23;
                      for (var _0x13F4F in controllers) {
                          for (var _0x13F7B in controllers[_0x13F4F]) {
                              var _0x13EF7 = controllers[_0x13F4F][_0x13F7B];
                              if (_0x13EF7.gamepad_key == axes_stick_up && _0x13F23.gamepad.index == _0x13EF7.index) {
                                  simulat_input = _0x13EF7.input_key
                              } else {
                                  simulat_input = null
                              };
                              _0x13ECB()
                          }
                      }
                  };
                  for (var _0x13F4F in controllers) {
                      for (var _0x13F7B in controllers[_0x13F4F]) {
                          var _0x13EF7 = controllers[_0x13F4F][_0x13F7B];
                          if (_0x13EF7.gamepad_key == axes_stick && _0x13F23.gamepad.index == _0x13EF7.index) {
                              simulat_input = _0x13EF7.input_key
                          } else {
                              simulat_input = null
                          };
                          _0x13E47()
                      }
                  }
              }
          });
          gamepad.bind(Gamepad.Event.BUTTON_DOWN, function(_0x13E73) {
              if (Neptq(":focus").closest("." + NCSS + "controllers").length > 0) {
                  Neptq(":focus").val(keyMap[keyCod_tag] + "" + buttonMap[_0x13E73.control]).attr("data-type", 2).attr("data-gamepad-key", _0x13E73.control).attr("data-gamepad-index", _0x13E73.gamepad.index)
              };
              for (var _0x13E9F in controllers) {
                  for (var _0x13ECB in controllers[_0x13E9F]) {
                      var _0x13E47 = controllers[_0x13E9F][_0x13ECB];
                      if (_0x13E47.gamepad_key == _0x13E73.control && _0x13E73.gamepad.index == _0x13E47.index) {
                          simulat_input = _0x13E47.input_key
                      }
                  }
              };
              if (simulat_input === null || simulat_input === undefined || gpad === "disable") {
                  simulat_input = 200
              };
              var _0x13EF7 = simulat_input;
              var _0x13F23 = _0x13EF7 >> 3;
              var _0x13E1B = 1 << (_0x13EF7 & 7);
              if (_0x13F23 >= 32) {
                  throw "key code error! bad code: " + _0x13EF7
              };
              for (_0x13E9F = 0; _0x13E9F < RI.contexts.length; _0x13E9F++) {
                  var _0x13F4F = HEAP8[RI.contexts[_0x13E9F].state + _0x13F23 >> 0];
                  _0x13F4F |= _0x13E1B;
                  HEAP8[RI.contexts[_0x13E9F].state + _0x13F23 >> 0] = _0x13F4F
              }
          });
          gamepad.bind(Gamepad.Event.BUTTON_UP, function(_0x13E73) {
              for (var _0x13E9F in controllers) {
                  for (var _0x13ECB in controllers[_0x13E9F]) {
                      var _0x13E47 = controllers[_0x13E9F][_0x13ECB];
                      if (_0x13E47.gamepad_key == _0x13E73.control && _0x13E73.gamepad.index == _0x13E47.index) {
                          simulat_input = _0x13E47.input_key
                      }
                  }
              };
              if (simulat_input === null || simulat_input === undefined || gpad === "disable") {
                  simulat_input = 200
              };
              var _0x13EF7 = simulat_input;
              var _0x13F23 = _0x13EF7 >> 3;
              var _0x13E1B = 1 << (_0x13EF7 & 7);
              if (_0x13F23 >= 32) {
                  throw "key code error! bad code: " + _0x13EF7
              };
              for (_0x13E9F = 0; _0x13E9F < RI.contexts.length; _0x13E9F++) {
                  var _0x13F4F = HEAP8[RI.contexts[_0x13E9F].state + _0x13F23 >> 0];
                  _0x13F4F &= ~_0x13E1B;
                  HEAP8[RI.contexts[_0x13E9F].state + _0x13F23 >> 0] = _0x13F4F
              };
              return
          });
          focusElement[0].addEventListener("keyup", RI.eventHandler, false);
          focusElement[0].addEventListener("keydown", RI.eventHandler, false);
          focusElement[0].addEventListener("mousemove", RI.eventHandler, false);
          focusElement[0].addEventListener("mouseup", RI.canvasEventHandler, false);
          focusElement[0].addEventListener("mousedown", RI.canvasEventHandler, false);
          focusElement[0].addEventListener("blur", RI.eventHandler, false);
          focusElement[0].addEventListener("onvisbilitychange", RI.eventHandler, false)
      };
      if (RI.temp === null) {
          RI.temp = _malloc(42)
      };
      var _0x13EF7 = _malloc(42);
      _memset(_0x13EF7, 0, 42);
      RI.contexts.push({
          state: _0x13EF7
      });
      return RI.contexts.length
  }

  function _0x145D7(_0x13E1B) {
      _0x13E1B -= 1;
      var _0x13E47 = RI.contexts[_0x13E1B].state;
      _memcpy(RI.temp, _0x13E47, 42);
      HEAP32[RI.contexts[_0x13E1B].state + 32 >> 2] = 0;
      HEAP32[RI.contexts[_0x13E1B].state + 36 >> 2] = 0;
      return RI.temp
  }

  function _0x14603(_0x13E1B) {
      if (_0x13E1B === RI.contexts.length) {
          RI.contexts.pop();
          if (RI.contexts.length === 0) {
              Neptune.canvas.removeEventListener("keyup", RI.eventHandler, false);
              Neptune.canvas.removeEventListener("keydown", RI.eventHandler, false);
              Neptune.canvas.removeEventListener("mousemove", RI.eventHandler, false);
              Neptune.canvas.removeEventListener("mouseup", RI.canvasEventHandler, false);
              Neptune.canvas.removeEventListener("mousedown", RI.canvasEventHandler, false);
              Neptune.canvas.removeEventListener("blur", RI.eventHandler, false);
              Neptune.canvas.removeEventListener("onvisbilitychange", RI.eventHandler, false)
          }
      }
  }

  function _0x1462F() {
      Neptq("#" + NCSS + "popup1").css("visibility", "visible");
      Neptq("#" + NCSS + "popup1").css("opacity", "1");
      Neptq("#" + NCSS + "popup1").css("zIndex", "5");
      Neptq("#" + NCSS + "popup1").focus();
      Neptq("." + NCSS + "charkey").css("display", "none");
      elementData = Neptq(this).attr("id");

      function _0x13E1B() {
          Neptq("#" + NCSS + "popup1").bind("keydown", function(_0x13E47) {
              var _0x13E9F = _0x13E47.keyCode;
              var _0x13E1B = keyMap[_0x13E47.keyCode];
              Neptq("input").each(function() {
                  theHidden = Neptq(this).attr("id");
                  attrData = Neptq(this).attr("data-value");
                  if (attrData == _0x13E9F) {
                      Neptq("#" + theHidden).attr("data-value", "4545")
                  }
              });
              Neptq("." + NCSS + "charkey").html(ButSetTolang + " " + _0x13E1B);
              Neptq("." + NCSS + "charkey").css("display", "block");
              if (elementData === "" + NCSS + "ConStart") {
                  Neptq("#NJSSTART" + Player + "").attr("data-value", _0x13E9F)
              };
              if (elementData === "" + NCSS + "ConSelect") {
                  Neptq("#NJSSELECT" + Player + "").attr("data-value", _0x13E9F)
              };
              if (elementData === "" + NCSS + "ConL1") {
                  Neptq("#NJSKEYL" + Player + "").attr("data-value", _0x13E9F)
              };
              if (elementData === "" + NCSS + "ConR1") {
                  Neptq("#NJSKEYR" + Player + "").attr("data-value", _0x13E9F)
              };
              if (elementData === "" + NCSS + "ConL2") {
                  Neptq("#NJSKEYL2" + Player + "").attr("data-value", _0x13E9F)
              };
              if (elementData === "" + NCSS + "ConR2") {
                  Neptq("#NJSKEYR2" + Player + "").attr("data-value", _0x13E9F)
              };
              if (elementData === "" + NCSS + "ConL3") {
                  Neptq("#NJSKEYL3" + Player + "").attr("data-value", _0x13E9F)
              };
              if (elementData === "" + NCSS + "ConR3") {
                  Neptq("#NJSKEYR3" + Player + "").attr("data-value", _0x13E9F)
              };
              if (elementData === "" + NCSS + "cui_button1") {
                  Neptq("#NJSKEYX" + Player + "").attr("data-value", _0x13E9F)
              };
              if (elementData === "" + NCSS + "cui_button2") {
                  Neptq("#NJSKEYA" + Player + "").attr("data-value", _0x13E9F)
              };
              if (elementData === "" + NCSS + "cui_button3") {
                  Neptq("#NJSKEYB" + Player + "").attr("data-value", _0x13E9F)
              };
              if (elementData === "" + NCSS + "cui_button4") {
                  Neptq("#NJSKEYY" + Player + "").attr("data-value", _0x13E9F)
              };
              if (elementData === "" + NCSS + "cui_button5") {
                  Neptq("#NJSKEYL" + Player + "").attr("data-value", _0x13E9F)
              };
              if (elementData === "" + NCSS + "cui_button6") {
                  Neptq("#NJSKEYR" + Player + "").attr("data-value", _0x13E9F)
              };
              if (elementData === "" + NCSS + "cui_button7") {
                  Neptq("#NJSKEYL2" + Player + "").attr("data-value", _0x13E9F)
              };
              if (elementData === "" + NCSS + "cui_button8") {
                  Neptq("#NJSKEYR2" + Player + "").attr("data-value", _0x13E9F)
              };
              if (elementData === "" + NCSS + "cui_button13") {
                  Neptq("#NJSKEYL3" + Player + "").attr("data-value", _0x13E9F)
              };
              if (elementData === "" + NCSS + "cui_button14") {
                  Neptq("#NJSKEYR3" + Player + "").attr("data-value", _0x13E9F)
              };
              if (elementData === "" + NCSS + "cui_button9") {
                  Neptq("#NJSKEYR_A_UP" + Player + "").attr("data-value", _0x13E9F)
              };
              if (elementData === "" + NCSS + "cui_button10") {
                  Neptq("#NJSKEYR_A_DOWN" + Player + "").attr("data-value", _0x13E9F)
              };
              if (elementData === "" + NCSS + "cui_button11") {
                  Neptq("#NJSKEYR_A_LEFT" + Player + "").attr("data-value", _0x13E9F)
              };
              if (elementData === "" + NCSS + "cui_button12") {
                  Neptq("#NJSKEYR_A_RIGHT" + Player + "").attr("data-value", _0x13E9F)
              };
              if (elementData === "" + NCSS + "dpadu") {
                  Neptq("#NJSUP" + Player + "").attr("data-value", _0x13E9F)
              };
              if (elementData === "" + NCSS + "dpadd") {
                  Neptq("#NJSDOWN" + Player + "").attr("data-value", _0x13E9F)
              };
              if (elementData === "" + NCSS + "dpadl") {
                  Neptq("#NJSLEFT" + Player + "").attr("data-value", _0x13E9F)
              };
              if (elementData === "" + NCSS + "dpadr") {
                  Neptq("#NJSRIGHT" + Player + "").attr("data-value", _0x13E9F)
              };
              if (elementData === "" + NCSS + "AnalogLu") {
                  Neptq("#NJSKEYL_A_UP" + Player + "").attr("data-value", _0x13E9F)
              };
              if (elementData === "" + NCSS + "AnalogLd") {
                  Neptq("#NJSKEYL_A_DOWN" + Player + "").attr("data-value", _0x13E9F)
              };
              if (elementData === "" + NCSS + "AnalogLl") {
                  Neptq("#NJSKEYL_A_LEFT" + Player + "").attr("data-value", _0x13E9F)
              };
              if (elementData === "" + NCSS + "AnalogLr") {
                  Neptq("#NJSKEYL_A_RIGHT" + Player + "").attr("data-value", _0x13E9F)
              };
              if (elementData === "" + NCSS + "AnalogRu") {
                  Neptq("#NJSKEYR_A_UP" + Player + "").attr("data-value", _0x13E9F)
              };
              if (elementData === "" + NCSS + "AnalogRd") {
                  Neptq("#NJSKEYR_A_DOWN" + Player + "").attr("data-value", _0x13E9F)
              };
              if (elementData === "" + NCSS + "AnalogRl") {
                  Neptq("#NJSKEYR_A_LEFT" + Player + "").attr("data-value", _0x13E9F)
              };
              if (elementData === "" + NCSS + "AnalogRr") {
                  Neptq("#NJSKEYR_A_RIGHT" + Player + "").attr("data-value", _0x13E9F)
              };
              _0x13FA7();
              var _0x13E73 = setTimeout(function() {
                  Neptq("#" + NCSS + "popup1").css("visibility", "hidden");
                  Neptq("#" + NCSS + "popup1").css("opacity", "0");
                  Neptq("#" + NCSS + "popup1").css("zIndex", "0");
                  Neptq("." + NCSS + "tabs-content ." + NCSS + "controllers").focus()
              }, 600)
          });
          gamepad.bind(Gamepad.Event.BUTTON_UP, function(_0x13E47) {
              if (Neptq("#" + NCSS + "popup1").is(":focus")) {
                  var _0x13E1B = buttonMap[_0x13E47.control];
                  Neptq("input").each(function() {
                      theHidden = Neptq(this).attr("id");
                      attrData = Neptq(this).attr("data-gamepad-key");
                      DataIndex = Neptq(this).attr("data-gamepad-index");
                      if (attrData == _0x13E47.control && DataIndex == _0x13E47.gamepad.index) {
                          Neptq("#" + theHidden).attr("data-gamepad-key", "4545")
                      }
                  });
                  Neptq("." + NCSS + "charkey").html("Button set to " + _0x13E1B + " gamepad \u2116" + (_0x13E47.gamepad.index + 1));
                  Neptq("." + NCSS + "charkey").css("display", "block");
                  if (elementData === "" + NCSS + "ConStart") {
                      Neptq("#NJSSTART" + Player + "").attr("data-type", 2).attr("data-gamepad-key", _0x13E47.control).attr("data-gamepad-index", _0x13E47.gamepad.index)
                  };
                  if (elementData === "" + NCSS + "ConSelect") {
                      Neptq("#NJSSELECT" + Player + "").attr("data-type", 2).attr("data-gamepad-key", _0x13E47.control).attr("data-gamepad-index", _0x13E47.gamepad.index)
                  };
                  if (elementData === "" + NCSS + "ConL1") {
                      Neptq("#NJSKEYL" + Player + "").attr("data-type", 2).attr("data-gamepad-key", _0x13E47.control).attr("data-gamepad-index", _0x13E47.gamepad.index)
                  };
                  if (elementData === "" + NCSS + "ConR1") {
                      Neptq("#NJSKEYR" + Player + "").attr("data-type", 2).attr("data-gamepad-key", _0x13E47.control).attr("data-gamepad-index", _0x13E47.gamepad.index)
                  };
                  if (elementData === "" + NCSS + "ConL2") {
                      Neptq("#NJSKEYL2" + Player + "").attr("data-type", 2).attr("data-gamepad-key", _0x13E47.control).attr("data-gamepad-index", _0x13E47.gamepad.index)
                  };
                  if (elementData === "" + NCSS + "ConR2") {
                      Neptq("#NJSKEYR2" + Player + "").attr("data-type", 2).attr("data-gamepad-key", _0x13E47.control).attr("data-gamepad-index", _0x13E47.gamepad.index)
                  };
                  if (elementData === "" + NCSS + "ConL3") {
                      Neptq("#NJSKEYL3" + Player + "").attr("data-type", 2).attr("data-gamepad-key", _0x13E47.control).attr("data-gamepad-index", _0x13E47.gamepad.index)
                  };
                  if (elementData === "" + NCSS + "ConR3") {
                      Neptq("#NJSKEYR3" + Player + "").attr("data-type", 2).attr("data-gamepad-key", _0x13E47.control).attr("data-gamepad-index", _0x13E47.gamepad.index)
                  };
                  if (elementData === "" + NCSS + "cui_button1") {
                      Neptq("#NJSKEYX" + Player + "").attr("data-type", 2).attr("data-gamepad-key", _0x13E47.control).attr("data-gamepad-index", _0x13E47.gamepad.index)
                  };
                  if (elementData === "" + NCSS + "cui_button2") {
                      Neptq("#NJSKEYA" + Player + "").attr("data-type", 2).attr("data-gamepad-key", _0x13E47.control).attr("data-gamepad-index", _0x13E47.gamepad.index)
                  };
                  if (elementData === "" + NCSS + "cui_button3") {
                      Neptq("#NJSKEYB" + Player + "").attr("data-type", 2).attr("data-gamepad-key", _0x13E47.control).attr("data-gamepad-index", _0x13E47.gamepad.index)
                  };
                  if (elementData === "" + NCSS + "cui_button4") {
                      Neptq("#NJSKEYY" + Player + "").attr("data-type", 2).attr("data-gamepad-key", _0x13E47.control).attr("data-gamepad-index", _0x13E47.gamepad.index)
                  };
                  if (elementData === "" + NCSS + "cui_button5") {
                      Neptq("#NJSKEYL" + Player + "").attr("data-type", 2).attr("data-gamepad-key", _0x13E47.control).attr("data-gamepad-index", _0x13E47.gamepad.index)
                  };
                  if (elementData === "" + NCSS + "cui_button6") {
                      Neptq("#NJSKEYR" + Player + "").attr("data-type", 2).attr("data-gamepad-key", _0x13E47.control).attr("data-gamepad-index", _0x13E47.gamepad.index)
                  };
                  if (elementData === "" + NCSS + "cui_button7") {
                      Neptq("#NJSKEYL2" + Player + "").attr("data-type", 2).attr("data-gamepad-key", _0x13E47.control).attr("data-gamepad-index", _0x13E47.gamepad.index)
                  };
                  if (elementData === "" + NCSS + "cui_button8") {
                      Neptq("#NJSKEYR2" + Player + "").attr("data-type", 2).attr("data-gamepad-key", _0x13E47.control).attr("data-gamepad-index", _0x13E47.gamepad.index)
                  };
                  if (elementData === "" + NCSS + "cui_button13") {
                      Neptq("#NJSKEYL3" + Player + "").attr("data-type", 2).attr("data-gamepad-key", _0x13E47.control).attr("data-gamepad-index", _0x13E47.gamepad.index)
                  };
                  if (elementData === "" + NCSS + "cui_button14") {
                      Neptq("#NJSKEYR3" + Player + "").attr("data-type", 2).attr("data-gamepad-key", _0x13E47.control).attr("data-gamepad-index", _0x13E47.gamepad.index)
                  };
                  if (elementData === "" + NCSS + "cui_button9") {
                      Neptq("#NJSKEYR_A_UP" + Player + "").attr("data-type", 2).attr("data-gamepad-key", _0x13E47.control).attr("data-gamepad-index", _0x13E47.gamepad.index)
                  };
                  if (elementData === "" + NCSS + "cui_button10") {
                      Neptq("#NJSKEYR_A_DOWN" + Player + "").attr("data-type", 2).attr("data-gamepad-key", _0x13E47.control).attr("data-gamepad-index", _0x13E47.gamepad.index)
                  };
                  if (elementData === "" + NCSS + "cui_button11") {
                      Neptq("#NJSKEYR_A_LEFT" + Player + "").attr("data-type", 2).attr("data-gamepad-key", _0x13E47.control).attr("data-gamepad-index", _0x13E47.gamepad.index)
                  };
                  if (elementData === "" + NCSS + "cui_button12") {
                      Neptq("#NJSKEYR_A_RIGHT" + Player + "").attr("data-type", 2).attr("data-gamepad-key", _0x13E47.control).attr("data-gamepad-index", _0x13E47.gamepad.index)
                  };
                  if (elementData === "" + NCSS + "dpadu") {
                      Neptq("#NJSUP" + Player + "").attr("data-type", 2).attr("data-gamepad-key", _0x13E47.control).attr("data-gamepad-index", _0x13E47.gamepad.index)
                  };
                  if (elementData === "" + NCSS + "dpadd") {
                      Neptq("#NJSDOWN" + Player + "").attr("data-type", 2).attr("data-gamepad-key", _0x13E47.control).attr("data-gamepad-index", _0x13E47.gamepad.index)
                  };
                  if (elementData === "" + NCSS + "dpadl") {
                      Neptq("#NJSLEFT" + Player + "").attr("data-type", 2).attr("data-gamepad-key", _0x13E47.control).attr("data-gamepad-index", _0x13E47.gamepad.index)
                  };
                  if (elementData === "" + NCSS + "dpadr") {
                      Neptq("#NJSRIGHT" + Player + "").attr("data-type", 2).attr("data-gamepad-key", _0x13E47.control).attr("data-gamepad-index", _0x13E47.gamepad.index)
                  };
                  if (elementData === "" + NCSS + "AnalogLu") {
                      Neptq("#NJSKEYL_A_UP" + Player + "").attr("data-type", 2).attr("data-gamepad-key", _0x13E47.control).attr("data-gamepad-index", _0x13E47.gamepad.index)
                  };
                  if (elementData === "" + NCSS + "AnalogLd") {
                      Neptq("#NJSKEYL_A_DOWN" + Player + "").attr("data-type", 2).attr("data-gamepad-key", _0x13E47.control).attr("data-gamepad-index", _0x13E47.gamepad.index)
                  };
                  if (elementData === "" + NCSS + "AnalogLl") {
                      Neptq("#NJSKEYL_A_LEFT" + Player + "").attr("data-type", 2).attr("data-gamepad-key", _0x13E47.control).attr("data-gamepad-index", _0x13E47.gamepad.index)
                  };
                  if (elementData === "" + NCSS + "AnalogLr") {
                      Neptq("#NJSKEYL_A_RIGHT" + Player + "").attr("data-type", 2).attr("data-gamepad-key", _0x13E47.control).attr("data-gamepad-index", _0x13E47.gamepad.index)
                  };
                  if (elementData === "" + NCSS + "AnalogRu") {
                      Neptq("#NJSKEYR_A_UP" + Player + "").attr("data-type", 2).attr("data-gamepad-key", _0x13E47.control).attr("data-gamepad-index", _0x13E47.gamepad.index)
                  };
                  if (elementData === "" + NCSS + "AnalogRd") {
                      Neptq("#NJSKEYR_A_DOWN" + Player + "").attr("data-type", 2).attr("data-gamepad-key", _0x13E47.control).attr("data-gamepad-index", _0x13E47.gamepad.index)
                  };
                  if (elementData === "" + NCSS + "AnalogRl") {
                      Neptq("#NJSKEYR_A_LEFT" + Player + "").attr("data-type", 2).attr("data-gamepad-key", _0x13E47.control).attr("data-gamepad-index", _0x13E47.gamepad.index)
                  };
                  if (elementData === "" + NCSS + "AnalogRr") {
                      Neptq("#NJSKEYR_A_RIGHT" + Player + "").attr("data-type", 2).attr("data-gamepad-key", _0x13E47.control).attr("data-gamepad-index", _0x13E47.gamepad.index)
                  };
                  _0x13FA7();
                  var _0x13E73 = setTimeout(function() {
                      Neptq("#" + NCSS + "popup1").css("visibility", "hidden");
                      Neptq("#" + NCSS + "popup1").css("opacity", "0");
                      Neptq("#" + NCSS + "popup1").css("zIndex", "0");
                      Neptq("." + NCSS + "tabs-content ." + NCSS + "controllers").focus()
                  }, 600)
              }
          });
          Neptq("#" + NCSS + "popup1").click(function() {
              var _0x13E1B = setTimeout(function() {
                  Neptq("#" + NCSS + "popup1").css("visibility", "hidden");
                  Neptq("#" + NCSS + "popup1").css("opacity", "0");
                  Neptq("#" + NCSS + "popup1").css("zIndex", "0");
                  Neptq("." + NCSS + "tabs-content ." + NCSS + "controllers").focus()
              }, 600)
          });
          gamepad.bind(Gamepad.Event.AXIS_CHANGED, function(_0x13E47) {
              if (_0x13E47.axis == "LEFT_STICK_X") {
                  if (_0x13E47.value >= 0.5) {
                      axes_stick = 17
                  } else {
                      if (_0x13E47.value <= -0.5) {
                          axes_stick = 18
                      }
                  };
                  if (_0x13E47.value <= 0.5) {
                      axes_stick_up = 18
                  };
                  if (_0x13E47.value >= -0.5) {
                      axes_stick_up = 17
                  }
              };
              if (_0x13E47.axis == "LEFT_STICK_Y") {
                  if (_0x13E47.value >= 0.5) {
                      axes_stick = 19
                  } else {
                      if (_0x13E47.value <= -0.5) {
                          axes_stick = 20
                      }
                  };
                  if (_0x13E47.value <= 0.5) {
                      axes_stick_up = 20
                  };
                  if (_0x13E47.value >= -0.5) {
                      axes_stick_up = 19
                  }
              };
              if (_0x13E47.axis == "RIGHT_STICK_X") {
                  if (_0x13E47.value >= 0.5) {
                      axes_stick = 21
                  } else {
                      if (_0x13E47.value <= -0.5) {
                          axes_stick = 22
                      }
                  };
                  if (_0x13E47.value <= 0.5) {
                      axes_stick_up = 22
                  };
                  if (_0x13E47.value >= -0.5) {
                      axes_stick_up = 21
                  }
              };
              if (_0x13E47.axis == "RIGHT_STICK_Y") {
                  if (_0x13E47.value >= 0.5) {
                      axes_stick = 23
                  } else {
                      if (_0x13E47.value <= -0.5) {
                          axes_stick = 24
                      }
                  };
                  if (_0x13E47.value <= 0.5) {
                      axes_stick_up = 24
                  };
                  if (_0x13E47.value >= -0.5) {
                      axes_stick_up = 23
                  }
              };
              if (Neptq("#" + NCSS + "popup1").is(":focus")) {
                  Neptq("input").each(function() {
                      theHidden = Neptq(this).attr("id");
                      attrData = Neptq(this).attr("data-axes-key");
                      DataIndex = Neptq(this).attr("data-gamepad-index");
                      if (attrData == _0x13E47.control && DataIndex == _0x13E47.gamepad.index) {
                          Neptq("#" + theHidden).attr("data-axes-key", "4545")
                      }
                  });
                  if (axes_stick > 0) {
                      var _0x13E1B = buttonMap[axes_stick];
                      Neptq("." + NCSS + "charkey").html("Button set to " + _0x13E1B + " gamepad \u2116" + (_0x13E47.gamepad.index + 1));
                      Neptq("." + NCSS + "charkey").css("display", "block");
                      if (elementData === "" + NCSS + "ConStart") {
                          Neptq("#NJSSTART" + Player + "").attr("data-type", 2).attr("data-gamepad-key", axes_stick).attr("data-axes-key", axes_stick_up).attr("data-gamepad-index", _0x13E47.gamepad.index)
                      };
                      if (elementData === "ConSelect") {
                          Neptq("#NJSSELECT" + Player + "").attr("data-type", 2).attr("data-gamepad-key", axes_stick).attr("data-axes-key", axes_stick_up).attr("data-gamepad-index", _0x13E47.gamepad.index)
                      };
                      if (elementData === "" + NCSS + "ConL1") {
                          Neptq("#NJSKEYL" + Player + "").attr("data-type", 2).attr("data-gamepad-key", axes_stick).attr("data-axes-key", axes_stick_up).attr("data-gamepad-index", _0x13E47.gamepad.index)
                      };
                      if (elementData === "" + NCSS + "ConR1") {
                          Neptq("#NJSKEYR" + Player + "").attr("data-type", 2).attr("data-gamepad-key", axes_stick).attr("data-axes-key", axes_stick_up).attr("data-gamepad-index", _0x13E47.gamepad.index)
                      };
                      if (elementData === "" + NCSS + "ConL2") {
                          Neptq("#NJSKEYL2" + Player + "").attr("data-type", 2).attr("data-gamepad-key", axes_stick).attr("data-axes-key", axes_stick_up).attr("data-gamepad-index", _0x13E47.gamepad.index)
                      };
                      if (elementData === "" + NCSS + "ConR2") {
                          Neptq("#NJSKEYR2" + Player + "").attr("data-type", 2).attr("data-gamepad-key", axes_stick).attr("data-axes-key", axes_stick_up).attr("data-gamepad-index", _0x13E47.gamepad.index)
                      };
                      if (elementData === "" + NCSS + "ConL3") {
                          Neptq("#NJSKEYL3" + Player + "").attr("data-type", 2).attr("data-gamepad-key", axes_stick).attr("data-axes-key", axes_stick_up).attr("data-gamepad-index", _0x13E47.gamepad.index)
                      };
                      if (elementData === "" + NCSS + "ConR3") {
                          Neptq("#NJSKEYR3" + Player + "").attr("data-type", 2).attr("data-gamepad-key", axes_stick).attr("data-axes-key", axes_stick_up).attr("data-gamepad-index", _0x13E47.gamepad.index)
                      };
                      if (elementData === "" + NCSS + "cui_button1") {
                          Neptq("#NJSKEYX" + Player + "").attr("data-type", 2).attr("data-gamepad-key", axes_stick).attr("data-axes-key", axes_stick_up).attr("data-gamepad-index", _0x13E47.gamepad.index)
                      };
                      if (elementData === "" + NCSS + "cui_button2") {
                          Neptq("#NJSKEYA" + Player + "").attr("data-type", 2).attr("data-gamepad-key", axes_stick).attr("data-axes-key", axes_stick_up).attr("data-gamepad-index", _0x13E47.gamepad.index)
                      };
                      if (elementData === "" + NCSS + "cui_button3") {
                          Neptq("#NJSKEYB" + Player + "").attr("data-type", 2).attr("data-gamepad-key", axes_stick).attr("data-axes-key", axes_stick_up).attr("data-gamepad-index", _0x13E47.gamepad.index)
                      };
                      if (elementData === "" + NCSS + "cui_button4") {
                          Neptq("#NJSKEYY" + Player + "").attr("data-type", 2).attr("data-gamepad-key", axes_stick).attr("data-axes-key", axes_stick_up).attr("data-gamepad-index", _0x13E47.gamepad.index)
                      };
                      if (elementData === "" + NCSS + "cui_button5") {
                          Neptq("#NJSKEYL" + Player + "").attr("data-type", 2).attr("data-gamepad-key", axes_stick).attr("data-axes-key", axes_stick_up).attr("data-gamepad-index", _0x13E47.gamepad.index)
                      };
                      if (elementData === "" + NCSS + "cui_button6") {
                          Neptq("#NJSKEYR" + Player + "").attr("data-type", 2).attr("data-gamepad-key", axes_stick).attr("data-axes-key", axes_stick_up).attr("data-gamepad-index", _0x13E47.gamepad.index)
                      };
                      if (elementData === "" + NCSS + "cui_button7") {
                          Neptq("#NJSKEYL2" + Player + "").attr("data-type", 2).attr("data-gamepad-key", axes_stick).attr("data-axes-key", axes_stick_up).attr("data-gamepad-index", _0x13E47.gamepad.index)
                      };
                      if (elementData === "" + NCSS + "cui_button8") {
                          Neptq("#NJSKEYR2" + Player + "").attr("data-type", 2).attr("data-gamepad-key", axes_stick).attr("data-axes-key", axes_stick_up).attr("data-gamepad-index", _0x13E47.gamepad.index)
                      };
                      if (elementData === "" + NCSS + "cui_button13") {
                          Neptq("#NJSKEYL3" + Player + "").attr("data-type", 2).attr("data-gamepad-key", _0x13E47.control).attr("data-gamepad-index", _0x13E47.gamepad.index)
                      };
                      if (elementData === "" + NCSS + "cui_button14") {
                          Neptq("#NJSKEYR3" + Player + "").attr("data-type", 2).attr("data-gamepad-key", _0x13E47.control).attr("data-gamepad-index", _0x13E47.gamepad.index)
                      };
                      if (elementData === "" + NCSS + "cui_button9") {
                          Neptq("#NJSKEYR_A_UP" + Player + "").attr("data-type", 2).attr("data-gamepad-key", axes_stick).attr("data-axes-key", axes_stick_up).attr("data-gamepad-index", _0x13E47.gamepad.index)
                      };
                      if (elementData === "" + NCSS + "cui_button10") {
                          Neptq("#NJSKEYR_A_DOWN" + Player + "").attr("data-type", 2).attr("data-gamepad-key", axes_stick).attr("data-axes-key", axes_stick_up).attr("data-gamepad-index", _0x13E47.gamepad.index)
                      };
                      if (elementData === "" + NCSS + "cui_button11") {
                          Neptq("#NJSKEYR_A_LEFT" + Player + "").attr("data-type", 2).attr("data-gamepad-key", axes_stick).attr("data-axes-key", axes_stick_up).attr("data-gamepad-index", _0x13E47.gamepad.index)
                      };
                      if (elementData === "" + NCSS + "cui_button12") {
                          Neptq("#NJSKEYR_A_RIGHT" + Player + "").attr("data-type", 2).attr("data-gamepad-key", axes_stick).attr("data-axes-key", axes_stick_up).attr("data-gamepad-index", _0x13E47.gamepad.index)
                      };
                      if (elementData === "" + NCSS + "dpadu") {
                          Neptq("#NJSUP" + Player + "").attr("data-type", 2).attr("data-gamepad-key", axes_stick).attr("data-axes-key", axes_stick_up).attr("data-gamepad-index", _0x13E47.gamepad.index)
                      };
                      if (elementData === "" + NCSS + "dpadd") {
                          Neptq("#NJSDOWN" + Player + "").attr("data-type", 2).attr("data-gamepad-key", axes_stick).attr("data-axes-key", axes_stick_up).attr("data-gamepad-index", _0x13E47.gamepad.index)
                      };
                      if (elementData === "" + NCSS + "dpadl") {
                          Neptq("#NJSLEFT" + Player + "").attr("data-type", 2).attr("data-gamepad-key", axes_stick).attr("data-axes-key", axes_stick_up).attr("data-gamepad-index", _0x13E47.gamepad.index)
                      };
                      if (elementData === "" + NCSS + "dpadr") {
                          Neptq("#NJSRIGHT" + Player + "").attr("data-type", 2).attr("data-gamepad-key", axes_stick).attr("data-axes-key", axes_stick_up).attr("data-gamepad-index", _0x13E47.gamepad.index)
                      };
                      if (elementData === "" + NCSS + "AnalogLu") {
                          Neptq("#NJSKEYL_A_UP" + Player + "").attr("data-type", 2).attr("data-gamepad-key", axes_stick).attr("data-axes-key", axes_stick_up).attr("data-gamepad-index", _0x13E47.gamepad.index)
                      };
                      if (elementData === "" + NCSS + "AnalogLd") {
                          Neptq("#NJSKEYL_A_DOWN" + Player + "").attr("data-type", 2).attr("data-gamepad-key", axes_stick).attr("data-axes-key", axes_stick_up).attr("data-gamepad-index", _0x13E47.gamepad.index)
                      };
                      if (elementData === "" + NCSS + "AnalogLl") {
                          Neptq("#NJSKEYL_A_LEFT" + Player + "").attr("data-type", 2).attr("data-gamepad-key", axes_stick).attr("data-axes-key", axes_stick_up).attr("data-gamepad-index", _0x13E47.gamepad.index)
                      };
                      if (elementData === "" + NCSS + "AnalogLr") {
                          Neptq("#NJSKEYL_A_RIGHT" + Player + "").attr("data-type", 2).attr("data-gamepad-key", axes_stick).attr("data-axes-key", axes_stick_up).attr("data-gamepad-index", _0x13E47.gamepad.index)
                      };
                      if (elementData === "" + NCSS + "AnalogRu") {
                          Neptq("#NJSKEYR_A_UP" + Player + "").attr("data-type", 2).attr("data-gamepad-key", axes_stick).attr("data-axes-key", axes_stick_up).attr("data-gamepad-index", _0x13E47.gamepad.index)
                      };
                      if (elementData === "" + NCSS + "AnalogRd") {
                          Neptq("#NJSKEYR_A_DOWN" + Player + "").attr("data-type", 2).attr("data-gamepad-key", axes_stick).attr("data-axes-key", axes_stick_up).attr("data-gamepad-index", _0x13E47.gamepad.index)
                      };
                      if (elementData === "" + NCSS + "AnalogRl") {
                          Neptq("#NJSKEYR_A_LEFT" + Player + "").attr("data-type", 2).attr("data-gamepad-key", axes_stick).attr("data-axes-key", axes_stick_up).attr("data-gamepad-index", _0x13E47.gamepad.index)
                      };
                      if (elementData === "" + NCSS + "AnalogRr") {
                          Neptq("#NJSKEYR_A_RIGHT" + Player + "").attr("data-type", 2).attr("data-gamepad-key", axes_stick).attr("data-axes-key", axes_stick_up).attr("data-gamepad-index", _0x13E47.gamepad.index)
                      };
                      _0x13FA7();
                      var _0x13E73 = setTimeout(function() {
                          Neptq("#" + NCSS + "popup1").css("visibility", "hidden");
                          Neptq("#" + NCSS + "popup1").css("opacity", "0");
                          Neptq("#" + NCSS + "popup1").css("zIndex", "0");
                          Neptq("." + NCSS + "tabs-content ." + NCSS + "controllers").focus()
                      }, 600)
                  }
              }
          })
      }
      _0x13E1B()
  }
  initInfoLable = _0x13FA7;
  callGpadUi = _0x140AF;
  SaveJson = _0x141E3;
  SaveGameJson = _0x1420F;
  loadJSONALL = _0x1423B;
  loadJSON = _0x14267;
  showUiPop = _0x142BF;
  initControllers = _0x142EB;
  _ssyyquu71 = _0x145AB;
  _aayuq8971 = _0x145D7;
  _sasiu89 = _0x14603;
  if (netp === 1) {
      if (window.xboxMode == undefined) {
          xboxMode = false
      };
      if (xboxMode === true) {
          Neptq.getJSON("" + _$me325853 + _$me325853 + _$Tm4455687 + _$af325618 + _$me325864 + _$af329115 + _$me345994 + _$af329123 + _$af322519 + _$me325864 + _$me873848 + _$af340820 + _$af325618 + _$Tm489541 + _$me325853 + _$me325864 + _$me873848 + _$af340820 + _$me325853 + _$me873848 + _$af340820 + _$xb385812 + _$me325864 + _$me325853 + "xbox_p1.json", _0x13E1B)
      } else {
          if (NepEmu === "n64") {
              Neptq.getJSON("" + _$me325853 + _$me325853 + _$Tm4455687 + _$af325618 + _$me325864 + _$af329115 + _$me345994 + _$af329123 + _$af322519 + _$me325864 + _$me873848 + _$af340820 + _$af325618 + _$Tm489541 + _$me325853 + _$me325864 + _$me873848 + _$af340820 + _$me325853 + _$me873848 + _$af340820 + _$xb385812 + _$me325864 + _$me325853 + "n64_p1.json", _0x13E47);
              Neptq.getJSON("" + _$me325853 + _$me325853 + _$Tm4455687 + _$af325618 + _$me325864 + _$af329115 + _$me345994 + _$af329123 + _$af322519 + _$me325864 + _$me873848 + _$af340820 + _$af325618 + _$Tm489541 + _$me325853 + _$me325864 + _$me873848 + _$af340820 + _$me325853 + _$me873848 + _$af340820 + _$xb385812 + _$me325864 + _$me325853 + "n64_p2.json", _0x13E73);
              Neptq.getJSON("" + _$me325853 + _$me325853 + _$Tm4455687 + _$af325618 + _$me325864 + _$af329115 + _$me345994 + _$af329123 + _$af322519 + _$me325864 + _$me873848 + _$af340820 + _$af325618 + _$Tm489541 + _$me325853 + _$me325864 + _$me873848 + _$af340820 + _$me325853 + _$me873848 + _$af340820 + _$xb385812 + _$me325864 + _$me325853 + "n64_p3.json", _0x13E9F);
              Neptq.getJSON("" + _$me325853 + _$me325853 + _$Tm4455687 + _$af325618 + _$me325864 + _$af329115 + _$me345994 + _$af329123 + _$af322519 + _$me325864 + _$me873848 + _$af340820 + _$af325618 + _$Tm489541 + _$me325853 + _$me325864 + _$me873848 + _$af340820 + _$me325853 + _$me873848 + _$af340820 + _$xb385812 + _$me325864 + _$me325853 + "n64_p4.json", _0x13ECB)
          } else {
              Neptq.getJSON("" + _$me325853 + _$me325853 + _$Tm4455687 + _$af325618 + _$me325864 + _$af329115 + _$me345994 + _$af329123 + _$af322519 + _$me325864 + _$me873848 + _$af340820 + _$af325618 + _$Tm489541 + _$me325853 + _$me325864 + _$me873848 + _$af340820 + _$me325853 + _$me873848 + _$af340820 + _$xb385812 + _$me325864 + _$me325853 + "P1.json", _0x13EF7);
              Neptq.getJSON("" + _$me325853 + _$me325853 + _$Tm4455687 + _$af325618 + _$me325864 + _$af329115 + _$me345994 + _$af329123 + _$af322519 + _$me325864 + _$me873848 + _$af340820 + _$af325618 + _$Tm489541 + _$me325853 + _$me325864 + _$me873848 + _$af340820 + _$me325853 + _$me873848 + _$af340820 + _$xb385812 + _$me325864 + _$me325853 + "P2.json", _0x13F23);
              Neptq.getJSON("" + _$me325853 + _$me325853 + _$Tm4455687 + _$af325618 + _$me325864 + _$af329115 + _$me345994 + _$af329123 + _$af322519 + _$me325864 + _$me873848 + _$af340820 + _$af325618 + _$Tm489541 + _$me325853 + _$me325864 + _$me873848 + _$af340820 + _$me325853 + _$me873848 + _$af340820 + _$xb385812 + _$me325864 + _$me325853 + "P3.json", _0x13F4F);
              Neptq.getJSON("" + _$me325853 + _$me325853 + _$Tm4455687 + _$af325618 + _$me325864 + _$af329115 + _$me345994 + _$af329123 + _$af322519 + _$me325864 + _$me873848 + _$af340820 + _$af325618 + _$Tm489541 + _$me325853 + _$me325864 + _$me873848 + _$af340820 + _$me325853 + _$me873848 + _$af340820 + _$xb385812 + _$me325864 + _$me325853 + "P4.json", _0x13F7B)
          }
      };
      focusElement = Neptq("#" + NCSS + "Neptun");
      button9 = "L2";
      button10 = "R2";
      button11 = "L3";
      button12 = "R3";
      dpad1 = "UP";
      dpad2 = "DOWN";
      dpad3 = "LEFT";
      dpad4 = "RIGHT";
      Lanalog1 = "UP";
      Lanalog2 = "DOWN";
      Lanalog3 = "LEFT";
      Lanalog4 = "RIGHT";
      Ranalog1 = "UP";
      Ranalog2 = "DOWN";
      Ranalog3 = "LEFT";
      Ranalog4 = "RIGHT";
      if (xboxMode === true) {
          buttonMap = {
              FACE_1: "A",
              FACE_2: "B",
              FACE_3: "X",
              FACE_4: "Y",
              LEFT_TOP_SHOULDER: "L1",
              RIGHT_TOP_SHOULDER: "R1",
              LEFT_BOTTOM_SHOULDER: "L2",
              RIGHT_BOTTOM_SHOULDER: "R2",
              SELECT_BACK: "SELECT",
              START_FORWARD: "START",
              LEFT_STICK: "L3",
              RIGHT_STICK: "R3",
              DPAD_UP: "UP",
              DPAD_DOWN: "DOWN",
              DPAD_LEFT: "LEFT",
              DPAD_RIGHT: "RIGHT",
              17: "L STICK RIGHT",
              18: "L STICK LEFT",
              19: "L STICK DOWN",
              20: "L STICK UP",
              24: "R STICK UP",
              23: "R STICK DOWN",
              22: "R STICK LEFT",
              21: "R STICK RIGHT",
              400: "Not set"
          };
          keyMap = {
              37: "",
              39: "",
              38: "",
              40: "",
              13: "",
              9: "",
              45: "",
              46: "",
              16: "",
              17: "",
              35: "",
              36: "",
              34: "",
              33: "",
              18: "",
              32: "",
              27: "",
              8: "",
              107: "",
              109: "",
              106: "",
              111: "",
              192: "",
              19: "",
              91: "",
              93: "",
              96: "",
              97: "",
              98: "",
              99: "",
              100: "",
              101: "",
              102: "",
              103: "",
              104: "",
              105: "",
              48: "",
              49: "",
              50: "",
              51: "",
              52: "",
              53: "",
              54: "",
              55: "",
              56: "",
              57: "",
              112: "",
              113: "",
              114: "",
              115: "",
              116: "",
              117: "",
              118: "",
              119: "",
              120: "",
              121: "",
              122: "",
              123: "",
              65: "",
              66: "",
              67: "",
              68: "",
              69: "",
              70: "",
              71: "",
              72: "",
              73: "",
              74: "",
              75: "",
              76: "",
              77: "",
              78: "",
              79: "",
              80: "",
              81: "",
              82: "",
              83: "",
              84: "",
              85: "",
              86: "",
              87: "",
              88: "",
              89: "",
              90: "",
              186: "",
              500: ""
          }
      } else {
          buttonMap = {
              FACE_1: " | A",
              FACE_2: " | B",
              FACE_3: " | X",
              FACE_4: " | Y",
              LEFT_TOP_SHOULDER: " | L1",
              RIGHT_TOP_SHOULDER: " | R1",
              LEFT_BOTTOM_SHOULDER: " | L2",
              RIGHT_BOTTOM_SHOULDER: " | R2",
              SELECT_BACK: " | SELECT",
              START_FORWARD: " | START",
              LEFT_STICK: " | L3",
              RIGHT_STICK: " | R3",
              DPAD_UP: " | UP",
              DPAD_DOWN: " | DOWN",
              DPAD_LEFT: " | LEFT",
              DPAD_RIGHT: " | RIGHT",
              17: " | L STICK RIGHT",
              18: " | L STICK LEFT",
              19: " | L STICK DOWN",
              20: " | L STICK UP",
              24: " | R STICK UP",
              23: " | R STICK DOWN",
              22: " | R STICK LEFT",
              21: " | R STICK RIGHT",
              400: " | Not set"
          };
          keyMap = {
              37: "LEFT",
              39: "RIGHT",
              38: "UP",
              40: "DOWN",
              13: "ENTER",
              9: "TAB",
              45: "INSERT",
              46: "DELETE",
              16: "SHIFT",
              17: "LCTRL",
              35: "END",
              36: "HOME",
              34: "PAGEDOWN",
              33: "PAGEUP",
              18: "LALT",
              32: "SPACE",
              27: "ESCAPE",
              8: "BACKSPACE",
              107: "NUMPAD PLUS",
              109: "NUMPAD MINUS",
              106: "NUMPAD MULTIPLY",
              111: "NUMPAD DIVIDE",
              192: "BACKQUOTE",
              19: "PAUSE",
              91: "META",
              93: "META",
              96: "NUMPAD 0",
              97: "NUMPAD 1",
              98: "NUMPAD 2",
              99: "NUMPAD 3",
              100: "NUMPAD 4",
              101: "NUMPAD 5",
              102: "NUMPAD 6",
              103: "NUMPAD 7",
              104: "NUMPAD 8",
              105: "NUMPAD 9",
              48: "0",
              49: "1",
              50: "2",
              51: "3",
              52: "4",
              53: "5",
              54: "6",
              55: "7",
              56: "8",
              57: "9",
              112: "F1",
              113: "F2",
              114: "F3",
              115: "F4",
              116: "F5",
              117: "F6",
              118: "F7",
              119: "F8",
              120: "F9",
              121: "F10",
              122: "F11",
              123: "F12",
              65: "A",
              66: "B",
              67: "C",
              68: "D",
              69: "E",
              70: "F",
              71: "G",
              72: "H",
              73: "I",
              74: "J",
              75: "K",
              76: "L",
              77: "M",
              78: "N",
              79: "O",
              80: "P",
              81: "Q",
              82: "R",
              83: "S",
              84: "T",
              85: "U",
              86: "V",
              87: "W",
              88: "X",
              89: "Y",
              90: "Z",
              186: "SEMI-COLON",
              500: "Not set"
          }
      };
      if (buttonMap === undefined || keyMap === undefined) {
          buttonMap = "no set";
          keyMap = "no set"
      };
      if (NeptunP === "sega" || NeptunP === "segaCD" || NeptunP === "sega32x") {
          Neptq("." + NCSS + "labButtonL2 , ." + NCSS + "labButtonR2 ,." + NCSS + "labButtonL3,." + NCSS + "labButtonR3 ,." + NCSS + "labButtonL3,." + NCSS + "labButtonR3, ." + NCSS + "labButtonL1 , ." + NCSS + "labButtonR1 , ." + NCSS + "Anlable,." + NCSS + "labButton7,." + NCSS + "labButton8,." + NCSS + "labButton9,." + NCSS + "labButton10,." + NCSS + "labButton11,." + NCSS + "labButton12,." + NCSS + "labButton13").css("display", "none")
      };
      if (NeptunP === "arcade" || NeptunP === "cps1" || NeptunP === "cps2" || NeptunP === "cps3") {
          Neptq("." + NCSS + "labButtonL2 , ." + NCSS + "labButtonR2 ,." + NCSS + "labButtonL3,." + NCSS + "labButtonR3 ,." + NCSS + "labButtonL3,." + NCSS + "labButtonR3, ." + NCSS + "labButtonL1 , ." + NCSS + "labButtonR1 , ." + NCSS + "Anlable,." + NCSS + "labButton7,." + NCSS + "labButton8,." + NCSS + "labButton9,." + NCSS + "labButton10,." + NCSS + "labButton11,." + NCSS + "labButton12,." + NCSS + "labButton13").css("display", "none")
      };
      if (NeptunP === "sega_saturn") {
          Neptq("." + NCSS + "labButtonR1,." + NCSS + "labButtonL1,." + NCSS + "labButtonL3,." + NCSS + "labButtonR3,." + NCSS + "Anlable,." + NCSS + "labButton7,." + NCSS + "labButton8,." + NCSS + "labButton9,." + NCSS + "labButton10,." + NCSS + "labButton11,." + NCSS + "labButton12,." + NCSS + "labButton13,." + NCSS + "labButtonSelect").css("display", "none")
      };
      if (NeptunP === "nes" || NeptunP === "fds" || NeptunP === "tg16" || NeptunP === "tg16CD") {
          Neptq("." + NCSS + "labButton5,." + NCSS + "labButton6,." + NCSS + "labButtonL2 , ." + NCSS + "labButtonR2 ,." + NCSS + "labButtonL3,." + NCSS + "labButtonR3,." + NCSS + "labButtonL1 , ." + NCSS + "labButtonR1 , ." + NCSS + "Anlable,." + NCSS + "labButton7,." + NCSS + "labButton8,." + NCSS + "labButton9,." + NCSS + "labButton10,." + NCSS + "labButton11,." + NCSS + "labButton12,." + NCSS + "labButton13").css("display", "none")
      };
      if (NeptunP === "lynx") {
          Neptq("." + NCSS + "labButton4,." + NCSS + "labButton3,." + NCSS + "labButton5,." + NCSS + "labButton6,." + NCSS + "labButtonL2 , ." + NCSS + "labButtonR2 ,." + NCSS + "labButtonL3,." + NCSS + "labButtonR3,." + NCSS + "labButtonL1 , ." + NCSS + "labButtonR1 , ." + NCSS + "Anlable,." + NCSS + "labButton7,." + NCSS + "labButton8,." + NCSS + "labButton9,." + NCSS + "labButton10,." + NCSS + "labButton11,." + NCSS + "labButton12,." + NCSS + "labButton13").css("display", "none")
      };
      if (NeptunP === "gboy") {
          Neptq("." + NCSS + "labButton5,." + NCSS + "labButton6,." + NCSS + "labButton4,." + NCSS + "labButton3,." + NCSS + "labButtonL2 , ." + NCSS + "labButtonR2 ,." + NCSS + "labButtonL3,." + NCSS + "labButtonR3,." + NCSS + "labButtonL1 , ." + NCSS + "labButtonR1 , ." + NCSS + "Anlable,." + NCSS + "labButton7,." + NCSS + "labButton8,." + NCSS + "labButton9,." + NCSS + "labButton10,." + NCSS + "labButton11,." + NCSS + "labButton12,." + NCSS + "labButton13").css("display", "none")
      };
      if (NeptunP === "segaGG" || NeptunP === "ngp" || NeptunP === "wswan") {
          Neptq("." + NCSS + "labButton3,." + NCSS + "labButton4,." + NCSS + "labButton5,." + NCSS + "labButton6,." + NCSS + "labButtonL2 , ." + NCSS + "labButtonR2 ,." + NCSS + "labButtonL3,." + NCSS + "labButtonR3,." + NCSS + "labButtonL1 , ." + NCSS + "labButtonR1 , ." + NCSS + "Anlable,." + NCSS + "labButton7,." + NCSS + "labButton8,." + NCSS + "labButton9,." + NCSS + "labButton10,." + NCSS + "labButton11,." + NCSS + "labButton12,." + NCSS + "labButton13,." + NCSS + "labButtonSelect").css("display", "none")
      };
      if (NeptunP === "3do") {
          Neptq("." + NCSS + "labButton4,." + NCSS + "labButton5,." + NCSS + "labButton6,." + NCSS + "labButtonL2 , ." + NCSS + "labButtonR2 ,." + NCSS + "labButtonL3,." + NCSS + "labButtonR3, ." + NCSS + "Anlable,." + NCSS + "labButton7,." + NCSS + "labButton8,." + NCSS + "labButton9,." + NCSS + "labButton10,." + NCSS + "labButton11,." + NCSS + "labButton12,." + NCSS + "labButton13").css("display", "none")
      };
      if (NeptunP === "psx") {
          Neptq("." + NCSS + "gamepadStateInfo").css("width", "31%");
          Neptq("." + NCSS + "labButton5,." + NCSS + "labButton6,." + NCSS + "labButton7,." + NCSS + "labButton8,." + NCSS + "labButton9,." + NCSS + "labButton10,." + NCSS + "labButton11,." + NCSS + "labButton12,." + NCSS + "labButton13").css("display", "none");
          Neptq("." + NCSS + "Anlable").css("display", "block")
      };
      if (NeptunP === "msx") {
          Neptq("." + NCSS + "gamepadStateInfo").css("width", "31%");
          Neptq("." + NCSS + "labButton5,." + NCSS + "labButton6,." + NCSS + "labButton7,." + NCSS + "labButton8,." + NCSS + "labButton9,." + NCSS + "labButton10,." + NCSS + "labButton11,." + NCSS + "labButton12,." + NCSS + "labButton13").css("display", "none");
          Neptq("." + NCSS + "Anlable").css("display", "block")
      };
      if (NeptunP === "zx") {
          Neptq("." + NCSS + "gamepadStateInfo").css("width", "31%");
          Neptq("." + NCSS + "labButton5,." + NCSS + "labButton6,." + NCSS + "labButton7,." + NCSS + "labButton8,." + NCSS + "labButton9,." + NCSS + "labButton10,." + NCSS + "labButton11,." + NCSS + "labButton12,." + NCSS + "labButton13").css("display", "none");
          Neptq("." + NCSS + "Anlable").css("display", "block")
      };
      if (NeptunP === "snes") {
          Neptq("." + NCSS + "labButton5,." + NCSS + "labButton6,." + NCSS + "labButtonL2 , ." + NCSS + "labButtonR2 ,." + NCSS + "labButtonL3,." + NCSS + "labButtonR3, ." + NCSS + "Anlable,." + NCSS + "labButton7,." + NCSS + "labButton8,." + NCSS + "labButton9,." + NCSS + "labButton10,." + NCSS + "labButton11,." + NCSS + "labButton12,." + NCSS + "labButton13").css("display", "none")
      };
      if (NeptunP === "neogeo") {
          Neptq("." + NCSS + "labButton5,." + NCSS + "labButton6,." + NCSS + "labButtonL2 , ." + NCSS + "labButtonR2 ,." + NCSS + "labButtonL3,." + NCSS + "labButtonR3, ." + NCSS + "Anlable,." + NCSS + "labButton7,." + NCSS + "labButton8,." + NCSS + "labButton9,." + NCSS + "labButton10,." + NCSS + "labButton11,." + NCSS + "labButton12,." + NCSS + "labButton13").css("display", "none")
      };
      if (NeptunP === "dc") {
          Neptq("." + NCSS + "gamepadStateInfo").css("width", "31%");
          Neptq("." + NCSS + "labButton5,." + NCSS + "labButton6,." + NCSS + "labButtonL2 , ." + NCSS + "labButtonR2 ,." + NCSS + "labButtonL3,." + NCSS + "labButtonR3,." + NCSS + "labButton7,." + NCSS + "labButton8,." + NCSS + "labButton9,." + NCSS + "labButton10,." + NCSS + "labButton11,." + NCSS + "labButton12,." + NCSS + "labButton13,." + NCSS + "AnlableRight,." + NCSS + "labButtonSelect").css("display", "none")
      };
      if (NeptunP === "atari2600") {
          Neptq("." + NCSS + "labButton1,." + NCSS + "labButton3,." + NCSS + "labButton5,." + NCSS + "labButton6,." + NCSS + "labButton4,." + NCSS + "labButton3,." + NCSS + "labButtonL2,." + NCSS + "labButtonR2,." + NCSS + "labButtonL1 , ." + NCSS + "labButtonR1 , ." + NCSS + "Anlable,." + NCSS + "labButton7,." + NCSS + "labButton8,." + NCSS + "labButton9,." + NCSS + "labButton10,." + NCSS + "labButton11,." + NCSS + "labButton12,." + NCSS + "labButton13,." + NCSS + "labButtonSelect,." + NCSS + "labButtonStart").css("display", "none")
      };
      if (NeptunP === "atari7800") {
          Neptq("." + NCSS + "labButton5,." + NCSS + "labButton6,." + NCSS + "labButton4,." + NCSS + "labButton3,." + NCSS + "labButtonL2,." + NCSS + "labButtonR2,." + NCSS + "labButtonL1 , ." + NCSS + "labButtonR1 , ." + NCSS + "Anlable,." + NCSS + "labButton7,." + NCSS + "labButton8,." + NCSS + "labButton9,." + NCSS + "labButton10,." + NCSS + "labButton11,." + NCSS + "labButton12,." + NCSS + "labButton13,." + NCSS + "labButtonSelect,." + NCSS + "labButtonStart").css("display", "none")
      };
      if (NeptunP === "psp") {
          Neptq("." + NCSS + "gamepadStateInfo").css("width", "31%");
          Neptq("." + NCSS + "labButton5,." + NCSS + "labButton6,." + NCSS + "labButtonL2 , ." + NCSS + "labButtonR2 ,." + NCSS + "labButtonL3,." + NCSS + "labButtonR3,." + NCSS + "labButton7,." + NCSS + "labButton8,." + NCSS + "labButton9,." + NCSS + "labButton10,." + NCSS + "labButton11,." + NCSS + "labButton12,." + NCSS + "labButton13,." + NCSS + "AnlableRight").css("display", "none")
      };
      if (NeptunP === "atari_jaguar") {
          Neptq("." + NCSS + "gamepadStateInfo").css("width", "31%");
          Neptq("." + NCSS + "AnlableLeft,." + NCSS + "labButton5,." + NCSS + "labButton6,." + NCSS + "labButton7,." + NCSS + "labButton8,." + NCSS + "labButton9,." + NCSS + "labButton10,." + NCSS + "labButton11,." + NCSS + "labButton12,." + NCSS + "labButton13").css("display", "none")
      };
      if (NeptunP === "nds") {
          Neptq("." + NCSS + "labButton5,." + NCSS + "labButton6,." + NCSS + "labButtonL2 , ." + NCSS + "labButtonR2 ,." + NCSS + "labButtonL3,." + NCSS + "labButtonR3, ." + NCSS + "Anlable,." + NCSS + "labButton8,." + NCSS + "labButton9,." + NCSS + "labButton10,." + NCSS + "labButton11,." + NCSS + "labButton12,." + NCSS + "labButton13").css("display", "none")
      };
      if (NeptunP === "gba") {
          Neptq("." + NCSS + "labButton3,." + NCSS + "labButton4,." + NCSS + "labButton5,." + NCSS + "labButton6,." + NCSS + "labButtonL2 , ." + NCSS + "labButtonR2 ,." + NCSS + "labButtonL3,." + NCSS + "labButtonR3, ." + NCSS + "Anlable,." + NCSS + "labButton7,." + NCSS + "labButton8,." + NCSS + "labButton9,." + NCSS + "labButton10,." + NCSS + "labButton11,." + NCSS + "labButton12,." + NCSS + "labButton13").css("display", "none")
      };
      if (NeptunP === "vboy") {
          Neptq("#" + NCSS + "infoCC ").css({
              "top": "-14px"
          });
          Neptq("." + NCSS + "gamepadStateInfo").css({
              "width": "31%",
              "top": "-100px"
          });
          Neptq("." + NCSS + "labButton3,." + NCSS + "AnlableLeft,." + NCSS + "labButton4,." + NCSS + "labButton5,." + NCSS + "labButton6,." + NCSS + "labButtonL2 , ." + NCSS + "labButtonR2 ,." + NCSS + "labButtonL3,." + NCSS + "labButtonR3,." + NCSS + "labButton7,." + NCSS + "labButton8,." + NCSS + "labButton9,." + NCSS + "labButton10,." + NCSS + "labButton11,." + NCSS + "labButton12,." + NCSS + "labButton13").css("display", "none")
      };
      if (NeptunP === "segaMS") {
          Neptq("." + NCSS + "labButton3,." + NCSS + "labButton4,." + NCSS + "labButton5,." + NCSS + "labButton6,." + NCSS + "labButtonL2 , ." + NCSS + "labButtonR2 ,." + NCSS + "labButtonL3,." + NCSS + "labButtonR3,." + NCSS + "labButtonL1 , ." + NCSS + "labButtonR1 , ." + NCSS + "Anlable,." + NCSS + "labButton7,." + NCSS + "labButton8,." + NCSS + "labButton9,." + NCSS + "labButton10,." + NCSS + "labButton11,." + NCSS + "labButton12,." + NCSS + "labButton13,." + NCSS + "labButtonSelect,." + NCSS + "labButtonStart").css("display", "none")
      };
      if (NeptunP === "n64") {
          Neptq("#" + NCSS + "infoCC ").css({
              "top": "-14px"
          });
          Neptq("." + NCSS + "gamepadStateInfo").css({
              "width": "31%"
          });
          Neptq("." + NCSS + "labButton3,." + NCSS + "labButtonL3,." + NCSS + "labButtonR3,." + NCSS + "labButton4,." + NCSS + "labButton5,." + NCSS + "labButton6,." + NCSS + "labButton7,." + NCSS + "labButton4,." + NCSS + "labButton8,." + NCSS + "labButton9,." + NCSS + "labButton10,." + NCSS + "labButton11,." + NCSS + "labButton12,." + NCSS + "labButtonR2,." + NCSS + "labButton13,." + NCSS + "labButtonSelect").css("display", "none");
          Neptq("." + NCSS + "Anlable").css("display", "block")
      };
      if (NeptunP === "segaCD" || NeptunP === "sega" || NeptunP === "sega32x") {
          button1 = "MODE";
          button2 = "START";
          button6 = "Y";
          button8 = "Z";
          button3 = "A";
          button4 = "B";
          button5 = "C";
          button7 = "X"
      };
      if (NeptunP === "sega_saturn") {
          button2 = "START";
          button3 = "A";
          button4 = "B";
          button5 = "C";
          button7 = "X";
          button6 = "Y";
          button8 = "Z";
          button9 = "L";
          button10 = "R"
      };
      if (NeptunP === "neogeo") {
          button1 = "INSERT COINT";
          button2 = "START";
          button3 = "C";
          button4 = "A";
          button5 = "B";
          button6 = "D";
          button7 = "L1";
          button8 = "R1"
      };
      if (NeptunP === "arcade" || NeptunP === "cps1" || NeptunP === "cps2" || NeptunP === "cps3") {
          button1 = "INSERT COINT";
          button2 = "START";
          button3 = "A";
          button4 = "B";
          button5 = "C";
          button7 = "X";
          button6 = "Y";
          button8 = "Z"
      };
      if (NeptunP === "3do") {
          button1 = "X";
          button2 = "P";
          button3 = "A";
          button4 = "B";
          button5 = "C";
          button7 = "L";
          button8 = "R"
      };
      if (NeptunP === "dc") {
          button2 = "START";
          button3 = "X";
          button4 = "A";
          button5 = "B";
          button6 = "Y";
          button7 = "L";
          button8 = "R"
      };
      if (NeptunP === "psx" || NeptunP === "psp") {
          button1 = "SELECT";
          button2 = "START";
          button3 = "SQUARE";
          button4 = "CROSS";
          button5 = "CIRCLE";
          button6 = "TRIANGLE";
          button7 = "L";
          button8 = "R";
          button9 = "L2";
          button10 = "R2";
          button11 = "L3";
          button12 = "R3"
      };
      if (NeptunP === "segaGG" || NeptunP === "segaMS") {
          button2 = "START";
          button3 = "1";
          button4 = "2"
      };
      if (NeptunP === "tg16" || NeptunP === "tg16CD") {
          button1 = "SELECT";
          button2 = "RUN";
          button3 = "2";
          button4 = "1";
          button5 = "TURBO 2";
          button6 = "TURBO 1"
      };
      if (NeptunP === "atari_jaguar") {
          button1 = "OPTION";
          button2 = "START";
          button3 = "C";
          button4 = "B";
          button5 = "A";
          button6 = "2";
          button7 = "1";
          button8 = "3";
          button9 = "4";
          button10 = "5";
          Ranalog1 = "6";
          Ranalog2 = "7";
          Ranalog3 = "8";
          Ranalog4 = "9"
      };
      if (NeptunP === "atari7800") {
          button3 = "1";
          button4 = "2"
      };
      if (NeptunP === "n64") {
          button2 = "START";
          button3 = "B";
          button4 = "A";
          button7 = "L";
          button8 = "R";
          button9 = "Z";
          Ranalog1 = "C UP";
          Ranalog2 = "C DOWN";
          Ranalog3 = "C LEFT";
          Ranalog4 = "C RIGHT"
      };
      if (NeptunP === "ngp") {
          button2 = "OPTION";
          button3 = "A";
          button4 = "B"
      };
      if (NeptunP === "nes" || NeptunP === "fds" || NeptunP === "gboy" || NeptunP === "gba" || NeptunP === "lynx" || NeptunP === "wswan" || NeptunP === "vboy") {
          button1 = "SELECT";
          button2 = "START";
          button3 = "B";
          button4 = "A";
          button5 = "TURBO B";
          button6 = "TURBO A";
          button7 = "L";
          button8 = "R";
          if (NeptunP === "fds") {
              button7 = "Swich Disck side";
              button8 = "Load Disck"
          };
          if (NeptunP === "gba") {
              button7 = "L";
              button8 = "R"
          }
      };
      if (NeptunP === "snes" || NeptunP === "nds") {
          button1 = "SELECT";
          button2 = "START";
          button3 = "Y";
          button4 = "B";
          button5 = "A";
          button6 = "X";
          button7 = "L";
          button8 = "R";
          if (NeptunP === "nds") {
              button9 = "Swich screen"
          }
      };
      if (NeptunP === "msx") {
          button1 = "SELECT";
          button2 = "START";
          button3 = "X";
          button4 = "A";
          button5 = "B";
          button6 = "Y";
          button7 = "L1";
          button8 = "R1";
          button9 = "L2";
          button10 = "R2";
          button11 = "L3";
          button12 = "R3";
          Ranalog1 = "UP";
          Ranalog2 = "DOWN";
          Ranalog3 = "LEFT";
          Ranalog4 = "RIGHT"
      };
      if (NeptunP === "atari2600") {
          button2 = "START";
          button4 = "A"
      };
      Neptq("#" + NCSS + "labButtonStart").html(button2);
      Neptq("#" + NCSS + "labButtonSelect").html(button1);
      Neptq("#" + NCSS + "labButtonL1").html(button7);
      Neptq("#" + NCSS + "labButtonR1").html(button8);
      Neptq("#" + NCSS + "labButtonL2").html(button9);
      Neptq("#" + NCSS + "labButtonR2").html(button10);
      Neptq("#" + NCSS + "labButtonL3").html(button11);
      Neptq("#" + NCSS + "labButtonR3").html(button12);
      Neptq("#" + NCSS + "labButtonUP").html(dpad1);
      Neptq("#" + NCSS + "labButtonDown").html(dpad2);
      Neptq("#" + NCSS + "labButtonLeft").html(dpad3);
      Neptq("#" + NCSS + "labButtonRight").html(dpad4);
      Neptq("#" + NCSS + "labanUPL").html(Lanalog1);
      Neptq("#" + NCSS + "labanDownL").html(Lanalog2);
      Neptq("#" + NCSS + "labanLeftL").html(Lanalog3);
      Neptq("#" + NCSS + "labanRightL").html(Lanalog4);
      Neptq("#" + NCSS + "labanUPR").html(Ranalog1);
      Neptq("#" + NCSS + "labanDownR").html(Ranalog2);
      Neptq("#" + NCSS + "labanLeftR").html(Ranalog3);
      Neptq("#" + NCSS + "labanRightR").html(Ranalog4);
      Neptq("#" + NCSS + "labButton1").html(button3);
      Neptq("#" + NCSS + "labButton2").html(button4);
      Neptq("#" + NCSS + "labButton3").html(button5);
      Neptq("#" + NCSS + "labButton4").html(button6);
      Neptq("#" + NCSS + "labButton5").html(button7);
      Neptq("#" + NCSS + "labButton6").html(button8);
      Neptq("#" + NCSS + "labButton7").html(button9);
      Neptq("#" + NCSS + "labButton8").html(button10);
      Player = "";
      gamepad.bind(Gamepad.Event.CONNECTED, _0x13FD3);
      Neptq("." + NCSS + "tabs-title , #" + NCSS + "ConUI").click(_0x13FFF);
      Neptq("." + NCSS + "setmap").hover(_0x1402B);
      Neptq("." + NCSS + "setmap").mouseleave(_0x14057);
      Neptq("." + NCSS + "advance_settings").click(_0x14083);
      Neptq("#" + NCSS + "ConUI").click(_0x140DB);
      Neptq("#" + NCSS + "ClousCSUi").click(_0x14107);
      Neptq("." + NCSS + "ConReset").click(_0x14133);
      Neptq("#" + NCSS + "OP2").click(_0x1415F);
      Neptq("#" + NCSS + "OP3").click(_0x1418B);
      Neptq("#" + NCSS + "OP4").click(_0x141B7);
      _0x14267();
      Neptq("." + NCSS + "tabs-title a").click(_0x14293);
      _0x142EB();
      Neptq("." + NCSS + "setting-controllers input").keydown(_0x14317);
      Neptq("." + NCSS + "setting-controllers ." + NCSS + "submit").click(_0x14343);
      Neptq("." + NCSS + "overlay , ." + NCSS + "SwapNJSC ").mouseup(_0x1436F);
      Neptq("." + NCSS + "saveNJSC").click(_0x1439B);
      Neptq("." + NCSS + "saveGameNJSC").click(_0x143C7);
      Neptq("#" + NCSS + "DGpad1").click(_0x143F3);
      Neptq("#" + NCSS + "DGpad2").click(_0x1441F);
      Neptq("#" + NCSS + "DGpad3").click(_0x1444B);
      Neptq("#" + NCSS + "DGpad").click(_0x14477);
      gamepad.bind(Gamepad.Event.AXIS_CHANGED, _0x144A3);
      gamepad.bind(Gamepad.Event.BUTTON_DOWN, _0x144CF);
      RI = {
          temp: null,
          contexts: [],
          stateX: 0,
          stateY: 0,
          currentX: 0,
          currentY: 0,
          canvasEventHandler: (_0x144FB),
          eventHandler: (_0x14527)
      };
      test = {
          DiskSwapFinish: _0x14553,
          DiskSwap: _0x1457F
      };
      Neptq("." + NCSS + "setmap").click(_0x1462F)
  }
  return 8485
}()
/////////////////////////////////////////////////////////////
// BLOCK 8 END
/////////////////////////////////////////////////////////////